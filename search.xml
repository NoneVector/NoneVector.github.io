<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数字签名之ElGamal签名体制</title>
      <link href="/posts/14.html"/>
      <url>/posts/14.html</url>
      
        <content type="html"><![CDATA[<h2 id="数字签名原理">数字签名原理</h2><p>一个完整的数字签名方案由三部分组成:密钥生成算法、签名算法和验证算法。密钥生成算法是根据系统参数为签名者生成公钥和私钥;签名算法是产生数字签名的某种算法,而验证算法是检验一个数字签名是否有效(即是否由指定实体生成)的某种算法。如无特殊说明,下文继续用 A 代表签名者,B 代表验证者。</p><p>下面给出数字签名的形式化定义:</p><p>(1)密钥生成算法</p><p>系统初始化产生签名方案的基本参数(M,S,K,Sign,Ver),其中 M 为消息空间,S 为签名空间，K 为密钥空间，包含私钥和公钥,Sign 为签名算法集合,Ver 为签名验证算法集合。用户 A 执行密钥生成算法生成自己的公私密钥$(k_1,k_2)$。</p><p>(2)签名算法</p><p>对任意的消息 $m \in M$,有$s=sign_{k_2}(m)$,且$s \in S$,那么 s 为消息的签名,将签名消息组(m,s)发送给签名验证者。</p><p>(3)验证算法</p><p>对于上述的$k_1 \in K$,有相应的签名验证算法:$ver_{k_1}:M \times S \rightarrow \lbrace True,False \rbrace,ver_{k_1} \in Ver$,且</p><p>$$<br>ver_{k1}(m, s) =<br>\begin{cases}<br>True  &amp; 当 s = sign_{k_2} \newline<br>False &amp; 当s \neq sign_{k_2}<br>\end{cases}<br>$$</p><p>签名验证者收到(m,s)后,计算 $ver_{k_1}(m,s)$,若 $ver_{k_1}(m,s)=True$,则签名有效;否则签名无效。</p><p>对于每一个$k \in K$,签名函数$ sign*{k_2}$,和签名验证函数 $ver*{k<em>1}$, 是容易计算的。而验证函数 $ver</em>{k<em>1}$是公开的,同时还要求对任意的消息 m,在未知$k_2$条件下从集合 S 中选取 s 使得 $ver</em>{k_1}(m,s)=True$ 是非常困难的,也就是说,攻击者对消息 m 产生有效的签名 s 是不可能的。</p><p>根据定义,在进行私钥签名前,先进行消息关键信息提取。</p><p>如图 8-1 所示,发送方 A 将消息用 Hash 算法产生一个消息摘要(Message Digest),这个消息摘要有两个重要特性:<strong>抗碰撞性</strong>和<strong>摘要长度</strong>固定,使得任何消息产生的签名值长度是一样的。发送方 A 产生消息摘要后,用自己的私钥对摘要进行加密,这个加密后的消息摘要就是数字签名，随后发送方 A 将消息与签名发给接收方 B。B 接收到消息及其签名后,用发送方 A 的公钥解密这个签名,获得由发送方 A 生成的消息摘要,接着用发送方 A 所用 Hash 算法重新生成所获得消息的摘要,然后比对这两个摘要。如果相同,说明这个签名是发送方 A 针对这个消息的有效签名;如果不相同,则签名无效。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/18/169037_8532583f85-1.png" alt="1.png"></p><p>依据上述数字签名的基本原理,人们设计出了众多不同种类的数字签名方案,下面将介绍常用数字签名的实现方案。</p><h2 id="ElGamal签名体制">ElGamal签名体制</h2><p>T. EIGamal于1985年提出了一个基于<strong>有限域离散对数问题</strong>的数字签名方案,美国NIST确立的数字签名标准(Digital Signature Standard,DSS)即是在它基础上修订的。EIGamal数字签名方案是一种<strong>非确定性</strong>的签名方案,即对给定的一个消息,由于选择的随机数不同而产生不同的数字签名,并且验证算法均会判断为有效。下面简要介绍其方案的实现过程。</p><ol><li><p>密钥生成算法</p><p>选择一个满足安全性要求的大素数 p,然后选择一个<strong>生成元</strong> $g \in Z^<em>_p$;和随机数$x \in _RZ^</em>_p$，,计算$y \equiv g^x(mod\ p)$。则签名者A的公钥为(p，g，y),私钥为x。</p></li><li><p>签名算法<br>设待签消息为 m，签名者选择随机数$k \in _RZ^*_p$;,计算:<br>$$<br>\begin{aligned}<br>&amp;r \equiv g^k(mod \ p) \newline<br>&amp;s \equiv [h(m)-xr]k^{-1}(mod \ (p-1))<br>\end{aligned}<br>$$<br>则对消息 m的数字签名为(r，s),其中h为安全的 Hash 函数</p></li><li><p>验证算法</p><p>签名接收者 B收到消息 m 和签名(r，s)后,首先计算 h(m),然后验证下列等式是否成立<br>$$<br>y^rr^s \equiv g^{h(m)}(mod \ p)<br>$$</p><p>如等式成立,则签名有效;否则,签名无效。</p></li><li><p>正确性</p><p>如果所有算法按步骤执行,则接收者输出签名有效,因为<br>$$<br>r \equiv g^k(mod \ p), s \equiv [h(m) - xr]k ^{-1}(mod \ (p - 1))<br>$$<br>所以<br>$$<br>\begin{aligned}<br>&amp; ks \equiv h(m) - xr(mod \ (p - 1)) \newline<br>&amp; g^{ks} \equiv g^{h(m) - xr}(mod \ p) \newline<br>&amp; g^{ks}g^{xr} \equiv g^{h(m)}(mod \ p) \newline<br>&amp; y^rr^s \equiv g^{h(m)}(mod \ p)<br>\end{aligned}<br>$$</p></li></ol><h2 id="案例">案例</h2><ol><li><p>密钥生成算法</p><p>假设A选取素数 p=19,$Z^*_p$的生成元g=2。选取私钥x=15,计算:<br>$$<br>y=g^x \ mod \ p=2^{15} \ mod \ 19 = 12<br>$$<br>则A的公钥是(p=19，g=2，y=12)。</p></li><li><p>签名算法<br>设消息m的Hash值h(m)=16,则A选取随机数k = 11，计算:<br>$$<br>\begin{aligned}<br>&amp;r=g^k \ mod \ p \equiv 2^{11} \ mod \ 19=15\newline<br>&amp;k^{-1} \ mod \ (p-1) = 5<br>\end{aligned}<br>$$<br>最后计算签名<br>$$<br>s=[h(m)-xr]k^{-1} \ mod \ (p-1)=5(16-15 \times 15) \ mod \ 18=17<br>$$<br>A对m的签名为(15，17)。</p></li><li><p>验证算法</p><p>接收者 B得到签名(15,17)后计算:<br>$$<br>\begin{aligned}<br>y^rr^s \ mod \ p=12^{15}15^{17} \ mod \ 19=5\newline<br>g^{h(m)} \ mod \ p \equiv 216 \ mod \ 19=5<br>\end{aligned}<br>$$<br>验证等式<br>$$<br>y^rr^s \equiv g^{h(m)}(mod \ p)<br>$$<br>成立，因此B接受签名。</p><p>注意,本例旨在说明该方案的实现过程,为计算方便所选参数均较为简单。按目前计算能力,通常使用 1024 比特或更大的模数。</p></li></ol><h2 id="C-代码">C++代码</h2><blockquote><p>在写代码的时候我并没有学习优先于离散对数问题~~（懒）~~，因此，关于生成元g的知识我并不清楚，我是直接copy的生成元函数，但是我会适当的加上我的理解的注释</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mod</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="keyword">while</span>(a&lt;<span class="number">0</span>)&#123;</span><br><span class="line">a=a+b;</span><br><span class="line">&#125;</span><br><span class="line">ans=a%b;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指数运算</span></span><br><span class="line"><span class="comment">// 输入a和b</span></span><br><span class="line"><span class="comment">// 输出a的b次方</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">power</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span> ; i&lt;b ; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = temp * a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个数是否为素数</span></span><br><span class="line"><span class="comment">// 输入一个数a</span></span><br><span class="line"><span class="comment">// 返回：如果a是素数，返回true ； 否则返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Prime</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span> ; i&lt;= (a/<span class="number">2</span>) ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((a % i) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辗转相除法</span></span><br><span class="line"><span class="comment">// 输入 a 和 b</span></span><br><span class="line"><span class="comment">// 返回 a和b 的最大公约数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧拉函数</span></span><br><span class="line"><span class="comment">// 输入a</span></span><br><span class="line"><span class="comment">// 返回a的欧拉函数值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span> ; i&lt;a ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gcd</span>(a,i) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">b += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求阶函数</span></span><br><span class="line"><span class="comment">// 作用是找到最小的正整数 p（p &lt; n），p % a == 0</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">order</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>  p = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( p&lt;=n &amp;&amp; <span class="built_in">power</span>(b,p%a) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p = p - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥p的生成函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Generate_p</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">int</span> p = (<span class="built_in">rand</span>() % (<span class="number">10000</span> - <span class="number">1000</span> + <span class="number">1</span>) + <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; p&lt;<span class="number">10000</span> ; p++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Prime</span>(p)==<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥g的生成函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Generate_g</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">euler</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">2</span>; a&lt;p ; a++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">order</span>(p,n,a) == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥x的生成函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Generate_x</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">int</span> d = <span class="built_in">rand</span>() % ( p<span class="number">-2</span><span class="number">-2</span>+<span class="number">1</span>) + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机数k的生成函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Generate_k</span><span class="params">(<span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="type">int</span> X = <span class="built_in">rand</span>() % p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 快速模幂运算</span></span><br><span class="line"><span class="comment">// 形式为 (a^b) mod c</span></span><br><span class="line"><span class="comment">// 输入 a 、b 和 c  因为要求a^b ， 因此是长整数</span></span><br><span class="line"><span class="comment">// 返回 (a^b) mod c 计算结果</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(LL a, LL b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = (res * a) % c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        b = b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求解乘法逆元</span></span><br><span class="line"><span class="comment">// 输入num 和 mod。 求num 在 mod 下的乘法逆元</span></span><br><span class="line"><span class="comment">// 返回num 在 mod 下的乘法逆元</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inverse</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = num;</span><br><span class="line">    <span class="type">int</span> b = mod;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">1</span>, x0 = <span class="number">1</span>, y0 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> qt, temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(b != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">qt = a / b;</span><br><span class="line">        temp = a % b;</span><br><span class="line"></span><br><span class="line">a = b;</span><br><span class="line">        b = temp;</span><br><span class="line"></span><br><span class="line">temp = x; x = x0 - qt * x; x0 = temp;</span><br><span class="line">        temp = y; y = y0 - qt * y; y0 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x0 &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x0 += mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ElGamal签名验证开始O(∩_∩)O&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================================================&quot;</span> &lt;&lt;endl;</span><br><span class="line"><span class="comment">//ElGamal密钥生成</span></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;1.ElGamal密钥生成如下:&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> p = <span class="built_in">Generate_p</span>();</span><br><span class="line"><span class="type">int</span> g = <span class="built_in">Generate_g</span>(p);</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">Generate_x</span>(p);</span><br><span class="line"><span class="type">int</span> y = <span class="built_in">qmi</span>(g, x, p);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;随机数x为:&quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;签名者A的公钥&#123;p,g,y&#125;为:&#123;&quot;</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; g &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================================================&quot;</span> &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;2.ElGamal签名开始:&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> k = <span class="number">1</span>; <span class="comment">// 随机数</span></span><br><span class="line"><span class="type">int</span> in_k = <span class="built_in">inverse</span>(k, p - <span class="number">1</span>); <span class="comment">// k在mod(p-1)下的逆元</span></span><br><span class="line"><span class="type">int</span> hm = <span class="built_in">Generate_p</span>(); <span class="comment">// 随机一个明文</span></span><br><span class="line"><span class="type">int</span> r = <span class="built_in">qmi</span>(g, k, p);</span><br><span class="line"><span class="type">int</span> s = <span class="built_in">mod</span>((hm - x * r) * in_k , (p - <span class="number">1</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;明文hash后的值为&quot;</span> &lt;&lt; hm &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;随机数k和逆元in_k为:&quot;</span> &lt;&lt; k &lt;&lt; <span class="string">&quot;,&quot;</span>&lt;&lt; in_k &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A对消息的数字签名&#123;r,s&#125;为:&#123;&quot;</span> &lt;&lt; r &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;=================================================&quot;</span> &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;3.ElGamal验证开始:&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//防止计算过程中量太大，将算式拆分多次mod</span></span><br><span class="line">    <span class="comment">//y = 12,r = 15, p = 19, s = 17;</span></span><br><span class="line">    <span class="comment">//hm = 16,g = 2;</span></span><br><span class="line">    <span class="type">int</span> yr = <span class="built_in">qmi</span>(y, r, p);</span><br><span class="line">    <span class="type">int</span> rs = <span class="built_in">qmi</span>(r, s, p);</span><br><span class="line">    <span class="type">int</span> yrrs = <span class="built_in">mod</span>(yr *rs, p);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ghm = <span class="built_in">qmi</span>(g, hm, p);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过y,r,p计算yrrs mod p的值为:&quot;</span> &lt;&lt; yrrs &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过g,hm,p计算ghm mod p的值为:&quot;</span> &lt;&lt;ghm &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span>(yrrs == ghm) cout &lt;&lt; <span class="string">&quot;两值一致，数字签名验证有效!&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;两值不一致，数字签名验证无效!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ElGamal签名验证开始<span class="built_in">O</span>(∩_∩)O</span><br><span class="line">=================================================</span><br><span class="line"><span class="number">1.</span>ElGamal密钥生成如下:</span><br><span class="line"></span><br><span class="line">随机数x为:<span class="number">3998</span></span><br><span class="line">签名者A的公钥&#123;p,g,y&#125;为:&#123;<span class="number">4001</span>,<span class="number">2</span>,<span class="number">3001</span>&#125;</span><br><span class="line">=================================================</span><br><span class="line"><span class="number">2.</span>ElGamal签名开始:</span><br><span class="line"></span><br><span class="line">明文hash后的值为<span class="number">4001</span></span><br><span class="line">随机数k和逆元in_k为:<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">A对消息的数字签名&#123;r,s&#125;为:&#123;<span class="number">2</span>,<span class="number">5</span>&#125;</span><br><span class="line">=================================================</span><br><span class="line"><span class="number">3.</span>ElGamal验证开始:</span><br><span class="line"></span><br><span class="line">通过y,r,p计算yrrs mod p的值为:<span class="number">2</span></span><br><span class="line">通过g,hm,p计算ghm mod p的值为:<span class="number">2</span></span><br><span class="line">两值一致，数字签名验证有效!</span><br></pre></td></tr></table></figure><h2 id="安全性">安全性</h2><p>使用 EIGamal数字签名方案应注意以下安全问题:</p><ol><li><p>随机数k值的选取和保管</p><p>首先,k 值不能泄露。如果k值泄露,则容易计算$ x=[ h(m)-sk]r^{-1} \  mod \ (p-1$),签名者<br>的私钥泄露。</p><p>其次，随机数k不能重复使用。假设 k 用来对两个不同的消息签名，则r相同,即$(r,s_1)是m_1$的签名,$(r,s_2)是m_2$的签名。因为<br>$$<br>\begin{aligned}<br>s_1 \equiv [h(m_1)-xr]k^{-1} \ (mod \ (p-1))\newline<br>s_2 \equiv [ h(m_2)-xr]k^{-1} \ (mod \ (p-1))<br>\end{aligned}<br>$$<br>那么有<br>$$<br>(s_1-s_2)k \equiv [ h(m_1)-h(m_2)](mod \ (p-1))。<br>$$<br>又因为消息$m_1和m_2$不同,则$s_1-s_2 \neq 0 \ mod \ (p-1)$的概率很大,则<br>$$<br>k \equiv <a href="s_1-s_2"> h(m_1)-h(m_2)</a>^{-1}(mod \ (p-1))<br>$$</p><p>进而容易计算签名者的私钥x。<br>最后，签名者多次签名时所选取多个 k 之间无关联。例如，三个不同的签名所选取的随机数为$ k_1、k_2、k_3$,满足条件$k_3= k_1+k_2$，显然有$r_3= r_1  r_2$,则:</p><p>由$s \equiv [h(m)-xr]k^{-1} \ (mod \ (p-1))$可得$h(m) \equiv (ks+xr)(mod \ (p-1))$</p><p>因此有:<br>$$<br>\begin{aligned}<br>h(m_1)=(xr_1+ k_1s_1)(mod \ (p-1)) \newline<br>h(m_2)=(xr_2+ k_2s_2)(mod \ (p-1)) \newline<br>h(m_3)=(xr_3+ k_3s_3)(mod \ (p-1))<br>\end{aligned}<br>$$</p><p>对以上三式分别乘以$s_2s_3,s_1s_3,s_1s_2<br>$ 得:<br>$$<br>\begin{align}<br>h(m_1)s_2s_3=(xr_1s_2s_3+ k_1s_1s_2s_3)(mod \ (p-1)) \newline<br>h(m_2)s_1s_3=(xr_2s_1s_3+ k_2s_1s_2s_3)(mod \ (p-1)) \newline<br>h(m_3)s_1s_2=(xr_3s_1s_2+ k_3s_1s_2s_3)(mod \ (p-1))<br>\end{align}<br>$$<br>计算式(1)+式(2)-式(3)得<br>$$<br>x\equiv<a href="r_1s_2s_3+r_2s_1s_3-r_3s_1s_2">h(m_1)s_2s_3+ h(m_2)s_1s_3- h(m_3)s_1s_2</a>^{-1}(mod \ (p-1))<br>$$<br>就可以从中推出签名者的私钥x。<br>由此可见，随机数 k的选取和保管对私钥x的保密性起着重要的作用。此外，随机数的使用也保证了签名方案的<strong>不可重用性</strong>，这是因为在不同时刻选取的随机数不同，即使对同一消息进行签名，也会产生不同的结果,因而避免了 RSA 签名出现的签名重用问题。</p></li><li><p>Hash 函数的应用<br>如果未使用 Hash 函数则签名方案容易受到攻击。例如攻击者可以选取任一整数对(u,v),满足gcd(u,p-1)=1。计算$r=g^uy^v \ (mod \ p)，s \equiv -rv^{-1}(mod \ (p-1))和m \equiv su(mod \ p)$,则消息 m及其签名(r,s)可以被验证者接受,即攻击者成功进行存在性伪造。这是因为<br>$$<br>y^rr^s \equiv y^r(g^ug^v)^s \equiv y^{r + sv}·g^{us} \equiv y^{r+(-rv^{-1})}·g^{su} \equiv g^m(mod \ p)<br>$$<br>又因为$g^m \equiv g^{su}(mod \ p)$也就是说,签名(r,s)使等式$y^rr^s \equiv g^m(mod \ p)$成立。可见,使用 Hash函数能够有效地提高 EIGamal数字签名方案的安全性。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA算法 </tag>
            
            <tag> 数字签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++常用函数</title>
      <link href="/posts/16.html"/>
      <url>/posts/16.html</url>
      
        <content type="html"><![CDATA[<h2 id="String-类型和-int-类型转换">String 类型和 int 类型转换</h2><h3 id="1-String-int">1. String -&gt; int</h3><p>1.使用<strong>stoi()</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;12345&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="built_in">stoi</span>(s);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.使用<strong>atoi()</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str3[<span class="number">10</span>] = <span class="string">&quot;3245345&quot;</span>;</span><br><span class="line"><span class="comment">//数字简单，所以转数字一个参数</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a = <span class="built_in">atoi</span>(str3);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>3.使用 <strong>sscanf()</strong> 映射</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> str5[<span class="number">10</span>] = <span class="string">&quot;661234544&quot;</span>;</span><br><span class="line"><span class="built_in">sscanf</span>(str5, <span class="string">&quot;%d&quot;</span>, &amp;c); <span class="comment">//从左至右，字符串转数字</span></span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h3 id="2-int-String">2.int -&gt; String</h3><p>1.使用 c++里的 to_string()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> m = <span class="number">1234566700</span>;</span><br><span class="line">string str = <span class="built_in">to_string</span>(m);   <span class="comment">//系统提供数字转字符</span></span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>2.使用<strong>itoa()</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//字符串比较麻烦，所以转字符串三个参数，我是这么记得(手动滑稽）</span></span><br><span class="line"><span class="built_in">itoa</span>(n,str2,<span class="number">10</span>); <span class="comment">//第一个参数为整数，第二个为字符串(char*)，第三个为进制</span></span><br><span class="line">cout &lt;&lt; str2 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>3.使用 sprintf() 映射</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> b = <span class="number">1234560</span>;</span><br><span class="line"><span class="type">char</span> str4[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">sprintf</span>(str4, <span class="string">&quot;%d&quot;</span>, b); <span class="comment">//从右至左，把数转换为字符串</span></span><br><span class="line">cout &lt;&lt; str4 &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="判断字符类型">判断字符类型</h2><p>1、isalpha(x) 判断 x 是否为字母</p><p>2、isdigit(x) 判断 x 是否为数字</p><p>3、islower(x) 判断 x 是否为小写字母</p><p>4、isupper(x) 判断 x 是否为大写字母</p><p>5、isalnum(x) 判断 x 是否为字母或数字</p><p>6、ispunct(x) 判断 x 是否为标点符号</p><p>7、isspace(x) 判断 x 是否为空格</p><h2 id="排序函数-sort">排序函数 sort</h2><p>void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);</p><p>（1）第一个参数 first：是要排序的数组的起始地址。</p><p>（2）第二个参数 last：是结束的地址（最后一个数据的后一个数据的地址）</p><p>（3）第三个参数 comp 是排序的方法：可以是从升序也可是降序。如果第三个参数不写，则默认的排序方法是从小到大排序。</p><p>元素自身包含了比较关系，如 int，double 等基础类型，可以直接进行比较 greater<int>() 递减， less<int>() 递增</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> s[]=&#123;<span class="number">34</span>,<span class="number">56</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">45</span>&#125;;</span><br><span class="line"></span><br><span class="line">   vector&lt;<span class="type">int</span>&gt;<span class="built_in">arr</span>(s,s+<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(),arr.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br></pre></td></tr></table></figure><p>元素本身为 class 或者 struct，类内部需要重载&lt; 运算符，实现元素的比较；</p><h2 id="求平方根">求平方根</h2><p>头文件：#include &lt;math.h&gt;</p><p>sqrt() 用来求给定值的平方根，其原型为：</p><p>double sqrt(double x);</p><h2 id="判断数组长度">判断数组长度</h2><h3 id="1-string-类型">1.string 类型</h3><ol><li><p>size() <s>个人比较常用</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string a = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">cout &lt;&lt; a.<span class="built_in">size</span>(); <span class="comment">// a = 3</span></span><br></pre></td></tr></table></figure><p>2.length()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string b = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    cout &lt;&lt; b.<span class="built_in">length</span>(); <span class="comment">// b =3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-char-类型">2.char 类型</h3><ol><li><p>strlen</p><p>头文件是<cstring></p><p>strlen 是一个函数，它用来计算指定字符串 str 的长度，但不包括结束字符（即 null 字符）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> s1[<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line">s1=<span class="number">123456</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> la=<span class="built_in">strlen</span>(s1);<span class="comment">//a1=6</span></span><br></pre></td></tr></table></figure></li><li><p>sizeof</p><p>实际上是得到的值是 类型长度 * 长度</p><p>因为 char 的每个字符长 1，所以可以直接用</p><p>但比如 int 每个字符长 4，得到的值为 4 * 长度</p><p>会自动+1 是因为最后一个是 ‘\n’</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(str); <span class="comment">//12</span></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(a); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="求绝对值">求绝对值</h2><p>abs() 是用来求整型表达式的绝对值</p><p>fabs() 是用来求浮点型表达式的绝对值</p><h2 id="求次方">求次方</h2><h3 id="1-数值较小，不求幂">1. 数值较小，不求幂</h3><p>pow() 函数用来求 x 的 y 次幂（次方），其原型为：</p><p>double pow(double x, double y);</p><p>pow()用来计算以 x 为底的 y 次方值，然后将结果返回。设返回值为 ret，则 ret = xy。</p><h3 id="2-数值较大，求幂">2.数值较大，求幂</h3><p>快速幂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="给全数组赋值">给全数组赋值</h2><p>memset()函数原型是 extern void *memset(void *buffer, int c, int count)</p><p>buffer：为指针或是数组 c：是赋给 buffer 的值 count：是 buffer 的长度.</p><p>这个函数在 socket 中多用于清空数组.如:原型是 memset(buffer, 0, sizeof(buffer))</p><p>memset 用来对一段内存空间全部设置为某个字符，一般用在对定义的字符串进行初始化为‘ ’或‘/0’；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br></pre></td></tr></table></figure><h2 id="读取字符">读取字符</h2><h3 id="1-读取到某个字符为止">1.读取到某个字符为止</h3><p>getline</p><p>头文件：#include <string></p><p>istream&amp; getline ( istream &amp;is , string &amp;str , char delim );</p><p>其中，istream &amp;is 表示一个输入流，譬如 cin；</p><p>string&amp;str 表示把从输入流读入的字符串存放在这个字符串中（可以自己随便命名，str 什么的都可以）；</p><p>char delim 表示遇到这个字符停止读入，在不设置的情况下系统默认该字符为’\n’，也就是回车换行符（遇到回车停止读入）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string line;</span><br><span class="line"><span class="built_in">getline</span>(cin, line, <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">cout &lt;&lt; line;</span><br><span class="line"><span class="comment">// 当我输入的是 YYDS#NoneVector，输出的是YYDS</span></span><br></pre></td></tr></table></figure><h3 id="2-读取到某个条件为止">2.读取到某个条件为止</h3><p>循环输入，直到符合某种条件时结束输入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; n;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全排序">全排序</h2><p>STL 提供了两个用来计算排列组合关系的算法，分别是 next_permutation 和 prev_permutation。首先我们必须了解什么是“下一个”排列组合，什么是“前一个”排列组合。考虑三个字符所组成的序列{a,b,c}。</p><p>这个序列有六个可能的排列组合：abc，acb，bac，bca，cab，cba。这些排列组合根据 less-than 操作符做字典顺序(lexicographical)的排序。也就是说，abc 名列第一，因为每一个元素都小于其后的元素。acb 是次一个排列组合，因为它是固定了 a(序列内最小元素)之后所做的新组合。</p><p>同样道理，那些固定 b(序列中次小元素)而做的排列组合，在次序上将先于那些固定 c 而做的排列组合。以 bac 和 bca 为例，bac 在 bca 之前，因为次序 ac 小于序列 ca。面对 bca，我们可以说其前一个排列组合是 bac，而其后一个排列组合是 cab。序列 abc 没有“前一个”排列组合，cba 没有“后一个”排列组合。</p><h3 id="1-正序">1.正序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">4</span>]=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">next_permutation</span>(ans,ans+<span class="number">4</span>)); <span class="comment">//与sort同理</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>​</p><h3 id="2-逆序">2.逆序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">4</span>]=&#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)</span><br><span class="line">cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">prev_permutation</span>(ans,ans+<span class="number">4</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="大小写转换">大小写转换</h2><h3 id="1-toupper-tolower">1.toupper / tolower</h3><p>1、toupper(x) 如果 x 是小写字母，将其转换成大写字母</p><p>2、tolower(x) 如果 x 是大写字母，将其转换成小写字母</p><blockquote><p>​ <strong>非字母字符不做出处理</strong></p><p>返回的值是 int 类型</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string a = <span class="string">&quot;aBc&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i ++ ) a[i] = <span class="built_in">tolower</span>(a[i]);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;<span class="comment">// a = abc</span></span><br></pre></td></tr></table></figure><h3 id="2-transform">2.transform</h3><p>１、如果使用 string 类，可以使用#include <algorithm>里的如下方法进行大小写转换；</p><p>transform(str.begin(),str.end(),str.begin(),::tolower);</p><p>记得::tolower 前面有::,　而且是::tolower，不是::tolower()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line"><span class="comment">///转小写</span></span><br><span class="line"><span class="built_in">transform</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>(),str.<span class="built_in">begin</span>(),::tolower);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;转化为小写后为：&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"><span class="built_in">transform</span>(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>(),str.<span class="built_in">begin</span>(),::toupper);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;转化为大写后为：&quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="连接数组">连接数组</h2><h3 id="1-string">1.string</h3><p>直接相加</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string a = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">string b = <span class="string">&quot;bc&quot;</span>;</span><br><span class="line">string c = a + b; <span class="comment">// c = abbc</span></span><br></pre></td></tr></table></figure><h3 id="2-char">2. char</h3><p>strcat 函数</p><p>其一般形式为：strcat(字符数组 1，字符数组 2)</p><p>strcat 的作用是连接两个字符数组中的字符串，把字符串 2 接到字符串 1 的后面，结果放在字符数组 1 中，函数调用后得到一个函数值——字符数组 1 的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1［<span class="number">30</span>］=&#123;″People′s  Republic  of  ″&#125;;</span><br><span class="line"><span class="type">char</span> str2［］=&#123;″China″&#125;;</span><br><span class="line"><span class="built_in">printf</span>(″%s″，<span class="built_in">strcat</span>(str1，str2));</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//People′s Republic of China</span></span><br></pre></td></tr></table></figure><h2 id="复制数组">复制数组</h2><h3 id="1-char">1.char</h3><ol><li><p>strcpy 函数</p><p>其一般形式为：strcpy(字符数组 1，字符串 2)</p><p>strcpy 是“字符串复制函数”。</p><p>作用:是将字符串 2 复制到字符数组 1 中去。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">15</span>],str2[]=&#123;<span class="string">&quot;China2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(str1,<span class="string">&quot;china&quot;</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//china</span></span><br><span class="line"><span class="built_in">strcpy</span>(str1,str2);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//China2</span></span><br></pre></td></tr></table></figure><p>（1）字符数组 1 必须定义得足够大，以便容纳被复制的字符串。字符数组 1 的长度不应小于字符串 2 的长度。</p><p>（2）“字符数组 1”必须写成数组名形式(如 str1)，</p><p>“字符串 2”可以是字符数组名，也可以是一个字符串常量。如：strcpy(str1，″China″)；</p><p>（3）复制时连同字符串后面的′＼0′一起复制到字符数组 1 中。</p></li><li><p>strncpy 函数</p><p>例如:strncpy(str1，str2，2);作用是将 str2 中前面 2 个字符复制到 str1 中去，然后再加一个‘＼0’。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">15</span>],str2[]=&#123;<span class="string">&quot;China2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(str1,<span class="string">&quot;china&quot;</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//china</span></span><br><span class="line"><span class="built_in">strncpy</span>(str1,str2, <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;<span class="comment">//China 大写C</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="比较字符串">比较字符串</h2><p>strcmp 函数</p><p>其一般形式为：strcmp(字符串 1，字符串 2)</p><p>strcmp 的作用是比较字符串 1 和字符串 2。</p><p>例如：strcmp(str1，str2);</p><p>​ strcmp(″China″，″Korea″);</p><p>​ strcmp(str1，″Beijing″);</p><p>比较的结果由函数值带回</p><p>(1) 如果字符串 1=字符串 2，函数值为 0。</p><p>(2) 如果字符串 1&gt;字符串 2，函数值为一正整数。</p><p>(3) 如果字符串 1&lt;字符串 2，函数值为一负整数。</p>]]></content>
      
      
      <categories>
          
          <category> 随机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown及Latex常用语法的补充</title>
      <link href="/posts/15.html"/>
      <url>/posts/15.html</url>
      
        <content type="html"><![CDATA[<h2 id="括号">括号</h2><h3 id="1-1-各种括号">1.1 各种括号</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$\langle表达式\rangle$$    ⟨表达式⟩⟨表达式⟩</span><br><span class="line"></span><br><span class="line">$$\lceil表达式\rceil$$           ⌈表达式⌉⌈表达式⌉</span><br><span class="line"></span><br><span class="line">$$\lfloor表达式\rfloor$$      ⌊表达式⌋⌊表达式⌋</span><br><span class="line"></span><br><span class="line">$$\lbrace表达式\rbrace$$   &#123;表达式&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$\langle表达式\rangle$$</p><p>$$\lceil表达式\rceil$$</p><p>$$\lfloor表达式\rfloor$$</p><p>$$\lbrace表达式\rbrace$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-2-单边括号">1.2 单边括号</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">ver<span class="emphasis">_&#123;k1&#125;(m, s) =</span></span><br><span class="line"><span class="emphasis">\begin&#123;cases&#125;</span></span><br><span class="line"><span class="emphasis">True  &amp; 当 s = sign_</span>&#123;k<span class="emphasis">_2&#125; \newline</span></span><br><span class="line"><span class="emphasis">False &amp; 当s \neq sign_</span>&#123;k<span class="emphasis">_2&#125;</span></span><br><span class="line"><span class="emphasis">\end&#123;cases&#125;</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>ver_{k1}(m, s) =<br>\begin{cases}<br>True  &amp; 当 s = sign_{k_2} \newline<br>False &amp; 当s \neq sign_{k_2}<br>\end{cases}</p><p>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="公式左对齐">公式左对齐</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c  \newline</span><br><span class="line">  &amp;= d + e + f \newline</span><br><span class="line">b &amp;= c + d \tag&#123;1.1&#125; \newline</span><br><span class="line">  &amp;= g + h +i \tag&#123;1.2&#125;</span><br><span class="line">\end&#123;aligned&#125;</span><br><span class="line"></span><br><span class="line">$$</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\begin{align}<br>a &amp;= b + c  \newline<br>&amp;= d + e + f \newline<br>b &amp;= c + d \tag{1.1} \newline<br>&amp;= g + h +i \tag{1.2}<br>\end{align}<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 随机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字签名之RSA签名体制</title>
      <link href="/posts/13.html"/>
      <url>/posts/13.html</url>
      
        <content type="html"><![CDATA[<h2 id="数字签名原理">数字签名原理</h2><p>一个完整的数字签名方案由三部分组成:密钥生成算法、签名算法和验证算法。密钥生成算法是根据系统参数为签名者生成公钥和私钥;签名算法是产生数字签名的某种算法,而验证算法是检验一个数字签名是否有效(即是否由指定实体生成)的某种算法。如无特殊说明,下文继续用 A 代表签名者,B 代表验证者。</p><p>下面给出数字签名的形式化定义:</p><p>(1)密钥生成算法</p><p>系统初始化产生签名方案的基本参数(M,S,K,Sign,Ver),其中 M 为消息空间,S 为签名空间，K 为密钥空间，包含私钥和公钥,Sign 为签名算法集合,Ver 为签名验证算法集合。用户 A 执行密钥生成算法生成自己的公私密钥$(k_1,k_2)$。</p><p>(2)签名算法</p><p>对任意的消息 $m \in M$,有$s=sign_{k_2}(m)$,且$s \in S$,那么 s 为消息的签名,将签名消息组(m,s)发送给签名验证者。</p><p>(3)验证算法</p><p>对于上述的$k_1 \in K$,有相应的签名验证算法:$ver_{k_1}:M \times S \rightarrow \lbrace True,False \rbrace,ver_{k_1} \in Ver$,且</p><p>$$<br>ver_{k1}(m, s) =<br>\begin{cases}<br>True  &amp; 当 s = sign_{k_2} \newline<br>False &amp; 当s \neq sign_{k_2}<br>\end{cases}<br>$$</p><p>签名验证者收到(m,s)后,计算 $ver_{k_1}(m,s)$,若 $ver_{k_1}(m,s)=True$,则签名有效;否则签名无效。</p><p>对于每一个$k \in K$,签名函数$ sign*{k_2}$,和签名验证函数 $ver*{k<em>1}$, 是容易计算的。而验证函数 $ver</em>{k<em>1}$是公开的,同时还要求对任意的消息 m,在未知$k_2$条件下从集合 S 中选取 s 使得 $ver</em>{k_1}(m,s)=True$ 是非常困难的,也就是说,攻击者对消息 m 产生有效的签名 s 是不可能的。</p><p>根据定义,在进行私钥签名前,先进行消息关键信息提取。</p><p>如图 8-1 所示,发送方 A 将消息用 Hash 算法产生一个消息摘要(Message Digest),这个消息摘要有两个重要特性:<strong>抗碰撞性</strong>和<strong>摘要长度</strong>固定,使得任何消息产生的签名值长度是一样的。发送方 A 产生消息摘要后,用自己的私钥对摘要进行加密,这个加密后的消息摘要就是数字签名，随后发送方 A 将消息与签名发给接收方 B。B 接收到消息及其签名后,用发送方 A 的公钥解密这个签名,获得由发送方 A 生成的消息摘要,接着用发送方 A 所用 Hash 算法重新生成所获得消息的摘要,然后比对这两个摘要。如果相同,说明这个签名是发送方 A 针对这个消息的有效签名;如果不相同,则签名无效。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/18/169037_8532583f85-1.png" alt="1.png"></p><p>依据上述数字签名的基本原理,人们设计出了众多不同种类的数字签名方案,下面将介绍常用数字签名的实现方案。</p><h2 id="基于-RSA-的签名方案">基于 RSA 的签名方案</h2><p>RSA 签名方案是目前使用较多的一个签名方案,它的安全性是基于大整数因子分解的困难性。RSA 签名方案的密钥生成算法与 RSA 加密方案完全相同。关于 RSA 加密算法我也写了一篇 👉[点击直达](<a href="https://www.nonevector.top/posts/9.html">公钥密码体制之 RSA 公钥加密体制 | NoneVector</a>)</p><ol><li><p>密钥生成算法</p><p>首先选取两个满足安全要求的大素数 p 和 q,计算 n=pq,及其欧拉函数 $\varphi(N)=(p-1)(q-1)$。然后随机选取整数$ e(1&lt;e &lt;\varphi(N)$,满足 $gcd(e，\varphi(N))$=1。采用如下方式计算 $d,d \equiv e^{-1}(mod \varphi(N))$,则签名者 A 的公为(n,e),私为 d。p 和 q 是秘密参数,需要保密。如不需要保存,计算出 d 后可销毁 p、q。</p></li><li><p>签名算法<br>设待签名的消息为 $m \in Z_n$.,利用一个安全的 Hash 函数 h 来产生消息摘要 h(m),然后签名者 A 用下面算法计算签名$s \equiv h(m)^d(mod n)$,则 s 是消息 m 的签名。(s,m)发送给 B。</p></li><li><p>验证算法<br>签名接收者 B 收到消息 m 和签名 s 后,首先,利用上述 Hash 函数 h 计算消息摘要 h(m);<br>然后,检验等式$ h(m)mod n \equiv s^e(mod n)$是否成立。若成立,则签名有效;否则,签名无效。</p></li><li><p>正确性<br>证明如果所有算法按步骤执行,则接收者 B 输出签名有效。</p><p>因为</p><p>$$<br>s \equiv h(m)^d(mod \ n),de \equiv 1(mod \ \varphi(n)), \varphi(n) = (p - 1)(q - 1)<br>$$</p><p>所以</p><p>$$<br>\begin{align}<br>s^e \ mod \ n &amp;= h(m)^{ed} \ mod \ n = h(m)^{k \varphi(n) + 1} \ mod \ n = h(m)h(m)^{k \varphi(n) } \ mod \ n \newline<br>&amp;= h(m)[h(m)^{\varphi(n)}]^k \ mod \ n = h(m) \ mod \ n(其中k为整数)<br>\end{align}<br>$$</p><p>注意,如果 h(m)与 n 不互素，上面等式也成立</p></li></ol><h2 id="案例">案例</h2><p>(1)密钥生成算法<br>假设 A 选取 p=13,q=11,e=13,则有 n=pq=143,$\varphi (n)=(p-1)(q-1)=12 \times 10=120$。求解 ed=13d=1(mod 120)得 d=37。因此 A 的公钥为(n=143,e=13);私钥为 d=37。</p><p>(2) 签名算法<br>假定消息 m 的 Hash 值 h(m)=16,则计算 m 签名$s=(m) ^ d \ mod \ n=16^{37} \ mod \ 143= 3$。</p><p>(3)验证算法<br>接收者 B 收到签名后,计算 $s^e  \ mod \ n=3^{13} \  mod \ 143=16,h(m)=16 \equiv s^e \equiv 16(mod \ 143)$成立,因此,B 验证此签名有效。<br>注意，本例旨在说明签名方案的实现过程,为计算方便所选参数均较为简单。在目前实际应用中推荐素数长度至少为 1024 比特。</p><h2 id="C-代码">C++ 代码</h2><blockquote><p>因为数字签名主要的作用是验证而不是加密和解密，所以我这里用的参数比较简单，并且 hash 函数我随便写的，如果需要了解 hash 函数可以去看我写的<a href="https://www.nonevector.top/posts/11.html">MD5 算法</a>和<a href="https://www.nonevector.top/posts/12.html">SHA1 算法</a>.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">string clear_text; <span class="comment">//明文</span></span><br><span class="line">string secret_text; <span class="comment">//密文</span></span><br><span class="line"></span><br><span class="line">LL p, q;<span class="comment">//两个安全大素数</span></span><br><span class="line">LL e, n;<span class="comment">//公钥</span></span><br><span class="line">LL private_key; <span class="comment">//私钥</span></span><br><span class="line">LL Euler;<span class="comment">// 欧拉函数</span></span><br><span class="line">LL sign; <span class="comment">// 数字签名</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res; <span class="comment">//选择加密还是解密</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(LL a, LL k, LL p)</span> <span class="comment">//快速幂求余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> <span class="comment">// 欧几里得扩展算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL d, x1, y1;</span><br><span class="line">    d = <span class="built_in">exgcd</span>(b, a % b, x1, y1);</span><br><span class="line">    x = y1, y = x1 - a / b * y1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Hash</span><span class="params">(string s)</span> <span class="comment">// 将字符串转为string类型的数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++) sum += s[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">to_string</span>(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string s)</span> <span class="comment">// 签名</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ha = <span class="built_in">Hash</span>(s); <span class="comment">// 随便写的hash函数</span></span><br><span class="line">    LL num = <span class="built_in">stoi</span>(ha);</span><br><span class="line">    LL k, d;</span><br><span class="line">    n = p * q;</span><br><span class="line">    Euler = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exgcd</span>(e, Euler, d, k); <span class="comment">// 利用欧几里得扩展算法获取私钥d</span></span><br><span class="line">    private_key = d;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;公钥（e,n）为：(&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl &lt;&lt;</span><br><span class="line">    <span class="string">&quot;私钥d为：(&quot;</span> &lt;&lt; private_key &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    sign = <span class="built_in">qmi</span>(num, d, n);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最终发送给B的是明文hash后的值的签名s和明文m为(&quot;</span> &lt;&lt; sign &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; s &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(LL s, string m)</span> <span class="comment">//解密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string ha = <span class="built_in">Hash</span>(m); <span class="comment">// 随便写的hash函数</span></span><br><span class="line">    LL num = <span class="built_in">stoi</span>(ha);</span><br><span class="line">    n = p * q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(num % n == <span class="built_in">qmi</span>(s, e, n))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;经过验证后签名有效&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;经过验证后签名无效&quot;</span> &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给出两个大素数p，q和公钥e&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; q &gt;&gt; e;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入1选择签名，或者输入2选择验证&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; clear_text;</span><br><span class="line">        <span class="built_in">encrypt</span>(clear_text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入签名和明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; sign &gt;&gt; clear_text;</span><br><span class="line">        <span class="built_in">encode</span>(sign, clear_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//签名</span></span><br><span class="line">请给出两个大素数p，q和公钥e</span><br><span class="line"><span class="number">11</span> <span class="number">13</span> <span class="number">13</span></span><br><span class="line">请输入<span class="number">1</span>选择签名，或者输入<span class="number">2</span>选择验证</span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入明文</span><br><span class="line">a</span><br><span class="line">公钥（e,n）为：(<span class="number">13</span>,<span class="number">143</span>)</span><br><span class="line">私钥d为：(<span class="number">37</span>)</span><br><span class="line">最终发送给B的是明文hash后的值的签名s和明文m为(<span class="number">136</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证（正确）</span></span><br><span class="line">请给出两个大素数p，q和公钥e</span><br><span class="line"><span class="number">11</span> <span class="number">13</span> <span class="number">13</span></span><br><span class="line">请输入<span class="number">1</span>选择签名，或者输入<span class="number">2</span>选择验证</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入签名和明文</span><br><span class="line"><span class="number">136</span> a</span><br><span class="line">经过验证后签名有效</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证（错误）</span></span><br><span class="line">请给出两个大素数p，q和公钥e</span><br><span class="line"><span class="number">11</span> <span class="number">13</span> <span class="number">13</span></span><br><span class="line">请输入<span class="number">1</span>选择签名，或者输入<span class="number">2</span>选择验证</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入签名和明文</span><br><span class="line"><span class="number">1</span> a</span><br><span class="line">经过验证后签名无效</span><br></pre></td></tr></table></figure><h2 id="安全性">安全性</h2><p>从上述 RSA 签名方案中可以看到在签名时使用了 Hash 函数，这个函数的使用较之单纯对消息本身进行签名具有更好的抗攻击性。如果不使用 Hash 函数,则对消息 mm 的签名分别为 S 三 m(mod n),三 m%(mod n)。假设攻击者获得了这两个签名，就可以伪造消息 mim2 的有效签名 S1S2。这是因为,RSA 方案的这种乘特性,有时也称为同态特性,(ss)=sis 三 mm(mod n)(证明参照前面方案正确性的证明)。使用安全的 Hash 函数就可以避免类似这样的攻击，从而提高签名体制的安全性。另外,对于大消息而言,将其映射到固定长度再签名，大大提高其签名和验证的效率。</p><p>此外，RSA 签名方案还存在签名可重用的问题，即对同一消息在不同时刻签名是相同的这个问题可以通过在每次签名中引人不同随机数来解决,在后面提到的数字签名方案中对此解决方法均有所体现。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA算法 </tag>
            
            <tag> 数字签名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash算法之SHA1算法</title>
      <link href="/posts/12.html"/>
      <url>/posts/12.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hash-函数结构">Hash 函数结构</h2><p><code>Hash</code> 函数的一般结构如图<code>6-1</code>所示,称为<strong>Hash 函数迭代结构</strong>，也称为<strong>MD 结构</strong>。它由 Merkle 和 Damgard 分别独立提出,包括 MD5,SHA1 等目前所广泛使用的大多数 Hash 函数都采用这种结构。MD 结构将输人消息分为<code>L</code>个固定长度的分组,每一分组长为<code>b</code>位,最后一个分组包含输入消息的总长度,若最后一个分组不足<code>b</code>位时,需要将其填充为<code>b</code>位。由于输人包含消息的长度,所以攻击者必须找出具有相同散列值且长度相等的两条消息,或者找出两条长度不等但加入消息长度后散列值相同的消息,从而增加了攻击的难度。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_931668de80-1.png" alt="1.png"></p><p>迭代结构包含一个压缩函数<code>f</code>。压缩函数<code>f</code>有两个输入:一个是前一次迭代的<code>n</code> 位输出,称为链接变量;另一个是消息的<code>b</code>位分组，并产生一个<code> n</code> 位的输出。因为一般来说消息分组长度<code>b</code>大于输出长度<code>n</code>,因此称之为压缩函数。第一次迭代输入的链接变量又称为初值变量,由具体算法指定,最后一次迭代的输出即为散列值。</p><h2 id="SHA1-算法">SHA1 算法</h2><p>1993 年美国国家标准技术研究所 NIST 公布了安全散列算法 SHA0(Secure Hash Algrithm)标准,1995 年 4 月 17 日公布的修改版本称为 SHA1,SHA1 在设计方面大程度上是仿 MD5 的但它对“任意”长度的消息生成 160 比特的消息摘要(MD5 仅仅生成 128 位的),因此抗穷举搜索能力更强。它有 5 个参与运算的 32 位寄存器字，消息分组和填充方式与 MD5 相同,主循环也同样是 4 轮,但每轮进行 20 次操作,包含非线性运算、移位和加法运算非线性函数、加法常数和循环左移操作的设计与 MD5 有一些区别。</p><blockquote><p>说实话和 MD5 大差不差，有兴趣可以先去看我之前写的<a href="https://www.nonevector.top/posts/11.html">MD5 算法</a>,看完 MD5 再看 SHA1 应该就没什么问题</p></blockquote><h2 id="1-SHA1-原理">1.SHA1 原理</h2><p>SHA1 算法的输人是最大长度小于$ 2^{64}$比特的消息,输人消息以<code>512 </code>比特的分组为单位处理,输出是 <code>160</code>比特的消息摘要。图 6-5 显示了处理消息输出消息摘要的整个过程，该过程包含下述步骤。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_1fd5d26181-1.png" alt="1.png"></p><h3 id="1-附加填充位">1.附加填充位</h3><p>在长度为 <code>K bits</code> 的原始消息数据尾部填充长度为<code>P bits</code>的标识<code>100…0</code>，$1 \leq P  \leq 512 $(即至少要填充1个bit)，使得填充后的消息位数为：$K + P \equiv 448 (mod 512).$然后在消息后附加64 比特的无符号整数，其值为<strong>原始消息的长度</strong>。产生长度为 512 整数倍的消息串并把消息分成长为 512位的消息块$ M_1,M_2,\ldots ,M_N$,因此填充后消息的长度为 512×N 比特。</p><blockquote><p>注意到当 输入字长恰好是 448bit 时，需要填充字长 P= 512 而不是 0</p></blockquote><h3 id="2-初始化链接变量">2.初始化链接变量</h3><p>和 MD5 类似,将 5 个 32 比特的固定数赋给 5 个 32 比特的寄存器 ABCD 和 E 作为第一次迭代的链接变量输人:</p><p>$A=0x67452301,B=0xEFCDAB89,C=0x98BADCFE,D=0x10325476,E=0xC3D2E1F0$</p><blockquote><p>每一个变量给出的数值是高字节存于内存低地址，低字节存于内存高地址，即大端字节序</p><p>注意一个存储单元可以存储两位，当然也是一个字</p></blockquote><table><thead><tr><th><strong>字节序</strong></th><th>存储内容</th></tr></thead><tbody><tr><td>小端序</td><td>Buffer[4] = {0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210};</td></tr><tr><td>大端序</td><td>Buffer[4] = {0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476};</td></tr></tbody></table><h3 id="3-压缩函数">3.压缩函数</h3><p>以 512 位的分组为单位处理消息 ,4 轮循环的模块,每轮循环由 20 个步骤组成,其逻辑如上图图 6-5 所示。每轮循环使用的步函数相同,不同轮的步函数包含不同的非线性函数(Ch、Parity、Maj、Parity)。步函数的输人除了寄存器 A、B、C、D 和 E 外,还有额外常数 $K_r(1 \leq r \leq 4)$和子消息分组(消息字)$W_t(0 \leq t \leq 79)$,t 为选代的步数，r 为轮数。</p><h3 id="4-循环哈希">4. 循环哈希</h3><p>每轮循环均以当前正在处理的 512 比特消息分组$Y_q$和 160 比特的缓存值 ABCD 和 E 为输人,然后循环更新缓存的内容。最后,寄存器 A、B、C、D、E 的当前值模 $2^{32}$加上此次迭代的输人$CV_q$，产生$CV_{q+1}$。</p><h3 id="5-结果">5.结果</h3><p>得到最终散列值:全部 512 比特数据块处理完毕后,最后输出的就是 160 比特的消息摘要。</p><h2 id="2-SHA1-的步函数">2.SHA1 的步函数</h2><blockquote><p>SHA1 精髓所在，即每一轮 20 个步骤中每一个步骤都在干什么</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_11c0ca1c81-2.png" alt="2.png"></p><p>SHA1 每运行一次步函数，A、B、C、D 的值顺序赋值给(或经过一个简单左循环移位后)B、C、D、E 寄存器。同时，A、B、C、D、E 的输人值与常数和子消息块经过<strong>步函数</strong>运算后赋值给 A。</p><ul><li><p>$A=(ROTL^5(A)+f_1(B,C,D)+E+W_t+K_r)mod2^{23}$</p></li><li><p>$B=A$</p></li><li><p>$C=ROTL^{30}(B)mod 2^{32}$</p></li><li><p>$D=C$</p></li><li><p>$E=D$</p></li></ul><p>其中,t 是步数，$0\leq t \leq 79$,(因为一共 20 * 4 = 80 步)，r 为轮数,$1 \leq r \leq 4$。</p><p>图中<strong>非线性函数</strong>输人 3 个 32 比特的变量 B、C 和 D 进行操作,产生一个 32 位的输出，其定义如下:<br><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_12bfa8c681-3.png" alt="3.png"></p><p>图 6-6 中$K_r$是循环中使用的额外常数,其值定义如下。</p><p>$K_r$的 4 个取值分别为 2、3、5 和 10 的平方根，然后再乘以$2^{30} = 1073741824$,最后取乘积的整数部分。以计算 $K_4$为例，</p><p>$\sqrt{10} \approx 3.162 277 660 168 379 331 998 893 544 432 7$,</p><p>$\sqrt{10} \times 2^{32}= \sqrt{10} \times 1073 741 824 \approx 3 395469782.823647 771 064 393 520 381$,</p><p>最后取求积的整数部分得$(3395469782)<em>{10}=(CA62C1D6)</em>{16}$。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_1d5192cb81-4.png" alt="4.png"></p><p>$ROTL^n(x)$表示对 32 比特的变量 x 循环左 n 比特。</p><p>32 比特的消息字 $W_t$是从 512 比特的消息分组中导出的,其生成过程如图 6-7 所示</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_9394b5ab81-5.png" alt="5.png"></p><p>从图 6-7 可以看出,在前 16 步处理中 $W_t$值等于消息分组中的相应字,而余下的 64 步操作中,其值是由前面的 4 个值相互异或后再循环移位得到。上述操作增加了消息比特的扩散，故对于相同长度的消息找出另一个杂凑值相同的消息会非常困难。</p><h2 id="3-样例">3. 样例</h2><p>用 SHA1 处理 ASCII 码序列“iscbupt”</p><p>解：首先将消息进行填充,填充后消息分组赋值给 16 个 32 比特的字:</p><p>$W_0=0x69736362,W_1=0x75707480,W_2=W_3=W_4=W_5=W_6=0x00000000$</p><p>$W_7=W_8=W_9=W_{10}=W_{11}=W_{12}=W_{13}=W_{14}=0x00000000,W_{15}=0x00000038$</p><blockquote><p>iscbupt 的长度为 7，共 56(&lt;64)位 bit，十六进制为$(38)_{16}$</p></blockquote><p>初始散列值为:<br>$A=0x67452301,B=0XEFCDAB89C=0x98BADCFE,D=0x10325476,E0xC3D2E1F0$</p><p>经过 80 步循环后这 5 个 32 比特的寄存器 A、B、C、D 和 E 的值如表 6-3 所示。</p><blockquote><p>用手机截的图，认为不是很重要，懒得手打了，如果要验证的话前几组数据应该就够了</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_fe12881381-6.png" alt="6.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_4a4b699281-7.png" alt="7.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_4ce99f9481-8.png" alt="8.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_aea63ff781-9.png" alt="9.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/12/169037_bbb7488181-10.png" alt="10.png"></p><p>分组处理完毕后,5 个寄存器的值为:</p><p>$A=(0x67452301+0xFF08A6EF)mod 2^{32}=0x664DC9F0$</p><p>$B=(0xEFCDAB89+0x280E6F65)mod 2^{32}=0x17DC1AEE$</p><p>$C(0x98BADCFE+0xB18889BE)mod 2^{32}=0x4A4366BC$</p><p>$D=(0x10325476+0xEB52BD39)mod 2^{32} = 0xFB8511AF$</p><p>$E=(0xC3D2E1F0+0x04CCB240)mod2^{32}=0xC89F9430$</p><p>由此可得:</p><p>SHA1(“iscbupt”)=“664DC9F017DC1AEE4A4366BCFB8511AFC89F9430”</p><h2 id="4-C-代码">4.C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; X;<span class="comment">//8*64=512，每个下标存放8位</span></span><br><span class="line"><span class="type">int</span> W[<span class="number">80</span>];<span class="comment">//32位为一组</span></span><br><span class="line"><span class="type">int</span> A, B, C, D, E;</span><br><span class="line"><span class="type">int</span> A1, B1, C1, D1, E1;<span class="comment">//缓冲区寄存器,产生最后结果</span></span><br><span class="line"><span class="type">int</span> Turn;<span class="comment">//加密分组数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printX</span><span class="params">()</span> </span>&#123;<span class="comment">//输出填充后的文本</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; X.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, X[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">16</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">S</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> x, <span class="type">int</span> n)</span> </span>&#123;<span class="comment">//循环左移</span></span><br><span class="line">    <span class="keyword">return</span> x &gt;&gt; (<span class="number">32</span> - n) | (x &lt;&lt; n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">append</span><span class="params">(string m)</span> </span>&#123;<span class="comment">//文本的填充处理</span></span><br><span class="line">    Turn = (m.<span class="built_in">size</span>() + <span class="number">8</span>) / <span class="number">64</span> + <span class="number">1</span>;</span><br><span class="line">    X.<span class="built_in">resize</span>(Turn * <span class="number">64</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; m.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        X[i] = m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    X[i++] = <span class="number">0x80</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; X.<span class="built_in">size</span>() - <span class="number">8</span>) &#123;</span><br><span class="line">        X[i] = <span class="number">0</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> a = m.<span class="built_in">size</span>() * <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = X.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= X.<span class="built_in">size</span>() - <span class="number">8</span>; i--) &#123;</span><br><span class="line">        X[i] = a % <span class="number">256</span>;</span><br><span class="line">        a /= <span class="number">256</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setW</span><span class="params">(vector&lt;<span class="type">int</span>&gt; m, <span class="type">int</span> n)</span> </span>&#123;<span class="comment">//W数组的生成</span></span><br><span class="line">    n *= <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        W[i] = (m[n + <span class="number">4</span> * i] &lt;&lt; <span class="number">24</span>) + (m[n + <span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">16</span>)</span><br><span class="line">            + (m[n + <span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + m[n + <span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">16</span>; i &lt; <span class="number">80</span>; i++) &#123;</span><br><span class="line">        W[i] = <span class="built_in">S</span>(W[i - <span class="number">16</span>] ^ W[i - <span class="number">14</span>] ^ W[i - <span class="number">8</span>] ^ W[i - <span class="number">3</span>], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ft</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;<span class="comment">//ft(B,C,D)函数</span></span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">return</span> (B &amp; C) | ((~B) &amp; D);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">40</span>)</span><br><span class="line">        <span class="keyword">return</span> B ^ C ^ D;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">60</span>)</span><br><span class="line">        <span class="built_in">return</span> (B &amp; C) | (B &amp; D) | (C &amp; D);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> B ^ C ^ D;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Kt</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;<span class="comment">//常量K</span></span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x5a827999</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">40</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x6ed9eba1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">60</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x8f1bbcdc</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0xca62c1d6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sha1</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">    A1 = A = <span class="number">0x67452301</span>;</span><br><span class="line">    B1 = B = <span class="number">0xefcdab89</span>;</span><br><span class="line">    C1 = C = <span class="number">0x98badcfe</span>;</span><br><span class="line">    D1 = D = <span class="number">0x10325476</span>;</span><br><span class="line">    E1 = E = <span class="number">0xc3d2e1f0</span>;</span><br><span class="line">    <span class="built_in">append</span>(text);</span><br><span class="line">    <span class="comment">//printX();</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Turn; i++) &#123;</span><br><span class="line">        <span class="built_in">setW</span>(X, i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; <span class="number">80</span>; t++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = E + <span class="built_in">ft</span>(t) + <span class="built_in">S</span>(A, <span class="number">5</span>) + W[t] + <span class="built_in">Kt</span>(t);</span><br><span class="line">            E = D;</span><br><span class="line">            D = C;</span><br><span class="line">            C = <span class="built_in">S</span>(B, <span class="number">30</span>);</span><br><span class="line">            B = A;</span><br><span class="line">            A = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        A1 = A = A + A1;</span><br><span class="line">        B1 = B = B + B1;</span><br><span class="line">        C1 = C = C + C1;</span><br><span class="line">        D1 = D = D + D1;</span><br><span class="line">        E1 = E = E + E1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%08x%08x%08x%08x%08x\n\n&quot;</span>, A1, B1, C1, D1, E1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------- SHA1 -----------------\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入要加密的明文. (如果要终止程序请按CTRL + C)\n&quot;</span>;</span><br><span class="line">    string text;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; text;</span><br><span class="line">        <span class="built_in">sha1</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">----------------- SHA1 -----------------</span><br><span class="line">请输入要加密的明文. (如果要终止程序请按CTRL + C)</span><br><span class="line">iscbuty</span><br><span class="line">c479655fcf8bb57268768a25dd4ad608bc3e36aa</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hash算法 </tag>
            
            <tag> SHA1算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hash算法之MD5算法</title>
      <link href="/posts/11.html"/>
      <url>/posts/11.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hash-函数结构">Hash 函数结构</h2><p><code>Hash</code> 函数的一般结构如图<code>6-1</code>所示,称为<strong>Hash 函数迭代结构</strong>，也称为<strong>MD 结构</strong>。它由 Merkle 和 Damgard 分别独立提出,包括 MD5,SHA1 等目前所广泛使用的大多数 Hash 函数都采用这种结构。MD 结构将输人消息分为<code>L</code>个固定长度的分组,每一分组长为<code>b</code>位,最后一个分组包含输入消息的总长度,若最后一个分组不足<code>b</code>位时,需要将其填充为<code>b</code>位。由于输人包含消息的长度,所以攻击者必须找出具有相同散列值且长度相等的两条消息,或者找出两条长度不等但加入消息长度后散列值相同的消息,从而增加了攻击的难度。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_931668de80-1.png" alt="1.png"></p><p>迭代结构包含一个压缩函数<code>f</code>。压缩函数<code>f</code>有两个输入:一个是前一次迭代的<code>n</code> 位输出,称为链接变量;另一个是消息的<code>b</code>位分组，并产生一个<code> n</code> 位的输出。因为一般来说消息分组长度<code>b</code>大于输出长度<code>n</code>,因此称之为压缩函数。第一次迭代输入的链接变量又称为初值变量,由具体算法指定,最后一次迭代的输出即为散列值。</p><h2 id="MD5-算法">MD5 算法</h2><p><code>MD5</code> 算法是美国麻省理工学院著名密码学家 Rivest 设计的,MD(Message Digest)是消息摘要的意思。Rivest 于 1992 年向 IETF 提交的 RFC1321 中对 <code>MD5</code>作了详尽的述 MD5 是在<code>MD2</code>、<code>MD3</code>和<code>MD4 </code>基础上发展而来的,尤其在<code> MD4</code> 上增加了 <code>Safety-Belts</code>,所以<code>MD5</code> 又被称为是“系有安全带的 MD4”,它虽然比<code>MD4</code> 要稍慢一些,但更为安全。</p><h2 id="1-MD5-算法描述">1. MD5 算法描述</h2><p><code>MD5</code>算法的输人是长度小于$2^{64}$比特的消息,输出为 <code>128</code> 比特的消息摘要。输人消息以<code>512</code> 比特的分组为单位处理,其流程如下:</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_502e74a680-2.png" alt="2.png"></p><p><code>L</code>为消息的长度;<code>N</code> 为消息扩充后分组个数:$Y_i(0 \leq i \leq N-1)$代表一个分组;<code>IV</code>表示初始链接变量,<code>A、B、C、D</code>是<code>4</code>个<code>32</code>位的寄存器;$CV_i$是链接变量,即是第<code>i</code>个分组处理单元的输出，也是第 <code>i+1</code> 个分组处理单元的输人,最后单元的输出$ CV_N$ 即是消息的散列值。</p><p>主要流程概括起来便是：消息预处理, 初始化缓冲区, 循环哈希，下面会依次介绍</p><h2 id="2-MD5-具体流程">2.MD5 具体流程</h2><h3 id="1-消息预处理">1. 消息预处理</h3><ol><li><p>附加补充位</p><p>在长度为 <code>K bits</code> 的原始消息数据尾部填充长度为<code>P bits</code>的标识<code>100…0</code>，$1 \leq P  \leq 512 $(即至少要填充1个bit)，使得填充后的消息位数为：$K + P \equiv 448 (mod 512).$</p><blockquote><p>注意到当 $K \equiv 448 (mod 512) $时，需要 P= 512.</p></blockquote></li><li><p>附加信息</p><p>原始消息<strong>长度</strong>（注意是长度）以 64 比特表示附加在填充结果的后面，最后得到一个长度位数为 $K + P + 64 \equiv 0 (mod 512) $的消息。</p><p>原因: 增加攻击者伪造明文的难度. 伪造信息的长度必需要与原文长度相等(其实是同余)</p><p>将消息长度 $Length(M)(mod2^{64})$ 以<strong>小端序</strong>的形式附加到第一步预留的 64-bit 空间中.</p><blockquote><p>后面会讲小端序和大端序</p></blockquote></li></ol><p>按以上步骤处理完消息之后, 将最后的得到的消息结果分割成 L 个 512-bit 分组：$Y_0, Y_1, \ldots ,Y_{L - 1}$</p><p>分组结果按<code> 32-bit</code> 一组, 被分为 16 组字(Word) (512 = 32 * 16)，$M_0[0],M_0[1],\ldots,M_0[15],M_1[0]\ldots, M_{L - 1}[16]$,在本文中被记作 $M_i[j]$,其中<code>j</code>表示字的组数.</p><h3 id="2-初始化缓冲区">2.初始化缓冲区</h3><p>算法使用 <code>128-bit</code> 的缓冲区存放中间结果和最终哈希值, <code>128-bit </code>可以看做 <code>4 </code>组<code>32-bit</code>字所占的比特位(128 = 4 * 32)</p><p>被记作 $Buffer_A,Buffer_B,Buffer_C,Buffer_D$. 每个缓冲区都以<strong>小端序</strong>的方式存储数据. 将 4 块 Buffer 组合起来记为链接向量$ CV_i$</p><p>$$<br>CV_i=CV_{i−1}<br>$$</p><p>$CV_0$ 被规定为常量, 如下表格所示.(在最上面的流程图里面现实的$IV$)，即 A、B、C、D 的值分别为 0x67452301，0xEFCDAB89，0x98BADCFE，0x10325476）</p><blockquote><p>每一个变量给出的数值是高字节存于内存低地址，低字节存于内存高地址，即大端字节序</p><p>注意一个存储单元可以存储两位，当然也是一个字</p></blockquote><table><thead><tr><th><strong>字节序</strong></th><th>存储内容</th></tr></thead><tbody><tr><td>小端序</td><td>Buffer[4] = {0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210};</td></tr><tr><td>大端序</td><td>Buffer[4] = {0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476};</td></tr></tbody></table><h3 id="3-循环哈希">3.循环哈希</h3><p>调用 $H_{MD5}(M_i,CV_i)$ 函数对每组消息分组进行哈希计算.</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_c8fab24e80-3.png" alt="3.png"></p><p>每一次$ H_{MD5}()$ 中有 4 轮结构相同的逻辑函数, 不同轮次间的唯一区别是参与计算的逻辑函数不同, 分别表示为 F、G、H、I.</p><blockquote><p>下面步函数会介绍 F、G、H、I</p></blockquote><p>此外, $H_{MD5}()$ 还有一个常数表 T, 常数表 T 为定义为 $T[i]=[2^{32} \times abs(sin(i))]=[4294967296 \times abs(sin(i))],1 \leq i \leq 64$ (前 32-bit 小数.) (i 是弧度),如$T[28]=[4294967296 \times abs(sin(28))]  \approx [1163531501.079 3967247]$,然后其整数部分转化为十六进制$T[28]=(1163531501)<em>{10}=(455A14ED)</em>{16}$。T[i]是一个伪随机的常数,可以消除输入数据的规律性,其详细取值见表 6-1。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_255b34d680-4.png" alt="4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常熟T[i](i = 1,...,64)</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> T[<span class="number">64</span>] = &#123;</span><br><span class="line"><span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>, <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>,</span><br><span class="line"><span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>, <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>, <span class="number">0x49b40821</span>,</span><br><span class="line"><span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>, <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>,</span><br><span class="line"><span class="number">0x21e1cde6</span>, <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>, <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>,</span><br><span class="line"><span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>, <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line"><span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>, <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>,</span><br><span class="line"><span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>, <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>, <span class="number">0x85845dd1</span>,</span><br><span class="line"><span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>, <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>&#125;;</span><br></pre></td></tr></table></figure><p>在本文中把 $H_{MD5}$ 的轮函数记为 $R(M_i,Buffer,T[],function_i())$. 其中, 轮函数每次调用是都会读取缓存区中的数据. 而且不同轮次之间所调用的逻辑函数也是不一样的. 此外, 每一次调用轮函数会用到不同 16 组 T 元素(对应轮函数内部的中 16 次迭代).</p><p>$H_{MD5}()$ 完成第四轮轮函数处理之后, 将得到的结果和输入的$ CV<em>i$按字(每 32-bit) 分组按位<strong>加</strong>. 得到最终输出结果$ CV</em>{i+1}$.</p><h2 id="3-轮函数-压缩函数-的具体实现">3.轮函数(压缩函数)的具体实现</h2><p><code>MD5</code>算法的分组处理(压缩函数)与分组密码的分组处理相似,如图 6-3 所示。它由<code>4</code>轮组成,<code>512</code>比特的消息分组<code>M</code>被均分为<code>16</code>个子分组(每个子分组为 <code>32</code>比特)参与每轮<code>16</code>步函数运算，即每轮包括<code>16 </code>个步骤。每步的输人是<code>4</code>个 <code>32</code>比特的链接变量和一个<code>32</code>比特的消息子分组,输出为<code>32</code>位值。经过<code>4</code>轮共<code> 64</code> 步后,得到的个存器值分别与输人链接变量进行模加，即得到此次分组处理的输出链接变量。<br><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_4bc6f6f080-6.png" alt="6.png"><br><code>4</code> 轮操作开始前,先将前一分组的链接变量(A、BC 和 D 的值)复制到另外 4 个备用记录单元<code>AA、BB、CC和DD</code>,以便执行最后的模加运算。</p><p>轮函数每次调用内部有 <code>16</code> 次迭代计算, 将轮函数当前迭代的次数记作 <code>i</code></p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_a200320480-5.png" alt="5.png"></p><p>读取缓冲区中的数据, 将缓冲区按字<code> 32-bit</code> 分为<code>4</code>组, 记作 <code>A、B、C、D</code></p><ul><li><p>第一步</p><p>BCD 暂时不动, A 有以下 x 层计算:</p><ul><li><p>$A+Logic_Function_{轮数}(B,C,D)$</p><p>$F(b,c,d)=(b∧c)∨(\overline b∧d)$</p><p>$G(b,c,d)=(b∧d)∨(c∧\overline d)$</p><p>$H(b,c,d)=b⊕c⊕d$</p><p>$I(b,c,d)=c⊕(b∨\overline d)$</p></li><li><p>$A+M_i[k]$ (k 受到当前轮数以及迭代次数 i 的影响)</p></li><li><p>$A+T[i]$ (受到输入影响, 与当前轮数有关)</p><p>$ρ_1(i)=i$</p><p>$ρ_2(i)=(1+5i)mod16$</p><p>$ρ_3(i)=(5+3i)mod16$</p><p>$ρ_4(i)=7imod16$</p></li><li><p>A <strong>循环</strong>(注意是循环）左移 s 位 (s 由一个常量表给出)</p><blockquote><p>s[ 1…16] = { 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22 }<br>s[17…32] = { 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20 }<br>s[33…48] = { 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23 }<br>s[49…64] = { 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21 }</p></blockquote></li><li><p>A + B</p></li></ul></li><li><p>第二步</p><p>对缓冲区中的四个字按字右循环位移 1 个字 即新的缓冲区$ Buffer′=D′||A′||B′||C′$</p></li></ul><p>也就是说, 一组消息的压缩要经过这样的过程:</p><ol><li><p>轮次一(F)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [abcd k s i] a = b + ((a + F(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span></span><br><span class="line">[ABCD  <span class="number">0</span> <span class="number">7</span>  <span class="number">1</span>][DABC  <span class="number">1</span> <span class="number">12</span>  <span class="number">2</span>][CDAB  <span class="number">2</span> <span class="number">17</span>  <span class="number">3</span>][BCDA  <span class="number">3</span> <span class="number">22</span>  <span class="number">4</span>]</span><br><span class="line">[ABCD  <span class="number">4</span> <span class="number">7</span>  <span class="number">5</span>][DABC  <span class="number">5</span> <span class="number">12</span>  <span class="number">6</span>][CDAB  <span class="number">6</span> <span class="number">17</span>  <span class="number">7</span>][BCDA  <span class="number">7</span> <span class="number">22</span>  <span class="number">8</span>]</span><br><span class="line">[ABCD  <span class="number">8</span> <span class="number">7</span>  <span class="number">9</span>][DABC  <span class="number">9</span> <span class="number">12</span> <span class="number">10</span>][CDAB <span class="number">10</span> <span class="number">17</span> <span class="number">11</span>][BCDA <span class="number">11</span> <span class="number">22</span> <span class="number">12</span>]</span><br><span class="line">[ABCD <span class="number">12</span> <span class="number">7</span> <span class="number">13</span>][DABC <span class="number">13</span> <span class="number">12</span> <span class="number">14</span>][CDAB <span class="number">14</span> <span class="number">17</span> <span class="number">15</span>][BCDA <span class="number">15</span> <span class="number">22</span> <span class="number">16</span>]</span><br></pre></td></tr></table></figure></li><li><p>轮次二(G)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [abcd k s i] a = b + ((a + G(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span></span><br><span class="line">[ABCD  <span class="number">1</span> <span class="number">5</span> <span class="number">17</span>][DABC  <span class="number">6</span> <span class="number">9</span> <span class="number">18</span>][CDAB <span class="number">11</span> <span class="number">14</span> <span class="number">19</span>][BCDA  <span class="number">0</span> <span class="number">20</span> <span class="number">20</span>]</span><br><span class="line">[ABCD  <span class="number">5</span> <span class="number">5</span> <span class="number">21</span>][DABC <span class="number">10</span> <span class="number">9</span> <span class="number">22</span>][CDAB <span class="number">15</span> <span class="number">14</span> <span class="number">23</span>][BCDA  <span class="number">4</span> <span class="number">20</span> <span class="number">24</span>]</span><br><span class="line">[ABCD  <span class="number">9</span> <span class="number">5</span> <span class="number">25</span>][DABC <span class="number">14</span> <span class="number">9</span> <span class="number">26</span>][CDAB  <span class="number">3</span> <span class="number">14</span> <span class="number">27</span>][BCDA  <span class="number">8</span> <span class="number">20</span> <span class="number">28</span>]</span><br><span class="line">[ABCD <span class="number">13</span> <span class="number">5</span> <span class="number">29</span>][DABC  <span class="number">2</span> <span class="number">9</span> <span class="number">30</span>][CDAB  <span class="number">7</span> <span class="number">14</span> <span class="number">31</span>][BCDA <span class="number">12</span> <span class="number">20</span> <span class="number">32</span>]</span><br></pre></td></tr></table></figure></li><li><p>轮次三(H)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [abcd k s i] a = b + ((a + H(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span></span><br><span class="line">[ABCD  <span class="number">5</span> <span class="number">4</span> <span class="number">33</span>][DABC  <span class="number">8</span> <span class="number">11</span> <span class="number">34</span>][CDAB <span class="number">11</span> <span class="number">16</span> <span class="number">35</span>][BCDA <span class="number">14</span> <span class="number">23</span> <span class="number">36</span>]</span><br><span class="line">[ABCD  <span class="number">1</span> <span class="number">4</span> <span class="number">37</span>][DABC  <span class="number">4</span> <span class="number">11</span> <span class="number">38</span>][CDAB  <span class="number">7</span> <span class="number">16</span> <span class="number">39</span>][BCDA <span class="number">10</span> <span class="number">23</span> <span class="number">40</span>]</span><br><span class="line">[ABCD <span class="number">13</span> <span class="number">4</span> <span class="number">41</span>][DABC  <span class="number">0</span> <span class="number">11</span> <span class="number">42</span>][CDAB  <span class="number">3</span> <span class="number">16</span> <span class="number">43</span>][BCDA  <span class="number">6</span> <span class="number">23</span> <span class="number">44</span>]</span><br><span class="line">[ABCD  <span class="number">9</span> <span class="number">4</span> <span class="number">45</span>][DABC <span class="number">12</span> <span class="number">11</span> <span class="number">46</span>][CDAB <span class="number">15</span> <span class="number">16</span> <span class="number">47</span>][BCDA  <span class="number">2</span> <span class="number">23</span> <span class="number">48</span>]</span><br></pre></td></tr></table></figure></li><li><p>轮次四 (I)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [abcd k s i] a = b + ((a + I(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s). */</span></span><br><span class="line">[ABCD  <span class="number">0</span> <span class="number">6</span> <span class="number">49</span>][DABC  <span class="number">7</span> <span class="number">10</span> <span class="number">50</span>][CDAB <span class="number">14</span> <span class="number">15</span> <span class="number">51</span>][BCDA  <span class="number">5</span> <span class="number">21</span> <span class="number">52</span>]</span><br><span class="line">[ABCD <span class="number">12</span> <span class="number">6</span> <span class="number">53</span>][DABC  <span class="number">3</span> <span class="number">10</span> <span class="number">54</span>][CDAB <span class="number">10</span> <span class="number">15</span> <span class="number">55</span>][BCDA  <span class="number">1</span> <span class="number">21</span> <span class="number">56</span>]</span><br><span class="line">[ABCD  <span class="number">8</span> <span class="number">6</span> <span class="number">57</span>][DABC <span class="number">15</span> <span class="number">10</span> <span class="number">58</span>][CDAB  <span class="number">6</span> <span class="number">15</span> <span class="number">59</span>][BCDA <span class="number">13</span> <span class="number">21</span> <span class="number">60</span>]</span><br><span class="line">[ABCD  <span class="number">4</span> <span class="number">6</span> <span class="number">61</span>][DABC <span class="number">11</span> <span class="number">10</span> <span class="number">62</span>][CDAB  <span class="number">2</span> <span class="number">15</span> <span class="number">63</span>][BCDA  <span class="number">9</span> <span class="number">21</span> <span class="number">64</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-案例">4. 案例</h2><p>用 MD5 算法处理 ASCII 码序列“iscbupt”</p><blockquote><p>我是手机拍的，懒得手打了，请见谅(❁´◡`❁)</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_860eb4cc80-7.png" alt="7.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_0ba3e3af80-8.png" alt="8.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_0644992480-10.png" alt="10.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/11/11/169037_8cbbe75980-9.png" alt="9.png"><br>在此特别强调的是,尽管前面提到 <code>MD5</code>的初始链接变量是:</p><p>A=0x01234567,B=0x89ABCDEF,C=0xFEDCBA98,D=0x76543210</p><p>但在运算过程中涉及大端(Big Endian)和小端 Little Endian)的转换问题，所以计算时首先应该将初始链接变量进行大小端的转换,运算结束后再进行一次大小端的转换即得 MD5 散列值。</p><p>完成第一个分组(即最后一个分组)处理后得散列值为:<br>$A=(0xDA456015+0x67452301)mod 2^{23}=0x418A8316$</p><p>$B=(0x231F2EC1+0xEFCDAB89)mod 2^{32}=0x12ECDA4A$</p><p>$C=(0xDAB4FBDA+0x98BADCFE)mod 2^{32} = 0x736FD8D8$</p><p>$D=(0xA7517CE9+0x10325476)mod2^{32}=0xB783D15F$</p><p>由此可得:<br>MD5(“iscbupt”)=“16838A414ADAEC12D8D86F735FD183B7”</p><h2 id="5-代码实现">5.代码实现</h2><blockquote><p>大量注释来袭 o((&gt;ω&lt; ))o</p><p>还有就是注意一个字就是 8bit，注意有地方看不懂是不是没换算的问题，如果还是不懂请评论留眼</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span> <span class="comment">// for uint* type,无符号的n位整数（unsigned n-bit integer）</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span> <span class="comment">// for CHAR_BIT</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的T</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> T[<span class="number">64</span>] = &#123;</span><br><span class="line">   <span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>, <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>,</span><br><span class="line">   <span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>, <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>, <span class="number">0x49b40821</span>,</span><br><span class="line">   <span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>, <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>,</span><br><span class="line">   <span class="number">0x21e1cde6</span>, <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>, <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>,</span><br><span class="line">   <span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>, <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line">   <span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>, <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>,</span><br><span class="line">   <span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>, <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>, <span class="number">0x85845dd1</span>,</span><br><span class="line">   <span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>, <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于获取循环左移的次数</span></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> SHIFT[<span class="number">4</span>][<span class="number">4</span>]&#123;</span><br><span class="line">   &#123;<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>&#125;,</span><br><span class="line">   &#123;<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>&#125;,</span><br><span class="line">   &#123;<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>&#125;,</span><br><span class="line">   &#123;<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充位，0x80是一个十六进制数，表示一个二进制数10000000</span></span><br><span class="line"><span class="comment">//是因为填充的bit需要是一个1和若干个0</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> PADDING[] = &#123;</span><br><span class="line">   <span class="number">0x80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于循环左移</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">Left_Rotate32</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">unsigned</span> <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   num &amp;= <span class="number">31</span>;</span><br><span class="line">   <span class="keyword">return</span> (x &lt;&lt; num) | (x &gt;&gt; (-num &amp; <span class="number">31</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非线性函数FGHI</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">Logic_Function</span><span class="params">(<span class="type">int</span> Round_i, <span class="type">uint32_t</span> b, <span class="type">uint32_t</span> c, <span class="type">uint32_t</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> (Round_i)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">   <span class="keyword">return</span> c ^ (b | ~d);</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">   <span class="keyword">return</span> b ^ c ^ d;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">   <span class="keyword">return</span> (b &amp; d) | (c &amp; ~d);</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">   <span class="keyword">return</span> (b &amp; c) | (~b &amp; d);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取T[i]中的i (受到输入影响, 与当前轮数有关)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title">Substituion</span><span class="params">(<span class="type">int</span> Round_i, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">switch</span> (Round_i)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">   <span class="keyword">return</span> i;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">   <span class="keyword">return</span> (<span class="number">1</span> + <span class="number">5</span> * i) % <span class="number">16</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">   <span class="keyword">return</span> (<span class="number">5</span> + <span class="number">3</span> * i) % <span class="number">16</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">   <span class="keyword">return</span> (<span class="number">7</span> * i) % <span class="number">16</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是第i轮，ABCD，和消息分组M</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Round_Function</span><span class="params">(<span class="type">int</span> Round_i, <span class="type">uint32_t</span> buffer[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span> message_block[<span class="number">16</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//每轮需要进行16个步骤</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// 1.步函数执行</span></span><br><span class="line">   <span class="comment">// A + +Logic_Function_&#123;轮数&#125;(B,C,D)</span></span><br><span class="line">   buffer[<span class="number">0</span>] += <span class="built_in">Logic_Function</span>(Round_i, buffer[<span class="number">1</span>], buffer[<span class="number">2</span>], buffer[<span class="number">3</span>]);</span><br><span class="line">   <span class="comment">// A+M_i[k] (k 受到当前轮数以及迭代次数 i 的影响)</span></span><br><span class="line">   buffer[<span class="number">0</span>] += message_block[<span class="built_in">Substituion</span>(Round_i, i)];</span><br><span class="line">   <span class="comment">// A+T[i] (受到输入影响, 与当前轮数有关)</span></span><br><span class="line">   buffer[<span class="number">0</span>] += T[Round_i * <span class="number">16</span> + i];</span><br><span class="line">   <span class="comment">// A 循环左移 s 位 (s 由一个常量表给出)</span></span><br><span class="line">   buffer[<span class="number">0</span>] = <span class="built_in">Left_Rotate32</span>(buffer[<span class="number">0</span>], SHIFT[Round_i][i % <span class="number">4</span>]);</span><br><span class="line">   <span class="comment">// 最后A + B</span></span><br><span class="line">   buffer[<span class="number">0</span>] += buffer[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2. 对缓冲区中的四个字按字右循环位移 1 个字</span></span><br><span class="line">   <span class="comment">// Buffer′=D′||A′||B′||C′</span></span><br><span class="line">   <span class="type">uint32_t</span> bufferCache = buffer[<span class="number">3</span>];</span><br><span class="line">   buffer[<span class="number">3</span>] = buffer[<span class="number">2</span>];</span><br><span class="line">   buffer[<span class="number">2</span>] = buffer[<span class="number">1</span>];</span><br><span class="line">   buffer[<span class="number">1</span>] = buffer[<span class="number">0</span>];</span><br><span class="line">   buffer[<span class="number">0</span>] = bufferCache;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//chain_vector即ABCD，消息分组message_block有16个子分组，每个子分组位32bit</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Hash_MD5</span><span class="params">(<span class="type">uint32_t</span> chain_vector[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span> message_block[<span class="number">16</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 将chain_vector赋给buffer，buffer作为中间tmp</span></span><br><span class="line">   <span class="type">uint32_t</span> buffer[<span class="number">4</span>];</span><br><span class="line">   <span class="built_in">memcpy</span>(buffer, chain_vector, <span class="number">128</span> / CHAR_BIT);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 进行四轮迭代</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">   <span class="built_in">Round_Function</span>(i, buffer, message_block);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 将得到的结果和输入的CV_i按字(每 32-bit) 分组按位加. 得到最终输出结果CV_&#123;i+1&#125;.</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">   chain_vector[i] += buffer[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">__uint128_t</span> <span class="title">MD5</span><span class="params">(string _message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   //  1.预处理的消息</span></span><br><span class="line"><span class="comment">   //  填充和追加长度信息</span></span><br><span class="line"><span class="comment">   //  填充缓存数组</span></span><br><span class="line"><span class="comment">   //  附加messageBITcount，在c++中自然以尾序存储</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取信息的长度,_message是还未处理的信息</span></span><br><span class="line">   <span class="type">uint64_t</span> messageLength = _message.<span class="built_in">length</span>();</span><br><span class="line">   <span class="comment">// 将信息的字节长度转换为位（bit）长度，CHAR_BIT通常指的是8</span></span><br><span class="line">   <span class="type">uint64_t</span> messageBitCount = messageLength * CHAR_BIT;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//计算需要多少个512位的块来存储信息</span></span><br><span class="line">   <span class="comment">//这里先将messageBitCount加上64，是因为后面需要填充原始消息开头的低64位</span></span><br><span class="line">   <span class="comment">//+1是为了C++默认向下取整，我们需要向上取整</span></span><br><span class="line">   <span class="type">int</span> blockCount = (messageBitCount + <span class="number">64</span> - <span class="number">1</span>) / <span class="number">512</span> + <span class="number">1</span>;</span><br><span class="line">   <span class="comment">//数组的大小是64 * blockCount，这样可以使信息的长度恰好是blockCount个512位的块的倍数。</span></span><br><span class="line">   <span class="type">uint8_t</span> message[<span class="number">64</span> * blockCount];</span><br><span class="line">   <span class="built_in">memcpy</span>(message, _message.<span class="built_in">c_str</span>(), messageLength);</span><br><span class="line">   <span class="comment">//在信息的末尾填充特定的填充字符，直到信息长度达到64的倍数,for语句中-8是为了填充原始消息开头的低64位</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = messageLength, j = <span class="number">0</span>; i &lt; (<span class="number">64</span> * blockCount - <span class="number">8</span>); i++)</span><br><span class="line">   message[i] = PADDING[j++];</span><br><span class="line">   <span class="comment">//在最后空缺的64位上填充  以64比特表示的原始消息长度</span></span><br><span class="line">   <span class="comment">//实际上是将messageBitCount的低64位添加到了message + (64 * blockCount - 8)后面</span></span><br><span class="line">   <span class="built_in">memcpy</span>(message + (<span class="number">64</span> * blockCount - <span class="number">8</span>), &amp;messageBitCount, <span class="number">64</span> / CHAR_BIT);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 构建对象M，每一个M有16个子分组，每个子分组位32bit</span></span><br><span class="line">   <span class="type">uint32_t</span> *messageBuffer = <span class="keyword">new</span> <span class="type">uint32_t</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   //  2.初始化CV</span></span><br><span class="line"><span class="comment">   //  注意CV1 的ABCD位大端序</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="type">uint32_t</span> res[<span class="number">4</span>] = &#123;<span class="number">0x67452301</span>, <span class="number">0xEFCDAB89</span>, <span class="number">0x98BADCFE</span>, <span class="number">0x10325476</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; blockCount; i++)</span><br><span class="line">   &#123;</span><br><span class="line">   <span class="comment">// 更新 Message_Block，即M0，M1，M2。。。</span></span><br><span class="line">   <span class="built_in">memcpy</span>(messageBuffer, message + <span class="number">64</span> * i, <span class="number">64</span>);</span><br><span class="line">   <span class="comment">//对每一个M进行hash压缩函数</span></span><br><span class="line">   <span class="built_in">Hash_MD5</span>(res, messageBuffer);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   //  3.将最后得到的ABCD即res返回md5</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="type">__uint128_t</span> md5 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">   md5 += (<span class="type">__uint128_t</span>)res[i] &lt;&lt; (i * <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//释放动态分配的内存</span></span><br><span class="line">       <span class="comment">//当你使用 new 关键字动态地分配内存时，在不再使用那块内存后使用 delete[] 来释放它</span></span><br><span class="line">       <span class="comment">//不释放动态分配的内存，那么程序可能会消耗掉所有的可用内存，导致所谓的内存泄漏</span></span><br><span class="line">   <span class="keyword">delete</span>[] messageBuffer;</span><br><span class="line">   <span class="keyword">return</span> md5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MD5_Print</span><span class="params">(<span class="type">__uint128_t</span> in)</span><span class="comment">//将128位整数的每一个字节以十六进制形式打印出来。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//__uint128_t 是128位，但 printf 函数只能按字节（即8位）来处理数据。</span></span><br><span class="line">   <span class="comment">//所以，我们需要利用unsigned char逐个访问128位的整数按字节并拆分，然后逐个字节地打印。</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> *ptr = (<span class="type">unsigned</span> <span class="type">char</span> *)&amp;in;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">       <span class="comment">//%02x 是一个格式说明符，它将以两位十六进制格式打印一个字节，并在需要时在前面补零。</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, ptr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;----------------- MD5 -----------------\n&quot;</span>;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;请输入要加密的明文. (如果要终止程序请按CTRL + C)\n&quot;</span>;</span><br><span class="line">   string str;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;text: &quot;</span>;</span><br><span class="line">   <span class="built_in">getline</span>(cin, str);</span><br><span class="line">   <span class="comment">//__uint128_t一个无符号的128位整数,可存储的值（2^128 - 1）</span></span><br><span class="line">   <span class="type">__uint128_t</span> md5 = <span class="built_in">MD5</span>(str);</span><br><span class="line"></span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;result: &quot;</span>;</span><br><span class="line">   <span class="comment">// 注意这个md5类型是__uint128_t，我们需要的是能将这个整数以16进制输出</span></span><br><span class="line">   <span class="built_in">MD5_Print</span>(md5);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">----------------- MD5 -----------------</span><br><span class="line">请输入要加密的明文. (如果要终止程序请按CTRL + C)</span><br><span class="line">text: iscbupt</span><br><span class="line">result: <span class="number">16838</span>a414adaec12d8d86f735fd183b7</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5算法 </tag>
            
            <tag> Hash算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公钥密码体制之MH背包公钥加密体制</title>
      <link href="/posts/10.html"/>
      <url>/posts/10.html</url>
      
        <content type="html"><![CDATA[<p>公钥密码体制中,除了 RSA、EIGamal 和圆曲线加密体制以外，还有很多其他公钥密码算法，但由于各种原因它们的应用都不如上述算法广泛,本篇将对一些其他重要公钥密码算法，MH 背包公钥加密体制的原理作简要的介绍。</p><p>看到背包很熟悉？有关系，但不多<s>如有</s>。（温馨提示：如果忘记背包请随时复习我们最经典的<a href="https://www.cnblogs.com/jbelial/articles/2116074.html">背包九讲</a>😋）</p><h2 id="1-MH-背包公钥加密体制介绍"><a href="http://1.MH">1.MH</a> 背包公钥加密体制介绍</h2><p>背包公钥加密体制是由 Ralph Merkle 和 Martin Hellman 于 1978 年首提出的，它是第一个公钥加密算法，其安全性基于背包难题。尽管这个算法后来发现是不安全的,但是由于它实现了如何将 NP 完全问题用于设计公钥密码算法,所以其设计思想很值得借鉴和研究。</p><p>背包问题描述起来很简单:给定一堆物品,每个重量不同,能否将这些物品中的几件放入一个背包中使之等于一个给定的重量?数学描述为:给定一个正整数集$A=(a_1,a_2,\ldots ,a_n)$(称为背包向量),已知<code>S</code>是<code>A </code>的某子集合<code>A'</code>中元素的和。求<code>A'</code>或者求一个<code>n</code>元的<code>0、1</code>向量$X=(x_1,x_2,\ldots,x_n)$使得:</p><p>$$<br>\sum_{i=1}^{n}{x_ia_i} = S<br>$$</p><p>Merkle 和 Hellman 提出的背包公加密体制(简称 MH 背包密码)是利用<strong>超递增序列的背包问题</strong>来实现的(简称超递增背包问题)。所谓超递增序列,是指这个序列的每一项都大于它之前所有项之和，即对于任意<code>j&gt;1</code>,有:</p><p>$$<br>a_j &gt; \sum_{i = 1}^{j - 1}{a_i}<br>$$</p><p>例如，<code>(1,3,6,13,27,52)</code>就是一个超递增序列。超递增背包问题的解很容易找到,用 <code>S</code>与<code>A</code>的最后一项$a_n$，比较,如果 $S&lt; a_n$,则它不在背包中令$x_n=0$;如果 $S&gt;a_n$,则它在背包中,令$x_n = 1$,并令$ S=S-a_n$。进而考查序列下一个最大的数$ a_n-1$,重复到最后一个数比较结束如果总重量减为零,那么有一个解,否则无解。而一般背包问题是困难的,它目前没有多项式时间的算法。求解若使用穷搜法,则最坏情况下需遍历$ 2^n$个子集合, <code>n</code>较大时,非常困难。MH 背包公钥加密体制利用了超递增序列作为私钥，公钥则是有相同解的一般背包向量。</p><h2 id="2-密钥生成算法">2.密钥生成算法</h2><p>令 A={$a_1,a_2,\ldots,a_n$}是一个超递增整数序列,取素数 $p、b,p&gt; \sum_{i = 1}^{n}{a_i},1 \leq b \leq p-1$,计算$t_i\equiv ba_i(mod p),1 \leq i \leq n$。则公钥为$t=(t_1,t_2,\ldots,t_n)$和<code>p</code>,私钥为<code>A</code>和<code>b</code>。</p><h3 id="C-代码">C++ 代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len; <span class="comment">// 设置超递增序列长度（随便）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A[N];<span class="comment">//私钥</span></span><br><span class="line"><span class="type">int</span> b;<span class="comment">//私钥</span></span><br><span class="line"><span class="type">int</span> p;<span class="comment">//公钥</span></span><br><span class="line"><span class="type">int</span> t[N];<span class="comment">//公钥</span></span><br><span class="line"><span class="type">int</span> sum;<span class="comment">//A[N]前len项和</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">()</span></span>&#123; <span class="comment">//线性筛法得质数</span></span><br><span class="line">    <span class="type">int</span> n = N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_A</span><span class="params">()</span> <span class="comment">// 初始化超递增序列，随便写的，满足调价即可</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    sum += A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] = sum + <span class="number">1</span>;</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请设置超递增序列长度&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; len;</span><br><span class="line">    <span class="built_in">init_A</span>();</span><br><span class="line">    <span class="built_in">get_primes</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(primes[i] &gt; sum)</span><br><span class="line">        &#123;</span><br><span class="line">            p = primes[i];</span><br><span class="line">            b = primes[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;公钥集合&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;t:&quot;</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ ) cout &lt;&lt; (b * A[i]) % p &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p:&quot;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;私钥集合&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;A:&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ ) cout &lt;&lt; A[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请设置超递增序列长度</span><br><span class="line"><span class="number">8</span></span><br><span class="line">公钥集合</span><br><span class="line">t:<span class="number">251</span> <span class="number">245</span> <span class="number">233</span> <span class="number">209</span> <span class="number">161</span> <span class="number">65</span> <span class="number">130</span> <span class="number">3</span></span><br><span class="line">p:<span class="number">257</span></span><br><span class="line">私钥集合</span><br><span class="line">A:<span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">8</span> <span class="number">16</span> <span class="number">32</span> <span class="number">64</span> <span class="number">128</span></span><br><span class="line">b:<span class="number">251</span></span><br></pre></td></tr></table></figure><h2 id="3-加解密算法-肥肠简单">3.加解密算法(肥肠简单)</h2><p><strong>加密算法</strong>:设明文块二进制表示为 $m=m_1m_2\ldots m_n$,则使用加密算法$c \equiv \sum_{i = 1}^{n}{t_im_i}(mod p)$,计算出密文 c,发送给接收方。</p><p><strong>解密算法</strong>:通过公式$S\equiv b^{-1}c(mod p)$计算得到 S,对超递增序列$A=(a_1,a_2,\ldots,a_n)$及整数 S 利用超递增背包问题求解算法恢复出明文$m_1m_2\ldots m_n$。</p><h3 id="求逆元！！！！">求逆元！！！！</h3><blockquote><p>这里只介绍快速幂求逆元，如若需要知道快速幂，<a href="https://www.nonevector.top/posts/9.html">点击直达</a></p></blockquote><p>前提</p><blockquote><p>费马小定理：若 p 是质数，整数 b 不是 p 的倍数，则 b^(p−1)≡1(modp).</p><p>我们可以将式子变形：b⋅b^p−2≡1(modp)，所以 binv=b^p−2</p></blockquote><p>当 n 为质数时，可以用快速幂求逆元：</p><p>a / b ≡ a _ x (mod n)<br>两边同乘 b 可得 a ≡ a _ b _ x (mod n)<br>即 1 ≡ b _ x (mod n)<br>同 b * x ≡ 1 (mod n)<br>由费马小定理可知，当 n 为质数时</p><p>b ^ (n - 1) ≡ 1 (mod n)<br>拆一个 b 出来可得 b * b ^ (n - 2) ≡ 1 (mod n)<br>故当 n 为质数时，b 的乘法逆元 x = b ^ (n - 2)</p><p>当 n 不是质数时，可以用扩展欧几里得算法求逆元：<br>a 有逆元的充要条件是 a 与 p 互质，所以 gcd(a, p) = 1<br>假设 a 的逆元为 x，那么有 a * x ≡ 1 (mod p)<br>等价：ax + py = 1<br>exgcd(a, p, x, y)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 说实话感觉一两句讲不清楚，想要了解自行了解吧，这里直接用代码吧😥</span></span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> <span class="comment">// 快速幂求逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-样例">4.样例</h2><p>已知<code>A=(1,3,7,13,26,65,119,267)</code>是超递增序列,作为私钥,求解一个公钥,并利用这个公私钥对对明文 <code>10101100</code>实现加解密。</p><p><strong>解:</strong></p><p>由于<code>1+3+7+13+26+65+119+267=501</code><br>取 p=523,b=467,得$b^{-1}\equiv 28mod 532$。<br>则:</p><p>$$<br>t_1 \equiv 467 \times 1 \equiv 467(mod 523) \<br>$$</p><p>$$<br>t_2 \equiv 467 \times 3 \equiv 355(mod 523)  \<br>$$</p><p>$$<br>t_3 \equiv 467 \times 7 \equiv 131(mod 523)  \<br>$$</p><p>$$<br>t_4 \equiv 467 \times 13 \equiv 318(mod 523)  \<br>$$</p><p>$$<br>t_5 \equiv 467 \times 26 \equiv 113(mod 523)  \<br>$$</p><p>$$<br>t_6 \equiv 467 \times 65 \equiv 21(mod 523)  \<br>$$</p><p>$$<br>t_7 \equiv 467 \times 119 \equiv 135(mod 523)  \<br>$$</p><p>$$<br>t_8 \equiv 467 \times 215 \equiv 215(mod 523)  \<br>$$</p><p>可得,<code>A </code>和<code>b</code>为私钥,与之对应的公钥:(467,355,131,318,113,21,135,215)和 p。</p><p>对于明文 10101100 加密得密文:</p><p>$$<br>t_1+t_3+t_5+t_6=467+131+113+21=732<br>$$</p><p>接收方收到密文 732 后计算:</p><p>$$<br>732\times 28=20496\equiv 99(mod 523)<br>$$</p><p>解超递增序列背包问题:</p><p>$$<br>m_1+3m_2+7m_3+13m_4+26m_5+65m_6+119m_7+267m_8=99(mod 523)<br>$$</p><p>得到$m_1=m_3=m_5=m_6 = 1,m_2=m_4=m_7=m_8=0$,即得明文:10101100。</p><h2 id="5-C-代码">5.C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len; <span class="comment">// 设置超递增序列长度（随便）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A[N];<span class="comment">//私钥</span></span><br><span class="line"><span class="type">int</span> b;<span class="comment">//私钥</span></span><br><span class="line"><span class="type">int</span> p;<span class="comment">//公钥</span></span><br><span class="line"><span class="type">int</span> t[N];<span class="comment">//公钥</span></span><br><span class="line"><span class="type">int</span> sum;<span class="comment">//A[N]前len项和</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line">string clear_text;  <span class="comment">//明文</span></span><br><span class="line">string secret_text; <span class="comment">//密文</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> byt[N]; <span class="comment">// 用于辅助找到明文二进制</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res;<span class="comment">//选择加密还是解密</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">()</span></span>&#123; <span class="comment">//线性筛法得质数</span></span><br><span class="line">    <span class="type">int</span> n = N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">// 初始化获取私钥和公钥（上面有注释这里就不详细给了）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    sum += A[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] = sum + <span class="number">1</span>;</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(primes[i] &gt; sum)</span><br><span class="line">        &#123;</span><br><span class="line">            p = primes[i];</span><br><span class="line">            b = primes[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ ) t[i] =  (b * A[i]) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> <span class="comment">// 快速幂求逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line"></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        a = (LL) a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u &gt;= len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> all = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            all += byt[i] * A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(all == s)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(byt[i]) clear_text += <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> clear_text += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    byt[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, s);</span><br><span class="line">    byt[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(u + <span class="number">1</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;<span class="comment">//密文c</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c += t[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    secret_text = <span class="built_in">to_string</span>(c);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后得密文:&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="function">std::istringstream <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">    ss &gt;&gt; c;</span><br><span class="line">    <span class="type">int</span> down = <span class="built_in">qmi</span>(b, p - <span class="number">2</span>, p); <span class="comment">// b得逆元</span></span><br><span class="line">    <span class="type">int</span> s = down * c % p;</span><br><span class="line">    <span class="comment">// 能力不够，应该能用DP，但是俺不会，只会最简单得dfs😋</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, s); <span class="comment">// dfs遍历00000000-11111111</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文:&quot;</span> &lt;&lt; clear_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入1选择加密，或者输入2选择解密&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请设置超递增序列长度&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; len;</span><br><span class="line">    <span class="built_in">get_primes</span>();</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; clear_text;</span><br><span class="line">        <span class="built_in">encrypt</span>(clear_text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">请输入<span class="number">1</span>选择加密，或者输入<span class="number">2</span>选择解密</span><br><span class="line"><span class="number">1</span></span><br><span class="line">请设置超递增序列长度</span><br><span class="line"><span class="number">8</span></span><br><span class="line">请输入明文</span><br><span class="line"><span class="number">10101100</span></span><br><span class="line">加密后得密文:<span class="number">710</span></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line">请输入<span class="number">1</span>选择加密，或者输入<span class="number">2</span>选择解密</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请设置超递增序列长度</span><br><span class="line"><span class="number">8</span></span><br><span class="line">请输入密文</span><br><span class="line"><span class="number">710</span></span><br><span class="line">解密后的明文:<span class="number">10101100</span></span><br></pre></td></tr></table></figure><h2 id="6-总结">6.总结</h2><p>背包问题是 NP 完全类问题，至今还没有多项式时间的求解方法。若对所有可能解进行穷举搜索，当 n&gt;100 时,计算是不可能的。然而对大多数基于背包问题的公钥加密体制,已经有有效的攻击方法。1983 年 Shamir 发现了 MH 加密体制的缺陷,即可以从普通的背包向量(公)重构出超递增背包向量(私),从而证明 MH 背包密码是不安全的。自从 MH 被破后，又有许多其他的背包加密体制被提出,但这些体制中的大多数都被用同样的密码分析方法攻破了，少数则采用更高级的分析方法攻破,虽然有极个别的背包变型还没有破解,但人们已不再信赖它们了。另外，大多数背包密码算法不适合数字签名。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MH背包公钥算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公钥密码体制之RSA公钥加密体制</title>
      <link href="/posts/9.html"/>
      <url>/posts/9.html</url>
      
        <content type="html"><![CDATA[<h2 id="RSA-公钥机密体制">RSA 公钥机密体制</h2><p>在 Diffie 和 Hellman 提出公钥密码体制的设想后,Merkle 和 Hellman 首先共同提出 MH 背包公钥加密体制，随后 Rivest,Shamir ,Adleman 联合提出<code>RSA公加密体制</code>。<code>RSA</code>虽晚于<code>MH背包公钥加密体制</code>,但它是第一个安全、实用的公钥加密算法,已经成为国际标准,是目前应用广泛的公钥加密体制。<code>RSA</code>的基础是<strong>数论的欧拉定理</strong>,它的安全性依赖于<strong>大整数因子分解的困难性</strong>。因为加解密次序可换,<code>RSA 公钥加密体制</code>既可用于加密,也可用于<strong>设计数字签名体制</strong>，加密体制又可以分为密钥生成算法、加密算法和解密算法三部分。</p><h2 id="数论基础">数论基础</h2><ol><li><p>欧拉函数：$1 \sim N$中与 N 互质的数的<strong>个数</strong>成为欧拉函数，记为$\varphi(N)$，若在算数基本定理中,$N = p_1^{a_1}p_2^{a_2} \ldots p_m^{a_m}$,则：</p><p>$$\varphi(N) = N \times \frac{p_1 - 1}{p_1} \times \frac{p_2 - 1}{p_2} \times \ldots \times \frac{p_m - 1}{p_m}$$</p></li><li><p>欧拉定理：$a^{\varphi(n)} \equiv 1(modn)$,其中 a 和 n 都是正整数，且 a 和 n 互质</p><blockquote><p>小费马定理：假设 p 是一个质数，且 a 和 p 互质（即两者只有一个公约数 1），那么$a^{p-1} \equiv 1(mod p)$恒成立。</p></blockquote></li><li><p>同余的一些基本性质：</p><p>(a + b) % p = (a % p + b % p) % p<br>(a - b) % p = (a % p - b % p) % p<br>(a _ b) % p = (a % p _ b % p) % p<br>但对于除法却不成立，即(a / b) % p 不等于 (a % p / b % p) % p ,但如果利用乘法逆元便可以</p><p>如需证明，<a href="https://www.nonevector.top/posts/1.html">点击直达（￣︶￣）↗ 　</a></p></li><li><p><strong>贝祖定理</strong>(<strong>裴蜀等式</strong>)：</p><p>​ 即如果 a、b 是整数，那么一定存在整数 x、y 使得 ax+by=gcd(a,b)。</p></li><li><p>扩展欧几里得算法：可以快速求出 ax+by=gcd(a,b)中的 x 和 y 的值（可以用于下面求逆元）</p></li><li><p><strong>逆元(很重要！！！！)</strong>：$ab \equiv 1(mod p)$,那么 a，b 互为模 n 意义下的逆元</p></li><li><p>快速幂（用于解决 mod 时溢出的问题，速度也大大加快 ψ(｀ ∇´)ψ</p><blockquote><p>所有 a^b 的 b 都能转换为二进制</p><p>即如果 b 的二进制表示的第 0 位为 1,则乘上当前的 a</p><p>b 右移一位</p><p>更新 a,a 依次为 a^{2^0},a^{2^1},a^{2^2},…,a^{2^logb}</p><p>因此举个例子</p><p>$$<br>4^5mod10 = 4^{(101)_2} mod 10 = 4 ^{2^0 + 2^2} mod 10 = (4 mod 10 + 96mod10)mod10=(24) mod 10 = 4<br>$$</p><p>在次方的同时进行 mod 运算，中间数不会太大</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(LL a, LL k, LL p)</span> <span class="comment">//快速幂求余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-RSA-密钥生成算法">1. RSA 密钥生成算法</h2><p>密钥生成算法为用户生成加解密算法中使用的公私密钥对,分为以下几个步骤:</p><ol><li><p>选取两个安全大素数<code>p</code>和<code>q</code>(“大”指其长度要足够长目前推荐长度为至少 1024 比<br>特);</p></li><li><p>计算乘积$ n=p \times q,\varphi(n)=(p-1)(q-1)$,其中 $\varphi(n)$为<code>n</code>的欧拉函数;</p><blockquote><p>公式由来：因为 n 包含两个质因子 p，q，所以在 1 到 n-1 中包含 p，q 因子的数均与 n 不互素。包含 p 因子的有 p，2p，3p 一直到 p（q-1）即（q-1)个，同理含 q 的有（p-1)个。一共 p+q-2 个数与 n 不互素</p><p>则在这 n-1 个数中与 n 互素的数一共有 n-1-（p+q-2）=n-p-q+1，且 n 可以写作 p*q，可以得到（p-1)(q-1)</p></blockquote></li><li><p>随机选取整数$ e(1&lt;e&lt; \varphi (n))$作为公钥,要求满足 $gcd(e,\varphi(n))=1$,即$e与\varphi(n)$互素;</p></li><li><p>用<code>Euclid </code>扩展算法(欧几里得扩展算法）计算私钥<code>d</code>,以满足$d \times e\equiv1(mod\varphi(n))$,即$d\equiv e^{-1}(mod \varphi(n))$则<code>e</code>和<code>n </code>是公钥,<code>d </code>是私钥。</p><blockquote><p>给定 n 和正整数$a_i,b_i$，利用欧几里得扩展算法可快速求出$x_i,y_i$满足$a_i \times x_i + b_i \times y_i = gcd(a_i, b_i)$.</p><p><a href="https://www.acwing.com/solution/content/1393/">直达欧几里得扩展算法题解及 c++代码</a></p><p>因为$d \times e\equiv1(mod\varphi(n))$，所以$(e)d + (-k) \varphi(n)) = 1$,d 与-k 分别为欲求的 x，y，可直接用欧几里得扩展算法直接求 ，下面样例给出 c++代码</p></blockquote></li></ol><p>注意,加解密算法中两个素数<code>p</code>和<code>q</code>不再需要,可销毁,但绝不能泄露。</p><h3 id="样例">样例</h3><p>下面举例说明 RSA 公钥/私钥对的具体产生过程(注,在公钥密码体制中,参数长度都比较长,而为方便计算,实例中选取参数都较小,重在说明算法流程)。</p><p>假设 p=13,q=17;</p><p>计算 $n=p\times q=13\times17=221$;则$\varphi(n)=(p-1)\times(q-1)=(13-1)\times(17-1)=192$。选取公钥 e=11(一般为素数),满足$1&lt;e&lt;\varphi(n)$,且满足 $gcd(e,\varphi(n))=1$。通过 Euclid 扩展算法求得满足公式 $d\times e\equiv1(mod 192)$的 d=35。所以,得到公钥(e,n)为(11,221),私钥 d 为 35。</p><h3 id="C-代码">C++代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span> <span class="comment">//用它来获取当前时间，作为随机数生成器的种子。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span> <span class="comment">//rand()和srand()，这两个函数用于生成随机数。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL, LL&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> LL N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line">PII public_key;</span><br><span class="line">LL private_key;</span><br><span class="line">LL p, q;</span><br><span class="line">LL Euler;<span class="comment">// 欧拉函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取1-110的质数</span></span><br><span class="line">LL primes[N];</span><br><span class="line">LL cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">()</span></span>&#123; <span class="comment">// 质数筛算法获取质数（速度比较快）</span></span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">2</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(LL j=<span class="number">0</span>;primes[j]&lt;=N/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> <span class="comment">// 欧几里得算法判断最小公共因子</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b?<span class="built_in">gcd</span>(b, a % b):a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL d, x1, y1;</span><br><span class="line">    d = <span class="built_in">exgcd</span>(b, a % b, x1, y1);</span><br><span class="line">    x = y1, y = x1 - a / b * y1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_Rand</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">rand</span>() % (max - min)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//e*d + Euler*k = 1 类比 a*x + b*y=1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_public_private_key</span><span class="params">(LL p, LL q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL k, d;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    LL n = p * q;</span><br><span class="line">    Euler = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt;cnt &lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> e = <span class="built_in">get_Rand</span>(<span class="number">0</span>, cnt - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; e &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span>(e &gt;= Euler || <span class="built_in">gcd</span>(e, Euler) != <span class="number">1</span>)<span class="comment">// 随机选择公钥,不满足条件继续随机</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = <span class="built_in">get_Rand</span>(<span class="number">0</span>, cnt - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(e, Euler, d, k);</span><br><span class="line">    public_key.x = e, public_key.y = n;</span><br><span class="line">    private_key = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入素数p和q&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; q;</span><br><span class="line">    <span class="built_in">get_primes</span>();</span><br><span class="line">    <span class="built_in">get_public_private_key</span>(p, q);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;公钥为：(&quot;</span> &lt;&lt; public_key.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; public_key.y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl &lt;&lt;</span><br><span class="line">    <span class="string">&quot;私钥为：(&quot;</span> &lt;&lt; private_key &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为了方便说明这里结果为上面例子一致，但实际上因为公钥e是随机生成的</span></span><br><span class="line"><span class="comment">//因此只要满足条件，每次结果应该都不一样</span></span><br><span class="line">请输入素数p和q</span><br><span class="line"><span class="number">13</span> <span class="number">17</span></span><br><span class="line">公钥为：(<span class="number">11</span>,<span class="number">221</span>)</span><br><span class="line">私钥为：(<span class="number">35</span>)</span><br></pre></td></tr></table></figure><h2 id="2-RSA-加解密算法">2.RSA 加解密算法</h2><h3 id="1-加密过程">1.加密过程</h3><p>加密时首先将明文比特串分组,使得每个分组对应的十进制数小于 <code>n</code>,即分组长度小于$log_2^n$，然后对每个明文分组 $m_i$;作加密运算，具体过程分为如下几步:<br>(1)获得接收方公钥(e,n);<br>(2)把消息 M 分组为长度为$L(L&lt;log_2^n)$的消息分组 $M=m_1m_2···m_t$;<br>(3)使用加密算法 $c_i\equiv m_i^e(mod n)(1 \leq i \leq t)$计算出密文$ C=c_1c_2···c_t$;<br>(4)将密文 C 发送给接收方。</p><h3 id="2-解密过程">2.解密过程</h3><p>(1)接收方收到密文 $ C=c_1c_2···c_t$;<br>(2)使用私钥d 逐一恢复明文分组 $m_i$,$m\equiv c_i^d(mod n)(1 \leq i \leq t)$;<br>(3)得明文消息$M=m_1m_2···m_t$;</p><h3 id="3-正确性">3.正确性</h3><blockquote><p>说实话我是看的头晕 😵</p></blockquote><p>下面证明若算法严格按步骤执行,接收者可以使用私钥及解密算法恢复出明文。</p><p>由公式$c_i\equiv m_i^e(mod n)$,可得</p><p>$c_i^d(mod n)=m_i^{ed}(mod n)\equiv m_i^{\varphi(n) + 1}(mod n)$因为$ed\equiv 1 (mod \varphi(n))$,故存在 $k \in Z$,使得$ed=k\times \varphi(n)+1$,下面分两种情况讨论:</p><ol><li><p>$gcd(m_i,n)=1$,则由欧拉定理得</p><p>$$m_i^{\varphi(n)}\equiv 1 (mod n) \Rightarrow m_i^{\varphi(n)}\equiv 1(mod n),m_i^{\varphi(n) + 1}\equiv m_i(mod n)$$</p><p>又因为$m_i &lt; n,所以,c_i^dmodn\equiv m_i^{k\varphi(n) + 1} \equiv m_i(modn)$。</p></li><li><p>$gcd(m_i,n)\neq 1$,可得 $gcd(m_i,n)&gt;1$。由于$n=p\times q$,所以$gcd(m_i,n)$必含 p 或 q。</p><p>不妨设$ gcd(n,m_i)=p$,则有 $m_i=tp,1\leq t &lt; q$,由欧拉定理得</p><p>$$<br>m_i^{\varphi(q)} \equiv 1(mod q)<br>$$</p><p>因此，</p><p>$$<br>m_i^{\varphi(q)}\equiv 1 (mod q) \Rightarrow [m_i^{\varphi(q)}]^{\varphi§}\equiv 1(mod q) \Rightarrow m_i^{\varphi(n)}\equiv 1(mod q)<br>$$</p><p>因此存在一整数 r,使得 $m_i^{\varphi(n)} = 1十rq$,两边同时乘以$m_i=tp$得:<br>左边$=m_i^{\varphi(n) + 1}$;右边$=tp+rq·tp=m_i+rtpq-m_i十rtn$。<br>上面等式两边同时进行模 n 运算,得 $m_i^{\varphi(n)+1}=(m_i+rtn)\equiv m_i(mod n)$。<br>又因为$m_i &lt;  n$,得$m_i^{\varphi(n) + 1}mod n=m_i$。<br>故由(1)、(2)验证了解密算法的正确性。</p><p>下表是总结</p><p><img src="https://cdn.acwing.com/media/article/image/2023/11/05/169037_bf36e7397b-1.png" alt="1.png"></p></li></ol><h3 id="4-实例">4.实例</h3><p>下面举一个简单的例子来说明如何用 RSA 公钥加密体制来对一段消息进行加解密<br>设接收方 B 选择 p=43,q=59,e=13。发送方 A 有消息 m=cybergreatwall,我英文字母表顺序 a=00,01,···25 进行编码。A 欲用 RSA 公钥加密体制加密后传送给 B,求 B 的私钥并描述加解密过程。<br>解 密钥生成:$n=p×g=43×59=2537,\varphi(2537)=42\times 58=2436$</p><p>e=13,则根据 $d\equiv e^{-1}(mod 2436)$,得:d=937</p><p>则公钥(n=2 537,e=13 ),私钥 d=937。<br>A 的加密过程:先将消息分块为:cy、be、rg、re、at、wa、ll。(m1-m6)</p><p>利用英文字母表的顺序编码将明文数字化得:<br>0224 0104 1706 1704 0019 2200 1111<br>利用公钥(n=2537,e=13)和加密算法 $c_i \equiv m^e_i(mod n)$进行加密<br>对第一个分组 m 的加密过程为:</p><p>$$<br>0224^{13}mod2537=1692=c_1<br>$$</p><p>同理对其他分组进行加密,得密文:C=C1C2C3C4C5C6=1692 0803 1093 1943 2299 1254 0724</p><p>解密过程:解密消息时用私钥 d=937 和解密算法 $m_i\equiv c_i^d(mod n)$进行解密对第一组密文 C1 进行解密的过程为:</p><p>$$<br>1692^{937}mod 2537=0224<br>$$</p><p>0224 对应的明文分组为 $m_1=cy$,所以密文 C1 所对应的明文为 cy。</p><p>消息的其余部分用同样的方法就可以恢复出来,得明文 mcyber greatwall。</p><h3 id="5-RSA-的快速计算">5.RSA 的快速计算</h3><p>应用 RSA 算法进行加解密计算的时候,可以使用下列方法加快计算速度</p><ol><li><p>利用模运算的性质:每次乘积后即进行模运算,可以使得中间结果长度小于 n 的长度</p><p>$$<br>[(amod n)\times (bmod n)]mod n=(ab)mod n<br>$$</p><p>每次乘积后即进行模运算,可以使得中间结果长度小于 n 的长度。</p></li><li><p>使用快速取模指数算法可以很有效地减少模乘的次数,对此算法描述如下</p><p>e 的二进制表示为$b_kb_{k-1}···b_0$,其中 $b_i \in {0,1}(i=0,1,···,k)$,则</p><p>$$<br>e = \sum_{i = 0}^{k}{b_{i}2^i} = \sum_{b_i = 1}{2^i}<br>$$</p><p>因此有</p><p>$$<br>m^emod n = m^{\sum_{b_i = 1}{2^i}} mod n =<br>$$</p><p>$$<br>(( \ldots((m^{b_k})^2modn · m^{b_{k - 1}})^2mod n \ldots)^2mod n · m^{b_0}) mod n<br>$$</p><p>这就是快速取模指数算法，计算$c \equiv m^e(mod n) $的快速取模指数算法的伪代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t &lt;- <span class="number">0</span>; c &lt;- <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt;- k down to <span class="number">0</span></span><br><span class="line"><span class="keyword">do</span>t &lt;- <span class="number">2</span> × t</span><br><span class="line">    c &lt;- (c × c) mod n</span><br><span class="line">    <span class="keyword">if</span> bi = <span class="number">1</span> then t &lt;- t + <span class="number">1</span></span><br><span class="line">                   c &lt;- (c × m) mod n</span><br><span class="line"><span class="keyword">return</span> c</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-C-代码">6.C++代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line">string alphabet[<span class="number">26</span>] = &#123;</span><br><span class="line"><span class="string">&quot;00&quot;</span>, <span class="string">&quot;01&quot;</span>, <span class="string">&quot;02&quot;</span>, <span class="string">&quot;03&quot;</span>, <span class="string">&quot;04&quot;</span>, <span class="string">&quot;05&quot;</span>,</span><br><span class="line"><span class="string">&quot;06&quot;</span>, <span class="string">&quot;07&quot;</span>, <span class="string">&quot;08&quot;</span>, <span class="string">&quot;09&quot;</span>, <span class="string">&quot;10&quot;</span>,</span><br><span class="line"><span class="string">&quot;11&quot;</span>, <span class="string">&quot;12&quot;</span>, <span class="string">&quot;13&quot;</span>, <span class="string">&quot;14&quot;</span>, <span class="string">&quot;15&quot;</span>,</span><br><span class="line"><span class="string">&quot;16&quot;</span>, <span class="string">&quot;17&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;19&quot;</span>, <span class="string">&quot;20&quot;</span>,</span><br><span class="line"><span class="string">&quot;21&quot;</span>, <span class="string">&quot;22&quot;</span>, <span class="string">&quot;23&quot;</span>, <span class="string">&quot;24&quot;</span>, <span class="string">&quot;25&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">string clear_text; <span class="comment">//明文</span></span><br><span class="line">string secret_text; <span class="comment">//密文</span></span><br><span class="line"></span><br><span class="line">LL p, q;<span class="comment">//两个安全大素数</span></span><br><span class="line">LL e, n;<span class="comment">//公钥</span></span><br><span class="line">LL private_key; <span class="comment">//私钥</span></span><br><span class="line">LL Euler;<span class="comment">// 欧拉函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> group; <span class="comment">// 分组长度（这里取的是小于10的因子主要是能被整除，比较方便）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">//选择加密还是解密</span></span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; encode_Int;<span class="comment">//加密时明文数字化</span></span><br><span class="line">vector&lt;string&gt; encrypt_Int; <span class="comment">// 解密时密文数字化</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qmi</span><span class="params">(LL a, LL k, LL p)</span> <span class="comment">//快速幂求余数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_group</span><span class="params">(string s)</span> <span class="comment">// 获取分组的大小</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    group = cnt;</span><br><span class="line">    <span class="keyword">while</span>(len % cnt == <span class="number">0</span> &amp;&amp; cnt &lt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        group = cnt;</span><br><span class="line">        cnt ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> <span class="comment">// 欧几里得扩展算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL d, x1, y1;</span><br><span class="line">    d = <span class="built_in">exgcd</span>(b, a % b, x1, y1);</span><br><span class="line">    x = y1, y = x1 - a / b * y1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string s)</span> <span class="comment">// 加密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_group</span>(s);</span><br><span class="line">    LL k, d;</span><br><span class="line">    n = p * q;</span><br><span class="line">    Euler = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exgcd</span>(e, Euler, d, k); <span class="comment">// 利用欧几里得扩展算法获取私钥d</span></span><br><span class="line">    private_key = d;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;公钥为：(&quot;</span> &lt;&lt; e &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl &lt;&lt;</span><br><span class="line">    <span class="string">&quot;私钥为：(&quot;</span> &lt;&lt; private_key &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += group )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        string cnt = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(t &lt; group)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt += alphabet[s[i + t] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            t ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        encrypt_Int.<span class="built_in">push_back</span>(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t : encrypt_Int) <span class="comment">// 求加密后的c</span></span><br><span class="line">    &#123;</span><br><span class="line">        LL num, sum; <span class="comment">// 用于求加密后的cn</span></span><br><span class="line">        string c; <span class="comment">// 记录c1-cn</span></span><br><span class="line">        <span class="function">std::istringstream <span class="title">ss</span><span class="params">(t)</span></span>;</span><br><span class="line">        ss &gt;&gt; num;</span><br><span class="line">        sum = <span class="built_in">qmi</span>(num, e, n);</span><br><span class="line">        c = <span class="built_in">to_string</span>(sum);</span><br><span class="line">        <span class="keyword">while</span>(c.<span class="built_in">size</span>() &lt; group*<span class="number">2</span>) c.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        secret_text += c;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文为：&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string s)</span> <span class="comment">//解密</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init_group</span>(s);</span><br><span class="line">    n = p * q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i += group * <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> num, sum;</span><br><span class="line">        string m;<span class="comment">// 记录明文</span></span><br><span class="line">        <span class="keyword">while</span>(t &lt; group * <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp += s[i + t];</span><br><span class="line">            t ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::istringstream <span class="title">ss</span><span class="params">(tmp)</span></span>;</span><br><span class="line">        ss &gt;&gt; num;</span><br><span class="line">        sum = <span class="built_in">qmi</span>(num, private_key, n);</span><br><span class="line">        m = <span class="built_in">to_string</span>(sum);</span><br><span class="line">        <span class="keyword">while</span>(m.<span class="built_in">size</span>() &lt; group*<span class="number">2</span>) m.<span class="built_in">insert</span>(<span class="number">0</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; group*<span class="number">2</span>; j += <span class="number">2</span> ) <span class="comment">// 将每一组的数字，每两位存在encrypt_Int里面</span></span><br><span class="line">        &#123;</span><br><span class="line">            string cnt = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(t &lt; <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt += m[j + t];</span><br><span class="line">                t ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">            encrypt_Int.<span class="built_in">push_back</span>(cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t : encrypt_Int) <span class="comment">// 求解密后的m</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="function">std::istringstream <span class="title">ss</span><span class="params">(t)</span></span>;</span><br><span class="line">        ss &gt;&gt; num;</span><br><span class="line">        clear_text += (<span class="string">&#x27;a&#x27;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文：&quot;</span> &lt;&lt; clear_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请给出两个大素数p，q和公钥e&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; p &gt;&gt; q &gt;&gt; e;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入1选择加密，或者输入2选择解密&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; clear_text;</span><br><span class="line">        <span class="built_in">encrypt</span>(clear_text);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文和私钥&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text &gt;&gt; private_key;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">请给出两个大素数p，q，和公钥e</span><br><span class="line">请输入<span class="number">1</span>选择加密，或者输入<span class="number">2</span>选择解密</span><br><span class="line">请输入明文</span><br><span class="line">公钥为：(<span class="number">13</span>,<span class="number">2537</span>)</span><br><span class="line">私钥为：(<span class="number">937</span>)</span><br><span class="line">加密后的密文为：<span class="number">1692080310931943229912540724</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">请给出两个大素数p，q和公钥e</span><br><span class="line"><span class="number">43</span> <span class="number">59</span> <span class="number">13</span></span><br><span class="line">请输入<span class="number">1</span>选择加密，或者输入<span class="number">2</span>选择解密</span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密文和私钥</span><br><span class="line"><span class="number">1692080310931943229912540724</span> <span class="number">937</span></span><br><span class="line">解密后的明文：cybergreatwall</span><br></pre></td></tr></table></figure><h2 id="3-RSA-安全性">3.RSA 安全性</h2><p>RSA 在安全性方面，容易遭到因子分解发，针对参数选择中的共模攻击，低指数攻击等等等</p><p>因此需要我们加强保护意思，在防范措施上主要体现在下面两点</p><ol><li><p>密钥长度</p><p>首先,在 RSA 密钥长度方面,应以达到使得攻击者在现有计算能力条件下不可破解为基本原则，同时，选择时需要考虑被保护的数据类型、数据保护期限、威胁类型以及最可能的攻击第方面。目前大多数标准要求使用 1024 比特 RSA 密不再使用 512 比特密钥。数域筛方法是比较有效的因子分解方法，并常用于确定 RSA 密钥长度的下限。在 2000 年,Silverman 依此推断 1024 比特密钥在未来 20 年内还是安全的。但是,NIST(The NationalInstitute ofStandard and Technology)的《Key Managemen Guideline》草案中只推荐使用 RSA1024 比特长密钥来加密保存要求不超过 2015 年保密要求期限的数据,如果保密期限超过 2015 年,则建议至少使用 2048 比特长密钥。另外,也要考虑密钥长度对密钥生成、加密和解密运算效率的<br>影响</p></li><li><p>参数选择</p><p>除了需要选取足够大的大整数 n 外,对素数 p 和 q 的选取应该满足以下要求</p><ol><li>为避免椭圆曲线因子分解法,p 和 g 的长度相差不能太大。如使用 1024 比特的模数 n,则 p 和 g 的模长都大致在 512 比特左右。</li><li>p 和 q 差值不应该太小。</li><li>gcd(p-1,q-1)应该尽可能小。</li><li>p 和 q 应为强素数,即 p-1 和 q-1 都应有大的素因子。</li><li>为了防止低指数攻击,加密指数 e 和解密指数 d 都不能选取太小的数</li></ol></li></ol><h2 id="4-总结">4.总结</h2><p>关于 RSA 的优点缺点</p><p>优点：</p><ol><li>安全性高：RSA 算法基于数学难题，使得即使在今天的高性能计算机环境中，也很难进行有效的破解。因此，RSA 在保证信息安全性方面表现出色。</li><li>适用范围广：RSA 算法适用于多种应用场景，如互联网、电子邮件、数据存储等。它可以用于数据加密、数字签名、身份验证等任务。</li><li>灵活性好：RSA 算法支持多种密钥长度，可以根据实际需求选择不同的密钥长度来平衡安全性和性能。此外，RSA 还支持多种填充方案和摘要算法，具有较强的灵活性。</li></ol><p>缺点：</p><ol><li>加密和解密速度慢：相比于对称加密算法，如 AES，RSA 算法的加密和解密速度较慢。这是因为 RSA 算法需要进行大量的数学运算，尤其是在处理大块数据时。</li><li>密钥管理困难：由于 RSA 算法使用的是非对称密钥，因此需要管理两个密钥（公钥和私钥）。如果密钥丢失或被盗，可能会对信息安全造成威胁。此外，在分布式系统中，如何安全地分发和管理密钥也是一个难题。</li><li>实现成本高：RSA 算法需要使用大量的数学运算和内存资源，因此在一些资源受限的环境中，实现 RSA 算法可能会比较困难。此外，RSA 算法也需要较高的计算能力，因此在一些老旧或性能较低的设备上，可能会影响其性能表现。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA算法 </tag>
            
            <tag> 欧拉函数 </tag>
            
            <tag> 欧拉定理 </tag>
            
            <tag> 逆元 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公钥密码体制概述</title>
      <link href="/posts/8.html"/>
      <url>/posts/8.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-公钥密码体制">1.公钥密码体制</h2><p>公钥密码体制为密码学的发展提供了新的理论和技术基础,它的出现是迄今为止整个密码学发展史上最伟大的一次革命,甚至可以说没有公钥密码体制,就没有现代密码学。</p><hr><h2 id="2-公钥密码体制的提出">2.公钥密码体制的提出</h2><p><strong>对称密码体制</strong>,即解密密钥与加密密钥相同或解密密钥可由加密密钥推算出来,可以在定程度上解决保密通信的问题。但随着计算机和网络的飞速发展，保密通信的需求越来越泛.对称密码体制的局限性就逐渐显现出来，主要表现在:</p><ol><li>密钥分发问题<br>使用对称密码体制进行保密通信时,通信双方要事先通过安全的信道传递密钥，而安全信道是不易实现的。所以发送方如何安全、高效地发送密钥到接收方(通常称为初始密钥分发)是对称密码体制难以解决的问题。</li><li>密钥管理问题<br>在<code>n</code>个用户的通信网络中,使用对称密码体制实现两两保密通信,则每个用户需要和其他<code>n-1</code>个用户分别共享一个钥,而系统中的总密钥量将达到<code> n(n-1)/2</code>。当<code>n</code>较大时，这样大的密钥量,使得密钥产生、保存、传递、使用和销毁等各个管理环节都会变得很复杂,存在全隐患。</li><li>数字签名问题<br>对称密码体制中通信双方拥有同样的密钥,所以任何一方都可以生成消息的认证标签，发送方可以否认发送过某消息,即无法实现信息安全的不可否认性目标，或者说不能实现数签名功能。</li></ol><p>正是对称密码体制存在的这些局限性以及实际应用需求促使一种新的密码体制被提出。1976 年,Whitefield Diffie 和 Martin Hellman 在论文《密码学的新方向》(New DirectionsiCryptography)中提出一个设想:</p><p>用户<code>A</code>有一对密:加密密钥 $P_k$和解密密钥$S_k$公开$P_k$，保密$S_k$。若<code>B</code>要给<code>A</code>发送加密信息,他需要在公开的目录中查出<code>A</code>的公开(加密)密钥$ P_k$，用它用加密消息;A 收到密文后,用自己秘密保存的解密密钥 $S_k$解密密文,由于别人不知道 $S_k$即截获了密文,也无法恢复明文。在这种思想中,加密密钥和解密密钥是不同的，加密密钥是公开的且从加密密钥推出解密密钥是不可行的。基于这种思想建立的密码体制，被称为<strong>公钥密码体制</strong>,也叫<strong>非对称密码体制</strong>。这个设想提出之后,立刻引起密码学家的高度重视和浓厚兴趣,多种公钥密码算法相继被提出,可惜许多是不安全的,而那些被视为安全的算法又有许多不实用。直到 1978 年,美国麻省理工学院的 Rivest、Shamir 和 Adleman 3 位密码学家提出了<code>RSA</code> 公钥密码体制，很好地解决了对称密码体制所面临的问题。</p><hr><h2 id="3-公钥加密体制的思想">3.公钥加密体制的思想</h2><p>公钥密码体制，通常要使用一些计算上困难的问题。更重要的是,与只使用单一密钥的传统加密技术不同,它在加密/解密时,分别使用了两个不同的密钥:一个可对外界公开,称为公钥或公开密钥,用于加密消息;另一个只有所有者知道,称为私钥或私有密钥,用于解密消息。公钥和私钥之间具有紧密关系，但由公开密钥推导私有密钥,在计算上是不可行的。</p><p>通常情况下,公钥加密体制满足以下要求。</p><ol><li>接收方 <code>A</code>容易产生一对密钥(公钥 $P_k$和私钥$ S_k$)。</li><li>发送方<code> B</code>在知道接收方 <code>A</code>公钥 $P_k$和待加密消息<code>M </code>的情况下很容易通过加密函数计算产生对应的密文 <code>C</code>;同理,接收方收到密文 <code>C</code>后,容易用私钥和解密函数解出明文。</li><li>敌对方<code>T</code>即使知道公钥 $P_k$,要确定私钥 $ S_k$在计算上是不可行的。</li><li>敌对方<code>T</code>即使知道公钥 $P_k$和密文 <code>C</code>,要想恢复原来的消息<code> M</code> 在计算上也是不可行的。</li><li>加密、解密次序可交换,即 $E_{P_k}[D_{S_k}(M)]=D_{S_k}[E_{P_k}(M)]$。（E=解密，D=加密）</li></ol><p>最后一条不是对所有的算法都作这个要求,但非常有用。<br>公钥加密体制与陷门单向函数有关,要满足上述对公钥加密体制的要求,最终可归结为设计一个陷门单向函数。</p><p>陷门单向函数是满足下列条件的函数 <code>f</code>:</p><ol><li>正向计算容易，即如果知道密钥 <code>P</code>和消息<code>M</code>,容易计算$C=f_{P_k}(M)$;</li><li>在不知道密钥$S_k$的情况下,反向计算不可行,即如果只知道加密后的消息 <code>C</code>而不知道密钥$S_k$,则计算 $M=f^{-1}©$不可行;</li><li>在知道密钥 $S_k$的情况下,反向计算容易,即如果同时知道加密消息 <code>C</code>和密钥$S_k$,则计算 $M=f^{-1}_{S_k}©$是容易的,这里的密钥 $S_k$相当于陷门,它和 $P_k$配对使用。</li></ol><p>对于以上的条件,若仅满足(1)、(2)的函数称为<strong>单向函数</strong>。</p><p>在现实世界中,这样的例子很普遍,如将挤出的牙膏弄回管子里要比把牙膏挤出来困难得多;把盘子打碎成数片碎片很容易，但要把所有这些碎片再拼成为一个完整的盘子则很难。数学上有很多函数感觉像单向函数,能够有效地计算它们,但至今未找到有效的求逆算法。如将许多大素数相乘要比将其乘积因式分解容易得多。</p><p>第(3)条称为<strong>陷门性</strong>,其中的密钥 $S_k$:称为陷门信息。也就是说,对于陷门单向函数而言，若不知道某种附加的信息，它是一个单向函数,有了附加信息,函数的反向就容易计算出来。在现实生活中,这样的例子也不少,比如将一个手表拆分为数百个细小的零件很简单,但是若要想将这些零件重新组合起来成为一个可工作的手表却很难,这就需要知道陷门(手表的结构图及装配指令)才能完成重新组合。</p><p>公钥加密体制中的公钥用于陷门单向函数的正向(加密)计算,私钥用于反向(解密)计算。</p><hr><h2 id="4-公钥密码体制的分类">4.公钥密码体制的分类</h2><p>自 1976 年公钥密码体制的思想提出以来,国际上已经出现了许多种公钥加密体制,例如基于大整数因子分解问题的公钥加密、基于有限域乘法群上的离散对数问题的公钥加密、基于椭圆曲线上的离散对数问题的公钥加密、基于背包问题的公钥加密、基于格的短向量问题的公钥加密、基于代数编码中的线性解码问题的公钥加密等。目前应用最广的公钥加密体制主要有 3 个;<code>RSA</code>公钥加密体制,<code>EIGamal</code>公钥加密体和<code>椭圆曲线公钥加密体制</code>。</p><blockquote><p>应老师实验要求，本博客还有介绍<a href="https://www.nonevector.top/posts/9.html">RSA 公钥加密体制</a>和<a href="https://www.nonevector.top/posts/10.html">MH 背包公钥加密体制</a>,如需查看，点击直达 🤗</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公钥密码体制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>典型序列密码算法之A5</title>
      <link href="/posts/7.html"/>
      <url>/posts/7.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、A5-算法">一、A5 算法</h2><h2 id="背景">背景</h2><p><code>A5 </code>算法是 <code>GSM </code>系统中使用的加密算法之一,主要用于加密手机终端与基站之间传输的语音和数据。该算法由一个 <code>22</code> 比特长的参数(帧号码,<code>Fn</code>)和 <code>64</code> 比特长的参数(会话密钥<code>Kc</code>),生成两个<code>114</code>比特长的序列(密钥流)。这样设计的原因是<code>GSM</code>会话每含<code>228</code>比特通过与 A5 算法产生的<code> 228</code> 比特密钥流进行异或实现保密。<code>A5</code> 算法有<code> 3</code> 种版本 <code>A5/1</code> 算法限制出口,保密性较强;<code>A5/2 </code>算法没有出口限制,但保密性较弱;<code>A5/3 </code>算法则是更新的版本,它基于 <code>KASUMI</code> 算法,但尚未被<code>GSM</code>标准采用。</p><h3 id="流程-（详细）">流程 （详细）</h3><p><code>A5</code>算法是一种典型的基于线性反馈移位寄存器的序列密码算法,构成<code> A5</code> 加密器主体的<code>LFSR</code>有<code>3</code>个,组成了一个集互控和停走于一体的钟控模型。线性移位寄存器(<code>ABC</code>)的长度各不相同:<code>A</code>有<code>19</code>位,<code>B</code>有 <code>22</code>位,<code>C</code>有<code> 23</code>位,它们的移位方式都是由低位移向高位。每次移位后,最低位就要补充一位,<strong>补充的值由寄存器中的某些抽头位进行异或运算的结果决定</strong>,如运算的结果为<code>“1”</code>,则补充<code>“1”</code>,否则补充<code>“0”</code>。在 3 个 LFSR 中 A 的抽头位置为 <code>18,17,16,13</code>;<code>B</code>的抽头位置为<code> 21,20,16,12</code>;C 的抽头位置为 <code>22,21,18,17</code>。<code>3</code>个<code>LFSR</code>输出的异或值作为<code> A5</code>算法的输出。<code>A5</code>算法的主体部分如图 5-26 所示。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/31/169037_f5c36a9d77-1.png" alt="1.png"></p><p>这 <code>3</code>个<code> LFSR</code> 的移位是由时钟控制的,且遵循“服从多数”的原则。即从每个寄存器中取出一个中间位(图<code>5-26</code>中的<code>xyz</code>,位置,分别为 <code>ABC</code>的第<code> 9</code>,<code>11</code>,<code>11</code>位)进行运算判断,若在取出的<code>3</code>个中间位中至少有<code> 2</code>个为<code>“1”</code>,则为<code>“1”</code>的寄存器进行一次移位,而为<code>“0”</code>的不移反过来,若<code>3</code>个中间位中至少有 <code>2</code>个为<code>“0”</code>,则为<code>“0”</code>的寄存器进行一次移位，而为<code>“1”</code>的不移。</p><p>显然，这种机制保证了每次至少有 <code>2</code>个 <code>LFSR</code> 被驱动移位。一个<code>GSM</code>消息被转换成一系列的帧，每帧具有 <code>228</code>位。<code>A5</code>算法在会话密<code>Kc</code>和数<code>Fn</code> 的作用下输出相应的密钥序列,与<code>GSM</code>消息逐比特的异或,完成对消息的加密，如图 5-27 所示。</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/31/169037_f89bc2f177-2.png" alt="2.png"></p><h3 id="流程（总结）">流程（总结）</h3><p><strong>1.原始密钥:</strong></p><p>A5 算法的输入为<strong>22bit</strong>长的<strong>帧序号</strong> $F_n$和<strong>64bit</strong>长的<strong>密钥</strong> $K_c$，<strong>输出为 228bit 的流密钥序列</strong>。</p><p><strong>2. A5 算法的构成：</strong></p><p>A5 算法由<strong>3 个 m 序列 LFSR 构成</strong>，这三个 LFSR 的<strong>级数分别为 19、22、23</strong>。其特征多项式分别为：</p><ul><li>LFSR1： $g_1(x) = x^{19} + x^{18} + x^{17} + x^{14} + 1$</li><li>LFSR2： $g_2(x) = x^{22} + x^{21} + x^{17} + x^{13} + 1$</li><li>LFSR3： $g_3(x) = x^{23} + x^{22} + x^{19} + x^{18} + 1$</li></ul><p><strong>3、流密钥序列的产生过程：</strong></p><p>A5 算法流密钥序列的产生包含<strong>初始化</strong>和<strong>不规则动作</strong>两个阶段。</p><p><strong>（1）初始化阶段：</strong></p><p>首先将 3 个 LFSR 的初始状态全设为 0。</p><p>然后在 64bit 密钥 $K_c$的作用下，3 个 LFSR 分别移位<strong>64 次</strong>。每次（假设第 i 次）移位时，反馈函数计算的结果需要先与$K_c$的第 i 位进行异或，然后才作为反馈结果填充到每个 LFSR 的最末端。</p><p>之后在 22bit 帧序号$F_n$ 的作用下，3 个 LFSR 分别移位<strong>22 次</strong>。每次（假设第 i 次）移位时，反馈函数计算的结果需要先与 $F_n$ 的第 i 位进行异或，然后才作为反馈结果填充到每个 LFSR 的最末端。</p><p>初始化阶段的目的是给三个 LFSR 提供随机性良好的非全零的初始状态，为后面产生流密钥做准备。</p><p><strong>（2）不规则动作阶段：</strong></p><p>接下来的阶段中，需要时钟脉冲来控制 3 个 LFSR 进行移位输出。</p><p>所谓不规则动作，就是指 3 个 LFSR 的移位是不规则的。A5 算法采取的方法是，分别从 LFSR1、LFSR2、LFSR3 中选取<strong>第 9 位</strong>、<strong>第 11 位</strong>、<strong>第 11 位</strong>作为<strong>检测位</strong>（分别<strong>记为 x，y，z</strong>），进行钟控移位。移位规则是：<strong>多数移位，少数不移位</strong>。假如 x、y、z 中至少有 2 个为“1”，则为“1”的 LFSR 移位一次，为“0”的不移位；假如 x、y、z 中至少有 2 个为“0”，则为“0”的 LFSR 移位一次，为“1”的不移位。这种机制保证了每次时钟脉冲到来时，至少有 2 个 LFSR 移位。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/31/169037_0feb609377-3.png" alt="3.png"></p><p>采取这种移位方法，A5 算法的不规则动作阶段的具体流程为：</p><p>加密</p><ul><li>1、在时钟脉冲的作用下，3 个 LFSR 采取上述移位方式，动作<strong>100 次</strong>，但不输出。</li><li>2、在时钟脉冲的作用下，3 个 LFSR 采取上述移位方式，动作<strong>114 次</strong>，产生输出。每次动作后，<strong>先对产生的 3 个输出进行异或，然后作为流密钥序列的一位</strong>。</li><li>3、在时钟脉冲的作用下，3 个 LFSR 采取上述移位方式，再次动作<strong>100 次</strong>，不输出。</li></ul><p>解密</p><ul><li><p>三个 LFSR 以钟控方式连续动作 100 次，但不输出密钥流；</p></li><li><p>三个 LFSR 以钟控方式连续动作 114 次，在每次动作后，三个 LFSR 都 将最高级寄存器中的值输出，这三个比特的模 2 和就是当前时刻输出的 1 比 特密钥流。</p></li><li><p>连续动作 114 步，共输出 114 比特密钥流，这 114 比特用于对基站到用户手机 传送的 114 比特数据的解密。</p></li></ul><p>如下图</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/31/169037_f5c36a9d77-1.png" alt="1.png"></p><p>4、加解密方式：</p><p>同其他流密码加密方式相同，A5 算法也是直接将明文与产生的流密钥序列进行按位异或，得到密文。密文与流密钥序列异或后，也可得到明文。</p><p>GSM 消息通常使用 A5 算法<strong>对每个会话分别加密</strong>，其每个会话的长度为 224bit，与 A5 算法流密钥序列长度相同，因此加密方式就是简单地异或。如下图所示，对于每帧会话，A5 算法的输入$F_n$是有变化的。</p><h2 id="C-代码">C++代码</h2><blockquote><p>下面代码介绍了生成比特密钥流的例子！！</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">256</span>; <span class="comment">/*循环次数*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*A、B、C三个线性移位寄存器*/</span></span><br><span class="line"><span class="type">int</span> A[<span class="number">19</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">int</span> B[<span class="number">22</span>] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">int</span> C[<span class="number">23</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lfsr</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d, <span class="type">int</span> T[])</span><span class="comment">/*移位寄存器函数*/</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = d; i &gt; <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line">T[i] = T[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">T[<span class="number">0</span>] = T[a] ^ T[b] ^ T[c] ^ T[d];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//分别从LFSR1、LFSR2、LFSR3中选取第9位、第11位、第11位作为检测位</span></span><br><span class="line"><span class="comment">//钟控移位规则是：多数移位，少数不移位</span></span><br><span class="line"><span class="type">int</span> j = A[<span class="number">9</span>] + B[<span class="number">11</span>] + C[<span class="number">11</span>];</span><br><span class="line"><span class="comment">/*j可能等于0-3之间*/</span></span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 三个比特的异或就是当前时刻输出的1比特密钥。</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (A[<span class="number">18</span>] ^ B[<span class="number">21</span>] ^ C[<span class="number">22</span>]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, A);</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, B);</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">22</span>, C);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (A[<span class="number">18</span>] ^ B[<span class="number">21</span>] ^ C[<span class="number">22</span>]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (A[<span class="number">9</span>] == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, A);</span><br><span class="line"><span class="keyword">if</span> (B[<span class="number">11</span>] == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, B);</span><br><span class="line"><span class="keyword">if</span> (C[<span class="number">11</span>] == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">22</span>, C);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (A[<span class="number">18</span>] ^ B[<span class="number">21</span>] ^ C[<span class="number">22</span>]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (A[<span class="number">9</span>] == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, A);</span><br><span class="line"><span class="keyword">if</span> (B[<span class="number">11</span>] == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, B);</span><br><span class="line"><span class="keyword">if</span> (C[<span class="number">11</span>] == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">22</span>, C);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (A[<span class="number">18</span>] ^ B[<span class="number">21</span>] ^ C[<span class="number">22</span>]) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">13</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, A);</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, B);</span><br><span class="line"><span class="built_in">lfsr</span>(<span class="number">17</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">22</span>, C);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p><code>A5</code>算法的初始密钥长度为<code>64</code> 比特。为了对该算法进行攻击，已知明文攻击法只需要确定其申两个寄存器的初始值就可以计算出另一个寄存器的初始值，这说明政击 <code>A5</code>一般要用$2^{40}$次尝试来确定两个寄存器的结构，而后从密钥流来决定第<code>3</code>个 <code>LFSR</code>。<code>A5</code> 的设计思想优秀,效率高,可以通过所有已知统计检验标准。其唯一缺点是移位寄存器级数短、其最短循环长度为$4/3\times 2^k$(<code>k</code>是最长的<code>LFSR </code>的级数)总级数为<code>19十22+23=64</code>，这样就可以用穷尽搜索法破译,如果 <code>A5</code>算法能够采用更长的、抽头更多的线性反馈移位寄存器,则会更为安全 。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GSM </tag>
            
            <tag> A5算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>典型序列密码算法之RC4</title>
      <link href="/posts/6.html"/>
      <url>/posts/6.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、RC4-算法介绍">一、RC4 算法介绍</h2><p><code>RC4</code>是由麻省理工学院的 Rivest 开发的,他也是<code>RS4</code>的开发者之一。<code>RC4</code> 的突出优点是在软件中很容易实现。<code>RC4 </code>可能是世界上使用最广泛的序列密码,它已应用于 MicrosoftWindows、Lotus Notes 和其他软件应用程序中,应用于安全套接字层(SSL,Secure SocketsLayer)以保护因特网的信息流，还应用于无线系统以保护无线链路的安全等。</p><p><code>RC4 </code>是一个典型的基于非线性数组变换的序列密码。它以一个足够大的数组为基础,对其进行非线性变换，产生密钥序列，一般把这个大数组称为<code> S</code>盒。<code>RC4</code>的<code>S</code>盒大小随参数<code>n</code>的值变化而变化,理论上来说,<code>S</code>盒长度为 $N=2^n$”个元素,每个元素<code>n</code>比特。通常<code>n=8</code>,这也是本书示例所选取值,此时,生成共有$ 256(=2^8)$个元素的数组 <code>S</code>。<code>RC4</code> 包含两个处理过程:一个是密钥调度算法(<code>KSA</code>,Key-Scheduling Algorithm),用来置乱<code>S</code>盒的初始排列;另一个是伪随机生成算法(<code>PRGA</code>,Pseudo RandomGeneration Algorithm)用来输出随机序列并修改<code>S</code>的当前排列顺序</p><h3 id="流程">流程</h3><ol><li><code>KSA</code>首先初始化<code>S</code>,即<code>S[i]=i(i=0~255)</code>,同时建立一个临时数组向量 <code>T(|T|=256)</code>,如果种子密钥<code>K</code>的长度为 <code>256</code> 字节(<code>|K|=256</code>),则直接将 <code>K</code> 赋给<code>T</code>,否则,若种子密钥<code>K</code>的长度(记为<code>|K|</code>)小于<code>|T|</code>,则将<code>K</code>的值赋给<code>T</code>的前<code>|K|</code>个元素,并不断重复加载<code>K</code>的值直到<code> T</code>被填满。这些操作可概括如下:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span> to <span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">begin</span><br><span class="line">    S[i]:=i;</span><br><span class="line">    T[i]:=k[i mod |K|];</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol start="2"><li>然后用<code>T</code>产生<code>S</code>的初始置换,从 <code>S[O]</code>到 <code>S[255]</code>,对每个<code>S[i]</code>,根据 <code>T</code>的值将<code>S[i]</code>与<code>S</code>中的另一个字节对换。概括如下:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">j:=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">0</span> to <span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">begin</span><br><span class="line">    j:=(j + S[i] + T[i]) (mod <span class="number">256</span>);</span><br><span class="line"><span class="built_in">swap</span>(S[i], S[j]); <span class="comment">// 交换s[i]和s[j]</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol start="3"><li>因为对<code>S</code>的操作仅是交换,所以唯一的改变就是位置,<code>S</code>仍然遍历<code>0~255 </code>的所有元素最后,利用 <code>PRGA</code>生成密钥流。从<code>S</code>中随机选取一个元素输出，并置换 <code>S </code>以便下一次取，选取过程取决于索引<code>i</code>和<code>j</code>,下面描述选取密钥序列的过程:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i,j:=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    i:=i + <span class="number">1</span>(mod <span class="number">256</span>);</span><br><span class="line">j:= j + S[i](mod <span class="number">256</span>);</span><br><span class="line"><span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">t:= S[i] + S[j] (mod <span class="number">256</span>);</span><br><span class="line">k := S[t];</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ol start="4"><li>加密时，将<code>k</code>的值与明文字节异或;解密时,将 <code>k</code>的值与密文字节异或。</li></ol><h3 id="RC4-的逻辑结构（例子）">RC4 的逻辑结构（例子）</h3><ol><li>下面以元素长为<code>3</code>比特(即<code>n=3</code>)的<code>RC4</code> 为例来演示它的工作过程。显然,<code>3</code>位<code>RC4</code>的所有操作是对$2^3=8$取模。数组 S 只有$2^3=8$个元素,初始化为:</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_159d6b1277-1.png" alt="1.png"></p><ol start="2"><li>接着选取一个密钥,该密钥是由 <code>0~7</code>的数以任意顺序组成的。例如,选取<code>5、6、7</code>作为密钥。该密钥如下填人临时数组<code> T</code>中:</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_17d8cc0a77-2.png" alt="2.png"></p><ol start="3"><li>然后执行 <code>S</code>数组的初始置换,以<code>i=0</code>和<code>j=0</code>开始。使用更新公式后，<code>j</code>为:</li></ol><p>$$<br>\begin{aligned}<br>j &amp;= [0 + S(0) + T(0)](mod 8) \<br>&amp; = (0 + 0 + 5) mod 8 \<br>&amp; = 5<br>\end{aligned}<br>$$</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_18fb7db877-3.png" alt="3.png"></p><ol start="4"><li>因此,<code>S</code>数组的第一个操作是将 <code>S(0)</code>与 <code>S(5)</code>互换</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_1bf64f7f77-4.png" alt="4.png"></p><ol start="5"><li>索引<code>i</code>加<code>1</code>后，<code>j</code>的下一个值为:</li></ol><p>$$<br>\begin{aligned}<br>j &amp;= [5 + S(1) + T(1)](mod 8) \<br>&amp; = (5 + 1 + 6) mod 8 \<br>&amp; = 4<br>\end{aligned}<br>$$</p><ol start="6"><li>即将<code>S</code>数组的<code>S(1)</code>与<code>S(4)</code>互换:</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_1f7df32877-5.png" alt="5.png"></p><ol start="7"><li>当该循环执行完后,数组 <code>S</code>就被随机化:</li></ol><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_232136a977-6.png" alt="6.png"></p><ol start="8"><li>下面数组 <code>S</code>就可以用来生成随机数序列了。从<code>j=0</code>和<code>i=0</code>开始,<code>RC4</code> 计算第一个随机数的过程如下:</li></ol><p>$$<br>i = (i + 1) mod 8 = (0 + 1) mod 8 = 1 \<br>j = [j + S(i)]mod 8 = [0 + S(1)]mod 8 = [0 + 4]mod 8 = 4\<br>swap(S(1), S(4))<br>$$</p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/30/169037_25f0625177-7.png" alt="7.png"></p><ol start="9"><li>然后计算和<code>k</code>:</li></ol><p>$$<br>t=[S(j)+S(i)]mod8 =[S(4)+S(1)]mod 8=(1+4)mod8=5\<br>k=S(t)=S(5)=6<br>$$</p><ol start="10"><li>第一个随机数为 <code>6</code>,其二进制表示为<code> 110</code>。反复进行该过程,直到生成的密钥序列长度等于明文的长度。</li></ol><h2 id="二、C-代码">二、C++代码</h2><h3 id="代码">代码</h3><blockquote><p>核心代码上面的伪代码给过了，这里直接带进去就行了（￣︶￣）↗</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在C++中，char类型通常被视为有符号类型，其取值范围为-128到127</span></span><br><span class="line"><span class="comment">//无符号整数的取值范围为0到255</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>]; <span class="comment">// S盒子</span></span><br><span class="line"></span><br><span class="line">string text; <span class="comment">// 明文密文统一用text</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">// KSA初始化S盒</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> key_len = secret_key.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> T[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 临时数组向量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        s[i] = i;</span><br><span class="line">        T[i] = secret_key[i % key_len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">256</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + s[i] + T[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt_encode</span><span class="params">()</span> <span class="comment">// 加密或者解密都是再次经过这个函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> len = text.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k, i = <span class="number">0</span>, j = <span class="number">0</span>, t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> h = <span class="number">0</span>; h &lt; len; h ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line"><span class="built_in">swap</span>(s[i], s[j]);</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">k = s[t];</span><br><span class="line">text[h] ^= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; text;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; secret_key;</span><br><span class="line">    <span class="built_in">encrypt_encode</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文：&quot;</span> &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">encrypt_encode</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文：&quot;</span> &lt;&lt; text &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="结果">结果</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入明文</span><br><span class="line"><span class="number">123</span></span><br><span class="line">请输入密钥</span><br><span class="line"><span class="number">123</span></span><br><span class="line">加密后的密文：b聦</span><br><span class="line">解密后的明文：<span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="三、小结">三、小结</h2><ol><li>加密时,将 <code>k</code>的值与明文字节异或;解密时,将<code>k </code>的值与密文字节异或。</li><li>为了保证安全强度,目前的 <code>RC4</code> 至少使用<code> 128</code> 位密,以防止穷举搜索攻击。</li><li><code>RC4</code> 算法可看成一个有限状态自动机,把 <code>S</code>表和索引的具体取值称为<code> RC4</code>的一个状态:$T=(S_0,S_1…S_{255},i,j)$。对状态 <code>T</code>进行非线性变化,产生出新的状态,并输出密钥序列中的一个字节<code>k</code>,大约有$ 2^{1700}(256! \times 256^2)$种可能状态。</li><li>用大的数据表 <code>S </code>和字长来实现这个思想是可能,如可定义 <code>16</code> 位<code> RC4</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RC4密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古典密码</title>
      <link href="/posts/5.html"/>
      <url>/posts/5.html</url>
      
        <content type="html"><![CDATA[<h2 id="古典密码">古典密码</h2><p>从远古到 1949 年香农发表《保密系统的通信理论》，这期间人类所使用的密码均称为古典密码，本文主要介绍三种古典密码，分别为置换密码，代换密码和轮换密码。</p><blockquote><p>为了写 c++代码图个方便，下面的代码（大部分）都没有强调大小写 <s>因为懒</s>,但是不影响密码的基本思路<s>因为明文密钥之类的都是 String 类型，直接强行转大写或者小写就行</s></p></blockquote><h2 id="一、置换密码（列置换）">一、置换密码（列置换）</h2><p>置换密码（Permutation Cipher)又叫换位密码（Transposi-tionCipher)，它根据一定的规则重新排列明文，以便打破明文的结构特性。置换密码的特点是保持明文的所有字符不变，只是利用置换打乱了明文字符的位置和次序。<br>最常见的置换密码有两种：</p><ul><li>列置换密码（明文 P 遵照密钥的规程按列换位并且按列读出序列得到密文 C）；</li><li>周期置换密码（将明文 P 按固定长度 m 分组，然后对每组按 1，2…，m 的某个置换重排位置从而得到密文 C）。</li></ul><h3 id="定义">定义</h3><ul><li>有限集<code>X</code>上的运算<code>σ</code>：<code>X</code>→<code>X</code>被称为一个置换，则<code>σ</code>是一个双射函数，即<code>σ</code>即时单射又是满射，并且<code>σ</code>的定义域和值域相同</li><li>即任意 x∈X,存在唯一的 x’∈X，使得 σ(x)=x’</li><li>解密的时候会用到逆置换$σ^{-1}$</li><li>即任意 x’∈X,存在唯一的 x∈X，使得$σ^{-1}(x’)=x$</li><li>从置换 σ 和逆置换$σ^{-1}$的定义可以看出得，若$σ^{-1}(x’)=x$，当且仅当$σ(x)=x’$，并且满足$σσ^{-1}=I=(1)$</li></ul><p><s>有点晕，那么就直接看例子</s><br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_1581438074-4.jpg" alt="4.jpg"><br>最后给出公式若置换为 ~~ 其实找规律也看得出~~</p><p>$$<br>σ=(x_{11}x_{12}x_{13}···x_{1(l-1)}x_{1l})···(x_{m1}x_{m2}x_{m3}···x_{m(n-1)}x_{mn})<br>$$</p><p>相应的逆置换位</p><p>$$<br>σ=(x_{11}x_{1l}x_{1(l-1)}···x_{13}x_{12})···(x_{m1}x_{mn}x_{m(n-1)}···x_{m3}x_{m2})<br>$$</p><h3 id="1-1-列置换">1.1 列置换</h3><h4 id="介绍-列置换">介绍(列置换)</h4><blockquote><p>这里只介绍列置换 <s>还有周期置换，但是都大差不差</s><br>列置换密码，顾名思义，按列换位并且按列读出明文序列得到密文，具体加密步骤如下</p></blockquote><ol><li>将明文<code>p</code>以固定分组长度 m 按行写出<code>nxm</code>阶矩阵（若不<code>m</code>倍数，空余部分空格<code>·</code>补充）</li><li>按<code>（1,2,3…m）</code>的置换<code>σ</code>交换列的位置,<code>σ</code>为密钥</li><li>把新得到的矩阵按列的顺序依次读出得到密文<code>c</code><br>解密过程如下</li><li>将密文<code>c</code>以固定的长度<code>n</code>按列写成<code>nxm</code>阶矩阵</li><li>按逆矩阵 $ σ^{-1} $ 交换列的位置</li><li>把矩阵按着行依次读出为明文</li></ol><p>大概意思看下图例子<br>这里解释一下加密：<br><code>(143)(56)</code>的意思是第<code>1</code>列和第<code>4</code>列交换，交换后的第<code>4</code>列和第<code>3</code>列换（即原本的第<code>1</code>列和第<code>3</code>列交换），第<code>5</code>列和第<code>6</code>列交换，即可<br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_46bfe9a874-1.jpg" alt="1.jpg"><br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_4923c98874-2.jpg" alt="2.jpg"></p><h4 id="C-源码">C++源码</h4><blockquote><p>纯模拟暴力写的，有时间再优化</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>; <span class="comment">// 暂定最大矩阵110</span></span><br><span class="line"></span><br><span class="line">string clear_matrix[N][N]; <span class="comment">// 明文的矩阵</span></span><br><span class="line">string secret_matrix[N][N]; <span class="comment">// 密文后的矩阵</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断是用与加密还是解密</span></span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">// 矩阵的n和m</span></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap_matrix</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// 交换第a列和第b列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(clear_matrix[i][a], clear_matrix[i][b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(secret_matrix[i][a], secret_matrix[i][b]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string a, string b, <span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(a[t] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                t ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">            clear_matrix[i][j] = a[t ++ ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(b[l] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; b[r] != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r ++ ;</span><br><span class="line">        <span class="keyword">if</span>(b[r] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = l + <span class="number">1</span>; i &lt; r - <span class="number">1</span>; i ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap_matrix</span>(b[i] - <span class="string">&#x27;0&#x27;</span>, b[i + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r ++ ;</span><br><span class="line">            l = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;以下是加密后的结果（＞人＜；）&quot;</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; clear_matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decode</span><span class="params">(string a, string b, <span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, t = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            secret_matrix[i][j] = a[t ++ ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = b.<span class="built_in">size</span>(), r = b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(b[r - <span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; b[l - <span class="number">1</span>] != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l -- ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(b[l - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = r - <span class="number">2</span>; i &gt; l; i -- )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap_matrix</span>(b[i] - <span class="string">&#x27;0&#x27;</span>, b[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            r = l - <span class="number">1</span>;</span><br><span class="line">            l = r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;以下是解密后的结果  (^^ゞ&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; secret_matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;如果需要加密选择1， 解密选择2    －O－&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请依次输入明文，密钥，以及矩阵大小n,m   \(@^0^@)/&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">getline</span>(cin, cleartext);</span><br><span class="line">        <span class="built_in">getline</span>(cin, cleartext);</span><br><span class="line">        cin &gt;&gt; secret_key;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext, secret_key, n ,m);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请依次输入密文，密钥，以及矩阵大小n,m   \(@^0^@)/&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">getline</span>(cin, secret_text);</span><br><span class="line">        <span class="built_in">getline</span>(cin, secret_text);</span><br><span class="line">        cin &gt;&gt; secret_key &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">decode</span>(secret_text, secret_key, n ,m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果截图<br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_3c0d15da74-1.png" alt="1.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_3e65aa7474-2.png" alt="2.png"></p><h3 id="1-2-周期置换">1.2 周期置换</h3><h4 id="介绍">介绍</h4><p>周期置换密码是将明文 <code>p</code> 串按固定长度 m 分组，然后对每组中的字串按 1,2,3…,m 的某个置换重新排列位置从而得到密文，其中密钥<code>σ</code>包含分组长度信息。解密同样对密文<code>c</code>按长度<code>m</code>分组，并按<code>σ</code>的在逆置换$ σ^{-1} $把每组子串重新排列位置从而得到明文<code>p</code><br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_bb065e8374-3.jpg" alt="3.jpg"></p><h4 id="C-源码-2">C++源码</h4><blockquote><p>代码和列置换的一样就行 <s>就是速度不行 😪</s><br>注意一下输入就行，这里直接贴结果图<br><img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_aca1c21f74-3.png" alt="3.png"> &gt; <img src="https://cdn.acwing.com/media/article/image/2023/10/27/169037_af9cd43a74-4.png" alt="4.png"></p></blockquote><h2 id="二、代换密码">二、代换密码</h2><h3 id="1-单表代换密码">1. 单表代换密码</h3><p>单表代换密码指明文消息中相同的字母,在加密时都使用同一固定的字母来代换。单表代换密码又分为移位密码、基于密钥的单表代换密码和仿射密码 3 类,由于移位密码可以看作仿射密码的特例,所以下面只介绍基于密钥的单表密码和仿射密码。</p><h4 id="1-1-基于密钥的单表代换密码">1.1 基于密钥的单表代换密码</h4><h5 id="介绍-2">介绍</h5><p>1.基于密钥的单表代换密码<br>基于密钥的单表代换密码很多,其基本思想是类似的,下面通过一个具体实例来介绍单表代换密码。首先选取一个英文单词或字母串作为密钥,去掉其中重复的字母得到一个无重复字母的字母序列，然后将字母表中的其他字母按字母顺序依次写在此字母序列后面,如果密钥中的字母序列有重复则后出现的字母不再出现,从而使所有的字母建立一一对应关系,也就是字母代换表。这种单表代换密码破译的难度稍高,而且密钥更改便捷,因此增加了单表代换密码体制的灵活性。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/28/169037_92105d1e75-5.jpg" alt="5.jpg"></p><h5 id="C-源码-3">C++源码</h5><blockquote><p>大小写和上面的图片比太一样，但应该不是什么大问题 <s>才不是懒</s></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line">string clear_key; <span class="comment">// 明钥（用于解密）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"><span class="type">char</span> encrypt_list[<span class="number">26</span>];</span><br><span class="line"><span class="type">char</span> encode_list[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_encrypt_list</span><span class="params">(string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        encrypt_list[i] = i + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        encrypt_list[b[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(encrypt_list, encrypt_list + <span class="number">26</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        encrypt_list[i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_encode_list</span><span class="params">(string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        encode_list[encrypt_list[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;a&#x27;</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文是：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; encrypt_list[a[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string a, string b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_encode_list</span>(b); <span class="comment">// 获取解密代换表</span></span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文是：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; encode_list[a[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; secret_key;</span><br><span class="line">    <span class="built_in">get_encrypt_list</span>(secret_key); <span class="comment">// 获取加密代换表</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext, secret_key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text, secret_key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line">请输入密钥</span><br><span class="line">iscbupt</span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入明文</span><br><span class="line">cybergreatwall</span><br><span class="line">加密后的密文是：</span><br><span class="line">cysuntnuiqwigg</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">请输入密钥</span><br><span class="line">iscbupt</span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密文</span><br><span class="line">cysuntnuiqwigg</span><br><span class="line">解密后的明文是：</span><br><span class="line">cybergreatwall</span><br></pre></td></tr></table></figure><h4 id="1-2-仿射密码">1.2 仿射密码</h4><h5 id="介绍-3">介绍</h5><p>仿射密码的加密算法就是一个线性变换,即对任意的明文字符<code>x</code>,对应的密文字符为 $y≡e(x)≡ax+b(mod 26)$,其中$a,b∈ Z_{26 }$,且要求 $gcd(a,26)=1$,函数 <code>e(x)</code>称为仿射加密函数。</p><ol><li><p>仿射加密函数要求 $gcd(a,26)=1$,即要求 <code>a </code>和<code> 26</code> 互素,否则$ e(x)≡ax+b(mod 26)$就不是一个单射函数。例如，当 $gcd(8,26)=2$ 时,因为对 x∈$Z_{26 }$,$8(x+13)+5=8x+109≡8x+5 (mod 26)$,所以和<code>x</code>和<code>x+13</code> 将被加密为相同的密文。故$ e(x)≡ 8x 十 5(mod 26)$不是一个有效的仿射加密函数。而当 $gcd(a,26)=1$ 时,仿射加密函数的解必然唯一。</p><blockquote><p>证明如下:</p><p>设存在 $x_1,x_2∈Z_{26}$,使得 $e(x)≡ ax_1 +b≡ax_2+b(mod 26)$,则必然有 $ax_1 ≡ax_2(mod 26)$,从而可以得到整除式 $26|a(x_1-x_2)$;又因为 $gcd(a,26)=1$,所以得 $26(x_1-x_2)$,由题设知 $x_1,z_2 ∈ Z*{26} $,所以必然得结论 $x_1 = x_2$。综上可知,前提 gcd(a,26)=1 保证了仿射加密函数是一个双射函数。</p></blockquote></li><li><p>当 <code>a=1</code>,<code>b=3</code> 时,这种仿射密码就是著名的恺撒密码。</p></li></ol><p>由仿射加密函数可以看出仿射加密的密钥空间大小为 <code>12×26=312</code>。因为由 $b∈ Z_{26} $ 知,<code>b </code>有 0,1…25 共 26 种不同取值;而 $a∈ Z_{26} $ 且 $gcd(a,26)=1$,由欧拉函数易知 <code>a </code>的取值个数是 $φ (26)=φ (2×13)=φ (2)×φ (13)=1×12=12$,即 1,3,5,7,9,11,15,17,19,21,23,25。<br>由仿射加密函数 $e(x)≡ ax+b(mod 26)$可得 $ax ≡ e(x)-b(mod 26)$,因为 $gcd(a,26)=1$,可知 <code>a</code> 在$Z_{26}$ 上一定存在乘法逆元 $a^{-1}∈ Z_{26} $,使得 $aa^{-1}≡1(mod 26)$。在$ ax ≡ e(x)-b(mod 26)$两边同时左乘$a^{-1}$得$a^{-1}ax≡(a^{-1}-a)x≡x≡a^{-1}(e(x)-b)(mod 26)$,由此可得仿射加密的逆变换,即仿射解密函数为$x≡d(e(x))≡a^{-1}(e(x)-b)(mod 26)$。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/28/169037_6683232c75-5.png" alt="5.png"></p><p><img src="https://cdn.acwing.com/media/article/image/2023/10/28/169037_c07af67175-6.jpg" alt="6.jpg"></p><h5 id="C-源码-4">C++源码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (1-26) 内与26互素元素的乘法逆元</span></span><br><span class="line"><span class="type">int</span> multiplicative_inverse[<span class="number">26</span>] =</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">7</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">11</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">25</span>&#125;;</span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line">string clear_key; <span class="comment">// 明钥（用于解密）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"><span class="type">int</span> a, b; <span class="comment">//仿射加密函数的a,b</span></span><br><span class="line"><span class="type">int</span> tmp[N]; <span class="comment">//用于存放明文字母转换后的数字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i] = (a * (m[i] - <span class="string">&#x27;a&#x27;</span>) + b) % <span class="number">26</span>;</span><br><span class="line">        cout &lt;&lt; (<span class="type">char</span>)(tmp[i] + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ma = multiplicative_inverse[a];<span class="comment">// a乘法逆元的ma</span></span><br><span class="line">    <span class="comment">// 求mb的时候因为要-b，c++在mod的时候需要注意比如说（-6mod26）=-6</span></span><br><span class="line">    <span class="comment">//所以需要在加一次26再mod</span></span><br><span class="line">    <span class="type">int</span> mb = (((-b) * ma) % <span class="number">26</span> + <span class="number">26</span>) % <span class="number">26</span>;</span><br><span class="line">    <span class="type">int</span> len = m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i] = (ma * (m[i] - <span class="string">&#x27;A&#x27;</span>) + mb) % <span class="number">26</span>;</span><br><span class="line">        cout &lt;&lt; (<span class="type">char</span>)(tmp[i] + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入仿射加密函数的a,b&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">请输入仿射加密函数的a,b</span><br><span class="line"><span class="number">11</span> <span class="number">6</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入明文</span><br><span class="line">sorcery</span><br><span class="line">获取的密文</span><br><span class="line">WELCYLK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">请输入仿射加密函数的a,b</span><br><span class="line"><span class="number">11</span> <span class="number">6</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密文</span><br><span class="line">WELCYLK</span><br><span class="line">获取的明文</span><br><span class="line">sorcery</span><br></pre></td></tr></table></figure><h3 id="2-多表代换密码">2. 多表代换密码</h3><p>多表代换密码是以一系列代换表依次对明文消息的字母序列进行代换的加密方法,即明文消息中出现的同一个字母,在加密时不是完全被同一固定的字母代换,而是根据其出现的位置次序用不同的字母代换。如果代换表序列是非周期的无限序列,则相应的密码称为<strong>非周期多表代换密码</strong>,这类密码对每个明文都采用了不同的代换表进行加密,故称为一次一密密码.它是<strong>理论上</strong>不可破译的密码体制。但实际应用中经常采用的是<strong>周期多表代换密码</strong>,它通常使用有限个代换表,代换表被重复使用以完成消息的加密,它是一种比单表密码体制更为安全的密码体制。<br>不妨设明文序列为$m=m_1m_2$···,代换表序列为 $\pi=\pi_1,\pi_2,···,\pi_d,\pi_1,\pi_2,···,\pi_d,··· $则使用周期为<code>d</code>的代换序列(加密密)加密明文序列<code>m</code>得密文序列为:</p><p>$$c=\pi(m)=\pi_1(m_1),\pi_2(m_2),···,\pi_d(m_d),\pi_1(m_{d+1}),\pi_2(m_{d+2}),···,\pi_d(m_{2d}),···$$</p><p>显然,当<code>d=1</code>时,多表代换密码退化为单表代换密码。<br>多表代换密码利用从明文字符到密文字符的多个映射隐藏单字母出现的统计特性(频率特性)。它将明文字符划分为长度相同的明文组,然后再对明文组进行替换。这样同一字母在明文序列中的位置不同就具有不同的密文,从而能更好地抵抗统计密码分析。<br>多表代换密码体制有很多，常见且比较典型的有 3 种:<code>Playfair </code>密码<code>Vigenere</code> 密码和<code>Hill</code> 密码。</p><h4 id="2-1-Playfair-密码">2.1 Playfair 密码</h4><h5 id="介绍-4">介绍</h5><p><code>Playfair </code>密码(Playfair Cipher)是 1854 年由 Charles Wheatstone 提出的,此后由他的朋友 Lyon Playfair 将该密码公布，所以就称为<code> Playfair</code> 密码<br><code>Playfair</code> 密码将明文字母按两个字母一组分成若干个单元,然后将这些单元替换为密文字母组合,替换时基于一个<code>5X5</code>字母矩阵,该矩阵使用一个选定的关键词来构造,其构造方法如下:从左到右,从上到下依次填入关键词的字母,若关键词中有重复字母,则<strong>第二次出现时略过</strong>,然后将字母表中剩下的字母按字母顺序依次填入矩阵中,其中字母<code>i</code>和<code>j</code>看作是同一个字符（PS：25 的矩阵只能存储 25 个字母）。同时约定如下规则:表中的第一列看作是第五列的右边一列,第一行看作是第五行的下一行。</p><p>对每一对明文字母$p_1,p_2$:、加密时根据它们在 <code>5X5 </code>字母矩阵中的位置分别处理如下。</p><p>(1)加密方法</p><ol><li><p>将明文两两分组</p><ul><li><p>明文个数为偶数，以下例子可以得到：<br>PLAYFAIRCIPHER=PL——AY——FA——IR——CI——PH——ER</p></li><li><p>若明文字母数为奇数,则在明文的末端添加一个事先约定好的字母(X)进行填充。示例：AB——C，补完变为 AB——CX</p></li><li><p>若$p_1,p_2$: 相同,则插人一个事先约定好的字母,并用上述方法处理 AA——BC 插完变为 AX——AX——CD（这里执行了一次缺补）</p><blockquote><p>同插缺补操作不分先后，执行结果相同</p></blockquote></li></ul></li><li><p>移位和替换</p><ul><li>若$p_1,p_2$:在同一行,则对应的密文分别是紧靠$p_1,p_2$右端的字母</li><li>若$p_1,p_2$:在同一列，则对应的密文分别是紧靠 $p_1,p_2$下端的字母。</li><li>若$p_1,p_2$: 不在同一行，也不在同一列,则对应的密文为以$p_1,p_2$: 为对角顶点确定的矩形的另外的两个顶点字母,按同行的原则对应。</li></ul></li><li><p>案例</p><p>假设密钥是：PLAYFAIR IS A DIGRAM CIPHER</p><p>第一步：填入不重复的密钥（如果有重复则跳过） <img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_b97de83775-6.png" alt="6.png"></p><p>第二部：将剩未出现的字母依次写入<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_bcf42f2a75-7.png" alt="7.png"></p><p>示例： P=PL——AY——FA——IR——CI——PH——ER</p><p>前四个都符合规则的第一条：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_0988d4c675-8.png" alt="8.png"><br>得到前四组的密文 C：<br>C=LA——YF——PY——RS<br>再看剩余几组：满足变换规则第三条（本质：构建子矩阵并找到反对角）<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_21c054c075-9.png" alt="9.png"><br>PS：一定要注意字母对应的顺序：明文对应同行的才是密文</p><p>所以得到：C=LA——YF——PY——RS——MR——AM——CD</p></li></ol><p>(2) 解密方法</p><p>Playfair 密码在解密时，同样是将密文分为两个字母一组，然后根据密钥产生的字母矩阵进行解密。解密过程与加密过程基本相似，只是把其中的右边改为左边,把其中的下面改为上面即可</p><h5 id="C-源码-5">C++源码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串总是以&#x27;\0&#x27;字符结束，所以在声明字符数组时，需要考虑到这个额外的字符。</span></span><br><span class="line"><span class="type">char</span> letters[<span class="number">26</span>] = <span class="string">&quot;abcdefghiklmnopqrstuvwxyz&quot;</span>; <span class="comment">// 用于填充矩阵</span></span><br><span class="line"><span class="type">char</span> text_matrix[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">string other;</span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line">string clear_key; <span class="comment">// 明钥（用于解密）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"><span class="type">int</span> cnt[N]; <span class="comment">// 用于辅助去重</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_matrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 处理好字母矩阵</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    string tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; secret_key.<span class="built_in">size</span>(); i ++ ) <span class="comment">// 去重</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(secret_key[i] == <span class="string">&#x27;j&#x27;</span>) secret_key = <span class="string">&#x27;i&#x27;</span>; <span class="comment">// 因为数组不方便存i/j，因此统一用i表示</span></span><br><span class="line">        cnt[secret_key[i] - <span class="string">&#x27;a&#x27;</span>] ++ ;</span><br><span class="line">        <span class="keyword">if</span>(cnt[secret_key[i] - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(secret_key[i] - <span class="string">&#x27;a&#x27;</span> &lt; <span class="number">9</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                letters[secret_key[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                letters[secret_key[i] - <span class="string">&#x27;a&#x27;</span> - <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp += secret_key[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 排序，密钥中出现过的字母变成0，排序后会在前面，未出现的自动会排好序在后面</span></span><br><span class="line">    <span class="built_in">sort</span>(letters, letters + <span class="number">25</span>);</span><br><span class="line">    <span class="type">int</span> len = tmp.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        letters[i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; letters &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            text_matrix[i][j] = letters[t ++ ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_text</span><span class="params">(string&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m[i] == m[i + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            m.<span class="built_in">insert</span>(i + <span class="number">1</span>, other);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m.<span class="built_in">size</span>() % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m += (m[m.<span class="built_in">size</span>() - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m.<span class="built_in">size</span>(); i += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, x2, y1, y2; <span class="comment">// 寻找一组明文再矩阵的位置</span></span><br><span class="line">        <span class="type">bool</span> flag1 = <span class="literal">false</span>, flag2 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(x1 = <span class="number">0</span>; x1 &lt; <span class="number">5</span>; x1 ++ ) <span class="comment">// 找到后需要连续break两次才能跳出来</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(y1 = <span class="number">0</span>; y1 &lt; <span class="number">5</span>; y1 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i] == text_matrix[x1][y1])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag1 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag1) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(x2 = <span class="number">0</span>; x2 &lt; <span class="number">5</span>; x2 ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(y2 = <span class="number">0</span>; y2 &lt; <span class="number">5</span>; y2 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i + <span class="number">1</span>] == text_matrix[x2][y2])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag2 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x1 == x2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 防止越界，mod5</span></span><br><span class="line">            secret_text += text_matrix[x1][(y1 + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            secret_text += text_matrix[x2][(y2 + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y1 == y2)</span><br><span class="line">        &#123;</span><br><span class="line">            secret_text += text_matrix[(x1 + <span class="number">1</span>) % <span class="number">5</span>][y1];</span><br><span class="line">            secret_text += text_matrix[(x2 + <span class="number">1</span>) % <span class="number">5</span>][y2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            secret_text += text_matrix[x1][y2];</span><br><span class="line">            secret_text += text_matrix[x2][y1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文为：&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m.<span class="built_in">size</span>(); i += <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1, x2, y1, y2; <span class="comment">// 寻找一组明文再矩阵的位置</span></span><br><span class="line">        <span class="type">bool</span> flag1 = <span class="literal">false</span>, flag2 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(x1 = <span class="number">0</span>; x1 &lt; <span class="number">5</span>; x1 ++ ) <span class="comment">// 找到后需要连续break两次才能跳出来</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(y1 = <span class="number">0</span>; y1 &lt; <span class="number">5</span>; y1 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i] == text_matrix[x1][y1])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag1 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag1) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(x2 = <span class="number">0</span>; x2 &lt; <span class="number">5</span>; x2 ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(y2 = <span class="number">0</span>; y2 &lt; <span class="number">5</span>; y2 ++ )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(m[i + <span class="number">1</span>] == text_matrix[x2][y2])</span><br><span class="line">                &#123;</span><br><span class="line">                    flag2 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag2) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x1 == x2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 防止越界，mod5</span></span><br><span class="line">            cleartext += text_matrix[x1][(y1 - <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            cleartext += text_matrix[x2][(y2 - <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (y1 == y2)</span><br><span class="line">        &#123;</span><br><span class="line">            cleartext += text_matrix[(x1 - <span class="number">1</span>) % <span class="number">5</span>][y1];</span><br><span class="line">            cleartext += text_matrix[(x2 - <span class="number">1</span>) % <span class="number">5</span>][y2];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cleartext += text_matrix[x1][y2];</span><br><span class="line">            cleartext += text_matrix[x2][y1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文为：&quot;</span> &lt;&lt; cleartext &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥和一个无关字符&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; secret_key &gt;&gt; other;</span><br><span class="line">    <span class="built_in">init_matrix</span>(); <span class="comment">// 初始化源于密钥构建的字母矩阵</span></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">init_text</span>(cleartext);<span class="comment">// 处理好的明文</span></span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">init_text</span>(secret_text);<span class="comment">// 处理好的明文</span></span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入密钥和一个无关字符</span><br><span class="line">iscbupt x</span><br><span class="line">iscbuptadefghklmnoqrvwxyz</span><br><span class="line">请输入明文</span><br><span class="line">steganographia</span><br><span class="line">加密后的密文为：tgtltonhoeafcp</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">    请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密钥和一个无关字符</span><br><span class="line">iscbupt x</span><br><span class="line">iscbuptadefghklmnoqrvwxyz</span><br><span class="line">请输入密文</span><br><span class="line">tgtltonhoeafcp</span><br><span class="line">解密后的明文为：steganographia</span><br></pre></td></tr></table></figure><h4 id="2-2Vigenere-密码">2.2Vigenere 密码</h4><h5 id="介绍-5">介绍</h5><p>维吉尼亚密码(Vigenere Cipher)是由法国密码学家 Blaise de Vigenere 于 1858 年提出的种代换密码，它是多表代换密码的典型代表。<br>定义:设<code>m</code>为某一固定的正整数,<code>P</code>、<code>C</code>和<code>K</code> 分别为明文空间、密文空间和密钥空间,并且 $P=K=C=(Z_{26})^m$,对一个密钥 $k=(k_1,k_2…k_m)$,定义维吉尼亚密码的加密函数为:</p><p>$$<br>e_k(x_1,x_2…x_m)=(x_1+k_1,x_2 + k_2…x_m+k_m)<br>$$</p><p>与之对应的解密函数为:</p><p>$$<br>d_k(y_1,y_2…y_m)=(y_1-k_1,y_2-k_2…y_m-k_m)<br>$$</p><p>其中$k=(k_1,k_2…k_m)$是一个长为<code>m</code> 的密钥字,密空间的大小为 $26^m$,所以对一个相对小的<code>m</code>,穷举密钥也需要很长的时间。如<code>m=7,</code>则密空间大小超过$8×10^9$,所以手工搜索非常困难。当明文的长度超过<code>m</code>时,可将明文串按长度<code>m</code>分组,然后对每一组使用密钥<code>k</code>加密。</p><p>设密钥为<code>iscbupt</code>,则对应的数字化的密钥<code>k=(8,18,2,1,20,15,19)</code>,待加密的明文是<code>cyber greatwall corporation</code>,首先把明文字母转换为数字,然后把明文字母每<code>7</code>个分为一组,使用密钥字进行模<code>26</code>下的加密操作,具体计算过程如下所示。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_74d8ea9e76-10.png" alt="10.png"><br>加密表中第一行为已分组明文字母,每组之间用空格隔开;第二行是与明文字母对应的数字;第三行是加密密钥;第四行为加密后的密文对应的数字，即第二行数字与第三行对应的数字模<code>26</code>和的结果;最后一行是得到的密文<code>KQDFLVKMSVXUAEKGTQIGTBAQO</code>。同样把密文按每组 <code>7</code>个进行分组，然后进行解密得如下解密表。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_71e9d5eb76-11.png" alt="11.png"><br>解密表与加密表的第四行计算操作是不同的,解密表中第四行是由第二行与第三行的模<code>26 </code>差得到的,其他行的操作与加密表基本相同。由解密表可以明显看出,明文字符通过解密函数得到恢复。<br>为了更快根据明文找出密文,或者依据密文推出明文,我们构造了下表，表中第一行为<code>26 </code>个明文字符,第一列代表<code>26</code>个密钥字符,根据下表进行的加密解密过程如下。<br>(1)加密过程:明文字母力对应的列和密钥字母<code>k</code>对应的行的交叉点就是加密后的密文字母<code>c</code>。<br>(2)解密过程:在密钥字母 <code>k </code>对应的行找到相应的密文字母<code> c</code>,则<code>c </code>所在列对应的明文字母即是<code>p</code>。</p><blockquote><p>设密钥为<code>iscbupt</code>,需加密的明文字母是<code>sorcery</code>,则根据维吉尼亚表和加密规则易得密文为<code>AGTDYGR</code>。同样根据上述维吉尼亚表和解密规则易知明文为<code>sorcery</code>根据维吉尼亚表的启发,还可以设计出其他多表密码体制,如把维吉尼亚表对应的行逆序排列，就可以得到博福特密码(Beaufort Cipher)表</p></blockquote><p><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_ad2d35a276-7.jpg" alt="7.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//体贴的我打出来了表单（当然是计算机算的，下面代码有）</span></span><br><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">BCDEFGHIJKLMNOPQRSTUVWXYZA</span><br><span class="line">CDEFGHIJKLMNOPQRSTUVWXYZAB</span><br><span class="line">DEFGHIJKLMNOPQRSTUVWXYZABC</span><br><span class="line">EFGHIJKLMNOPQRSTUVWXYZABCD</span><br><span class="line">FGHIJKLMNOPQRSTUVWXYZABCDE</span><br><span class="line">GHIJKLMNOPQRSTUVWXYZABCDEF</span><br><span class="line">HIJKLMNOPQRSTUVWXYZABCDEFG</span><br><span class="line">IJKLMNOPQRSTUVWXYZABCDEFGH</span><br><span class="line">JKLMNOPQRSTUVWXYZABCDEFGHI</span><br><span class="line">KLMNOPQRSTUVWXYZABCDEFGHIJ</span><br><span class="line">LMNOPQRSTUVWXYZABCDEFGHIJK</span><br><span class="line">MNOPQRSTUVWXYZABCDEFGHIJKL</span><br><span class="line">NOPQRSTUVWXYZABCDEFGHIJKLM</span><br><span class="line">OPQRSTUVWXYZABCDEFGHIJKLMN</span><br><span class="line">PQRSTUVWXYZABCDEFGHIJKLMNO</span><br><span class="line">QRSTUVWXYZABCDEFGHIJKLMNOP</span><br><span class="line">RSTUVWXYZABCDEFGHIJKLMNOPQ</span><br><span class="line">STUVWXYZABCDEFGHIJKLMNOPQR</span><br><span class="line">TUVWXYZABCDEFGHIJKLMNOPQRS</span><br><span class="line">UVWXYZABCDEFGHIJKLMNOPQRST</span><br><span class="line">VWXYZABCDEFGHIJKLMNOPQRSTU</span><br><span class="line">WXYZABCDEFGHIJKLMNOPQRSTUV</span><br><span class="line">XYZABCDEFGHIJKLMNOPQRSTUVW</span><br><span class="line">YZABCDEFGHIJKLMNOPQRSTUVWX</span><br><span class="line">ZABCDEFGHIJKLMNOPQRSTUVWXY</span><br></pre></td></tr></table></figure><h5 id="C-源码-6">C++源码</h5><blockquote><p>因为这个算法不难，所以就不模拟了，直接用表了(～￣ ▽ ￣)～</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> vigenere[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line">string secret_key; <span class="comment">// 密钥</span></span><br><span class="line">string clear_key; <span class="comment">// 明钥（用于解密）</span></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k = (j + t) % <span class="number">26</span>;</span><br><span class="line">            vigenere[i][j] = <span class="string">&#x27;A&#x27;</span> + k;</span><br><span class="line">        &#125;</span><br><span class="line">        t ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = i % secret_key.<span class="built_in">size</span>();</span><br><span class="line">        secret_text += vigenere[m[i] - <span class="string">&#x27;a&#x27;</span>][secret_key[k] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文为：&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = i % secret_key.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vigenere[secret_key[k] - <span class="string">&#x27;a&#x27;</span>][j] == m[i]) cleartext += (<span class="string">&#x27;a&#x27;</span> + j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;解密后的明文为：&quot;</span> &lt;&lt; cleartext &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥符&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; secret_key;</span><br><span class="line">    <span class="built_in">init</span>();<span class="comment">//初始化表单（外挂）</span></span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入密钥符</span><br><span class="line">iscbupt</span><br><span class="line">请输入明文</span><br><span class="line">cybergreatwallcorporation</span><br><span class="line">加密后的密文为：KQDFLVKMSVXUAEKGTQIGTBAQO</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密钥符</span><br><span class="line">iscbupt</span><br><span class="line">请输入密文</span><br><span class="line">KQDFLVKMSVXUAEKGTQIGTBAQO</span><br><span class="line">解密后的明文为：cybergreatwallcorporation</span><br></pre></td></tr></table></figure><h4 id="2-3-Hill-密码">2.3 Hill 密码</h4><h5 id="介绍-6">介绍</h5><p>希尔密码(Hill Cipher)是由数学家$ Lester Hil$于 1929 在 $American MathematicalMonthly$ 杂志上首次提出的。Hill 密码的基本思想是利用 $Z_{26}$上的线性变换把<code>n</code>个连续的明文字母替换为<code>n </code>个密文字母。这个替换是由密钥决定的,而这个密钥是一个变换矩阵,解密时<strong>只需对密文做一次逆变换</strong>即可。其实 Hill 密码实质上就是通过一个变换矩阵把明文变换为密文的一种密码体制。</p><p>定义：设<code>n</code>为某一固定的正整数,<code>P</code>、<code>C</code>和<code>K</code> 分别为明文空间、密文空间和密钥空间，并且$P=C=(Z_{26})$,密钥$k=(k_{ij})<em>{n×n}$,是一个<code>n×n</code> 的非奇异矩阵(行列式 $det(k)\not=0$),且满足<code>gcd(det(k),26)=1</code>,即满足 $Z</em>{26}$上<code> det(k)</code>和 <code>26</code> 互素,从而保证了密钥矩阵的逆矩阵存在。对明文序列$p=(p_1,p_2…p_n)\in P$,其对应密文记为$c=(c_1,c_2…c_n)\in C$,则 Hill 密码的加密函数定义为:<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_c3bce6f776-12.png" alt="12.png"></p><!--$$--><!--(c_1,c_2,...,c_n) \equiv (p_1,p_2,...,p_n)--><!--\begin{equation}--><!--\begin{pmatrix}--><!--k_{11} & k_{12} & \cdots & k_{1n}\\--><!--k_{21} & k_{22} & \cdots & k_{2n}\\--><!--\vdots & \vdots & \ddots & \vdots \\--><!--k_{n1} & k_{n2} & \cdots & k_{nn}\\--><!--\end{pmatrix}--><!--\end{equation}--><!--(mod 26)--><!--$$--><p>写成矩阵简化形式为：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_cb6527d776-13.png" alt="13.png"></p><!--$$--><!--[c]_{1\times n}\equiv([p]_{1\times n}\times[k]_{n\times n})(mod 26)--><!--$$--><p>在 Hill 密码的加密函数等式的两端分别乘以 $k ^{-1}$,则得到其解密函数的解析式:<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_d137b61676-14.png" alt="14.png"></p><!--$$--><!--(p_1,p_2,...,p_n) \equiv (c_1,c_2,...,c_n)--><!--\times--><!--\begin{equation}--><!--\begin{pmatrix}--><!--k_{11} & k_{12} & \cdots & k_{1n}\\--><!--k_{21} & k_{22} & \cdots & k_{2n}\\--><!--\vdots & \vdots & \ddots & \vdots \\--><!--k_{n1} & k_{n2} & \cdots & k_{nn}\\--><!--\end{pmatrix} ^{-1}--><!--\end{equation}--><!--(mod 26)--><!--$$--><p>写成矩阵简化形式为：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_d61b0d5876-15.png" alt="15.png"></p><!--$$--><!--[p]_{1 \times n} \equiv ([c]_{1 \times n} \times [k]_{n \times n}^{-1})(mod 26)--><!--$$--><p>设待加密的明文是<code>cyber</code>,数字化后为 <code>2,24,1,4,17</code>,使用的密钥为<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_47da949e76-16.png" alt="16.png"><br>则密文为<code>WRTRV</code>。同理由于<code>k</code>是非奇异的,所以在$ Z_{26} $上必然存在逆矩阵:<br><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_797e924f76-17.png" alt="17.png"><br>则明文为<code>cyber</code><br>Hill 密码将长消息分组,分组的长度由矩阵的维数决定。它与 <code>Playfair </code>密码相比,更好地隐藏了单字母的统计特性,所以 <code>Hill</code> 密码能较好地抵抗统计分析法,对抗惟密文攻击的强度较高,但易受到已知明文攻击。</p><h5 id="C-源码-7">C++源码</h5><blockquote><p>这个算法难就难在算逆元，因为我没学过，直接去网上找了一篇，有兴趣就看下吧 <a href="https://blog.csdn.net/kongtaoxing/article/details/126962613">点击这里直达</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod(a) (((a % 26) + 26) % 26)  <span class="comment">//把负数的模计算成正数</span></span></span><br><span class="line"></span><br><span class="line">string cleartext; <span class="comment">// 明文</span></span><br><span class="line">string secret_text; <span class="comment">// 密文</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; secret_key; <span class="comment">// 密钥</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; clear_key; <span class="comment">// 明钥（密钥逆矩阵）</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res; <span class="comment">// 判断加密还是解密</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divmod</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;   <span class="comment">//模26除法</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>((a + <span class="number">26</span> * i) % b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">mod</span>((a + <span class="number">26</span> * i) / b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//其实是10000以内没有找到🤣，还可以用直接乘逆元的方式求模的除法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">det</span><span class="params">(vector&lt;<span class="type">int</span>&gt; arr, <span class="type">int</span> len)</span> </span>&#123;    <span class="comment">//行列式求值</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">1</span>) ans = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; <span class="built_in">yuzi</span>((len - <span class="number">1</span>) * (len - <span class="number">1</span>));   <span class="comment">//创建余子式矩阵</span></span><br><span class="line">        <span class="type">int</span> move = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                move = i &gt; j ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; len - <span class="number">1</span>; k ++) &#123;</span><br><span class="line">                    yuzi[j * (len - <span class="number">1</span>) + k] = arr[(j + move) * len + k + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> flag = (i % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">            ans += flag * arr[i * len] * <span class="built_in">det</span>(yuzi, len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">mod</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt; arr)</span> </span>&#123;   <span class="comment">//求mod26的逆矩阵</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; inver;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sqrt</span>(arr.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">det</span>(arr, len) == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;秘钥矩阵的行列式值为0，无法解密&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> _det = <span class="built_in">det</span>(arr, len);</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bansui</span><span class="params">(len * len)</span></span>;   <span class="comment">//伴随矩阵</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">yuzi</span><span class="params">((len - <span class="number">1</span>) * (len - <span class="number">1</span>))</span></span>;    <span class="comment">//余子式</span></span><br><span class="line">    <span class="type">int</span> pi, pj, q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> ai = <span class="number">0</span>; ai &lt; len; ai++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> aj = <span class="number">0</span>; aj &lt; len; aj++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> bi = <span class="number">0</span>; bi &lt; len - <span class="number">1</span>; bi++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> bj = <span class="number">0</span>; bj &lt; len - <span class="number">1</span>; bj++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ai &gt; bi) pi = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> pi = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(aj &gt; bj) pj = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> pj = <span class="number">1</span>;</span><br><span class="line">                    yuzi[bi * (len - <span class="number">1</span>) + bj] = arr[(bi + pi) * len + bj + pj];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>((ai + aj) % <span class="number">2</span> == <span class="number">0</span>) q = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> q = <span class="number">-1</span>;</span><br><span class="line">            bansui[ai * len + aj] = q * <span class="built_in">det</span>(yuzi, len - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len;j++) &#123;</span><br><span class="line">            arr[i * len + j] = <span class="built_in">divmod</span>(bansui[i * len + j], _det);</span><br><span class="line">            inver.<span class="built_in">push_back</span>(<span class="built_in">mod</span>(arr[i * len + j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;   <span class="comment">//转置一下输出顺序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = inver[i * len + j];</span><br><span class="line">            inver[i * len + j] = inver[ j * len + i];</span><br><span class="line">            inver[j * len + i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y = secret_key.<span class="built_in">size</span>() / m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> x = m.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cnt += (m[j] - <span class="string">&#x27;a&#x27;</span>) * secret_key[j * x + i];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt %= <span class="number">26</span>;</span><br><span class="line">        secret_text += (cnt + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文：&quot;</span> &lt;&lt; secret_text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode</span><span class="params">(string m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clear_key = <span class="built_in">inverse</span>(secret_key);</span><br><span class="line">    <span class="type">int</span> y = secret_key.<span class="built_in">size</span>() / m.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> x = m.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; y; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; x; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            cnt += (m[j] - <span class="string">&#x27;A&#x27;</span>) * clear_key[j * x + i];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt %= <span class="number">26</span>;</span><br><span class="line">        cleartext += (cnt + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加密后的密文：&quot;</span> &lt;&lt; cleartext &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择解密还是加密，加密选1，解密选2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; res;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密钥,全部输入到本行&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        secret_key.<span class="built_in">push_back</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(cin.<span class="built_in">get</span>() == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入明文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cleartext;</span><br><span class="line">        <span class="built_in">encrypt</span>(cleartext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入密文&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; secret_text;</span><br><span class="line">        <span class="built_in">encode</span>(secret_text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">请输入密钥,全部输入到本行</span><br><span class="line"><span class="number">10</span> <span class="number">5</span> <span class="number">12</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">14</span> <span class="number">21</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> <span class="number">9</span> <span class="number">11</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">11</span> <span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line">请输入明文</span><br><span class="line">cyber</span><br><span class="line">加密后的密文：WRTRV</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line">请选择解密还是加密，加密选<span class="number">1</span>，解密选<span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">请输入密钥,全部输入到本行</span><br><span class="line"><span class="number">10</span> <span class="number">5</span> <span class="number">12</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">14</span> <span class="number">21</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> <span class="number">9</span> <span class="number">11</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">11</span> <span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span></span><br><span class="line">请输入密文</span><br><span class="line">WRTRV</span><br><span class="line">加密后的密文：cyber</span><br></pre></td></tr></table></figure><hr><h2 id="三、轮换密码">三、轮换密码</h2><h3 id="介绍-7">介绍</h3><p>从 19 世纪 20 年代开始，人们逐渐发明各种机械加解密设备用来处理数据的加密解密运算,起初普遍使用的设备是转轮密码机。转轮密码机是由一个用于输入的键盘和一组转轮组成,每个转轮上有<code>26</code>个字母的任意组合,转轮之间由齿轮进行连接,当一个转轮转动时,可以将一个字母转化成为另一个字母。为了使转轮更安全,人们还把几种转轮和移动齿轮结合起来,所有转轮以不同的速度转动,并且通过调整转轮上字母的位置和速度为破译设置障碍。转轮密码机原理如图 3-1 所示,它是一个三转轮密码机模型,3 个带有数字的矩形框代表 3 个转轮,从左到右分别称为慢轮子、中轮子和快轮子。转轮内部相当于一个单表代换。当按下某一键时,电信号从慢轮子的输人引脚进人,经过内部连线流经每个转轮,最后从快轮子的输出引脚输出密文。如在图 3-1(a)中,如果按下字母键 A,则一个电信号被加到慢轮子的输入引脚 24 并通过内部连线连接到慢轮子的输出引脚 24,经过中轮子的输入引脚 24 和输出引脚 24,连接到快轮子的输人引脚 18,最后从快轮子的输出引脚 18 输出密文字母 B</p><h3 id="图片">图片</h3><p><img src="https://cdn.acwing.com/media/article/image/2023/10/29/169037_17d46cc876-8.jpg" alt="8.jpg"></p><p>如果转轮机始终保持图 3-1(a)的连接状态,则按下字母键 A,输出的密文永远是字母 B,这显然是单表代换密码。转轮密码机的设计目的是通过转轮的转动来实现复杂的多表代换，从而打破明文与密文之间的固定代替关系。所以,转轮密码机在每次击键并输出密文以后,快轮子要转动一个位置,以改变中轮子与快轮子之间的对应关系。如在图 3-1(a)所示状态下,如果按下任意一个键(如 A 键),转轮密码机输出密文(如 B),然后快轮子转动一个位置,即快轮子的所有引脚向下移动一个位置,原最下边的引脚移至顶端,此时转轮密码机的状态如图 3-1(b)所示,显然,此时若再按个 A 键,则一个电信号被加到慢轮子的输入引脚 24 并通过内部连线连接到慢轮子的输出引脚 24,经过中轮子的输人引脚 24 和输出引脚 24,连接到快轮子的输出引脚 17,最后从快轮子的输出引脚 17 输出密文字母 E,显然,两次的输出结果是完全不同的,快轮子转动一圈(26 个位置),中轮子转动一个位置;中轮子转动一圈(26 个位置),慢轮子转动一个位置。因此,在加密或解密 26×26×26 个字母以后,所有转轮都恢复到初始状态。由此可知,一个有 3 个转轮的转轮密码机是一个密周期为 26×26×26=17 576 的多表代换密码机械装置。一个 5 转轮密码机的密钥周期是 265=11881 376,一般地，一个有 m 个转轮的密码机其周期是 $26^m$,所以转轮密码机是一种长周期的多表代换密码机。</p><h3 id="总结">总结</h3><p>转轮密码机的使用大大提高了密码加解密速度,同时其抗攻击性有很大的提高,在第二次世界大战中有着广泛的应用,它是密码学发展史上的一个里程碑。</p><h2 id="总结-2">总结</h2><blockquote><p>写了好久，总结懒得写了，让 AI 写的 😋</p></blockquote><p>古代密码体制的学习让我对古代的通信方式和信息安全有了更深入的了解。</p><p>古代加密方法，如古希腊战争中的隐写术，以及中国古代的藏头诗、藏尾诗、漏格诗等，都是古人为了保护信息不被敌方获取而发明的方法。这些方法虽然简单，但体现了古人的智慧和对信息安全的重视。</p><p>古代密码体制的发明和进步，反映了人类对信息安全的不断追求。同时，这些加密方法也为我们现代人提供了宝贵的启示，让我们看到了信息安全的重要性，以及在信息安全领域中不断探索和创新的精神。</p><p>学习古代密码体制，不仅让我们了解了古代的通信历史和文化，更让我们对信息安全有了更深入的认识和理解。在当今这个信息化的时代，信息安全已经成为我们生活中不可或缺的一部分，我们每个人都应该加强对信息安全的重视和保护。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 置换密码 </tag>
            
            <tag> 列置换密码 </tag>
            
            <tag> 周期置换密码 </tag>
            
            <tag> 代换密码 </tag>
            
            <tag> 单表代换密码 </tag>
            
            <tag> 多表代换密码 </tag>
            
            <tag> Vigenere密码 </tag>
            
            <tag> Playfair密码 </tag>
            
            <tag> Hill密码 </tag>
            
            <tag> 轮换密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之数组篇</title>
      <link href="/posts/4.html"/>
      <url>/posts/4.html</url>
      
        <content type="html"><![CDATA[<p>前几天在学习密码学的时候，再看 C++源码的时候，发现 C++在函数调用数组的时候并不需要调用 <code>&amp;</code> 来指向数组地址 <s>基础还是不行</s>，留此随记提醒自己</p><h2 id="数组与指针的关系">数组与指针的关系</h2><blockquote><p>C++中数组和指针是两个十分常用且关系密切的数据结构，“数组即指针，指针即数组”的言论一直层出不穷。从本质上讲，数组和指针是不同的，数组是具有确定数量的元素，而指针只是一个标量值。但是，在某些情况下数组和指针又能相互转换。下面，将从多个角度分析数组和指针。</p></blockquote><h3 id="1-数组作为函数参数">1. 数组作为函数参数</h3><h4 id="1-1-数组元素作为函数实参">1.1 数组元素作为函数实参</h4><p>这里并没有引用数组地址，而是仅仅作为实参传入数值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">work</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">-0x3f3f3f3f</span>; <span class="comment">// 十六进制，就是很小很小的负数</span></span><br><span class="line">  cout &lt;&lt; <span class="built_in">max</span>(arr[<span class="number">1</span>], n) &lt;&lt; endl; <span class="comment">// 此处会输出2</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;仅作为实参下的arr[1]:&quot;</span> &lt;&lt; <span class="built_in">work</span>(arr[<span class="number">1</span>])&lt;&lt; endl; <span class="comment">//仅作为实参下的arr[1]:1</span></span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;真实的arr[1]:&quot;</span> &lt;&lt; arr[<span class="number">1</span>];<span class="comment">//真实的arr[1]:2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-2-数组名作为函数实参">1.2 数组名作为函数实参</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> n[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;开始的arr[1]:&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl; <span class="comment">// 开始的arr[1]:2</span></span><br><span class="line">  <span class="built_in">work</span>(arr);</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;最后的arr[1]:&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl;<span class="comment">//最后的arr[1]:1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现这里的引用<code>arr</code>（尽管名字不一样），函数引用的不仅仅是数组里面的数值，而是地址，这边牵扯到下面有管数组和指针的区别</p><h3 id="2-数组和指针互相转换">2. 数组和指针互相转换</h3><p>数组能在指定情况下转换为指针，当数组在表达式中使用时，编译器将数组名转换为一个指针常量，指向数组第一个元素的地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> arr[] = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">  <span class="type">int</span> *p1 = arr;</span><br><span class="line">  <span class="type">int</span> *p2 = &amp;arr[<span class="number">0</span>];</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p1:&quot;</span> &lt;&lt; p1 &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; *p1 &lt;&lt; endl;           <span class="comment">// p1:0xffffcbd0, value:2</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p2:&quot;</span> &lt;&lt; p2 &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; *p2 &lt;&lt; endl;           <span class="comment">// p2:0xffffcbd0, value:2</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr:&quot;</span> &lt;&lt; arr &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;      <span class="comment">// arr:0xffffcbd0, value:2</span></span><br><span class="line"></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;p1+2:&quot;</span>  &lt;&lt; p1+<span class="number">2</span> &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; *(p1+<span class="number">2</span>) &lt;&lt; endl;  <span class="comment">// p1+2:0xffffcbd8, value:1</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;arr+2:&quot;</span> &lt;&lt; &amp;arr[<span class="number">2</span>] &lt;&lt; <span class="string">&quot;, value:&quot;</span> &lt;&lt; arr[<span class="number">2</span>] &lt;&lt; endl;<span class="comment">// arr+2:0xffffcbd8, value:1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论:如果令<code>int * p = arr</code>，则<code>p = arr = &amp;arr[0]</code>, <code>p+2 = arr+2 = &amp;arr[2]</code>;</p><p>但是，有两种情况下，数组名与指针不能混为一谈。</p><ul><li><p>第一种，数组作为<code>sizeof</code>操作符的参数时：</p><ul><li><p><code>sizeof</code>是一个操作符(operator)，其作用是返回一个对象或类型所占的内存字节数。</p></li><li><p><code>sizeof</code>(数组): 大小是数组的元素个数*元素类型所占字节数，与数组的类型信息相关，与地址信息无关；</p></li><li><p><code>sizeof</code>(指针): 大小固定，32 位机器全是 4 个字节，64 位机都是 8 个字节。</p></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p = arr;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;      <span class="comment">// 20 : 5*sizeof(int)</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(*arr) &lt;&lt; endl;     <span class="comment">// 4  : 第一个元素值的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(&amp;arr) &lt;&lt; endl;     <span class="comment">// 8  : 第一个元素地址的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;   <span class="comment">// 4  : 第一个元素值的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(&amp;arr[<span class="number">0</span>]) &lt;&lt; endl;  <span class="comment">// 8  : 第一个元素地址的大小</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;        <span class="comment">// 8  : 指针的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(*p) &lt;&lt; endl;       <span class="comment">// 4  : 指针所指元素值的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(&amp;p) &lt;&lt; endl;       <span class="comment">// 8  : 指针的地址的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(p[<span class="number">0</span>]) &lt;&lt; endl;     <span class="comment">// 4  : 数组第一个元素值的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(&amp;p[<span class="number">0</span>]) &lt;&lt; endl;    <span class="comment">// 8  : 数组第一个元素值的地址的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二种，数组作为单目操作符&amp;的操作数时：<ul><li>&amp;数组: 表示取数组的地址，即数组的指针；</li><li>&amp;指针: 表示取指针的地址，即指针的指针。</li></ul></li></ul><hr><h3 id="3-二维数组与指针">3. 二维数组与指针</h3><p>指针的概念其实很简单，指针难就难在与其他结构之间的牵扯，比如指针与二维数组。</p><ul><li><p>第一点，定义指向二维数组的指针：</p><p>定义二维数组 int aa[2][5]；<br>由于数组名为数组的第一个元素的地址，而二维数组 aa 的第一个元素为长度为 5 的一维数组；<br>因此，如果定义一个指针指向二维数组的话，该指针的长度也必须为 5；<br>即，int (*p)[5] = aa 或者 int (*p)[5] = &amp;aa[0], 表示长度为 5 的指针数组。</p></li><li><p>第二点，指针访问二维数组第一个元素中的值：</p><ul><li>首先，*p 表示二维数组中第一个元素对应的值，即长度为 5 的一维数组，假设为 a[5]；</li><li>其次，*p 可看成一维数组 a[5]的名，即 a[5]的第一个元素的地址；</li><li>最后，如果想取 aa[0][2]，则可用*(*p+2) 表示。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">int</span> (*p)[<span class="number">5</span>] = aa;</span><br><span class="line">    cout &lt;&lt; *(*p+<span class="number">2</span>)&lt;&lt; endl;       <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第三点，指针访问二维数组任意一个元素的值：</p><ul><li>使用列指针：定义一个列指针 p，让它指向二维数组的第 1 个元素。<ul><li>首先，aa[0] 相当于 int a[5], 则 p=&amp;aa[0][0]相当于 p=a[0];</li><li>其次，C 语言中数组是按行优先顺序存储，而 aa[i][j]前面共有 i<em>5+j 个元素，所以该二维数组的任意 i 行 j 列元素可表示为</em>(p+i*5+j)</li></ul></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> *p = &amp;aa[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    cout &lt;&lt; *(p+<span class="number">1</span>*<span class="number">5</span>+<span class="number">2</span>)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用行指针：定义一个行指针 p，让它指向二维数组的第 1 行。<ul><li>其中* ( *(p+i)+j)表示任意一个 i 行 j 列的元素值， <em>(p+i)可理解为取二维数组中第 i 个元素的值，即 a=int[5]，而</em>(a+j)表示一维数组 a 的第 j 个元素的值。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> aa[<span class="number">2</span>][<span class="number">5</span>] = &#123;&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">int</span> (*p)[<span class="number">5</span>] = aa; <span class="comment">//也可以为p=&amp;aa[0];</span></span><br><span class="line">    cout &lt;&lt; *(*(p+<span class="number">1</span>)+<span class="number">2</span>)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="char-类型的数组">char 类型的数组</h2><p><code>char</code>类型的数组通常用于存储字符数据。由于一个字符通常占用一个字节（即 8 位），因此<code>char</code>数组可以用于存储较小的数据集，例如字符串、文本文件中的数据等。使用<code>char</code>数组可以有效地利用内存空间，特别是在处理大量文本数据时。</p><p>关于使用<code>unsigned</code>。在<code>C++</code>中，<code>unsigned</code>是一种整数类型修饰符，用于表示只能存储非负整数的数据类型。它可以将数据类型的取值范围限制为非负范围，即从<code>0</code>到<code>2^n-1</code>，其中 n 是该类型的位数。</p><p>以下是一些需要使用 unsigned 的情况：</p><ul><li>当需要表示的数据范围为非负时，例如计数器、循环索引等。</li><li>当需要与无符号整数类型进行算术运算时，例如位运算、移位运算等。</li><li>当需要确保变量不会存储负值时，例如在某些算法或数据结构中，负值没有意义或导致错误。</li><li>需要注意的是，如果使用 unsigned 修饰符，那么变量只能存储非负整数。如果尝试将负值存储到无符号整数类型中，编译器可能会发出警告或错误。因此，在使用 unsigned 时，需要确保程序中不会出现负值或确保在合适的地方进行了正确的处理。</li></ul><blockquote><p>在<code>C++</code>中，<code>char</code>类型通常被视为有符号类型，其取值范围为<code>-128</code>到<code>127</code>，无符号整数的取值范围为<code>0</code>到<code>255</code><br>比如说</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果不用unsigned 初始化char s数组的话，s[i] &gt; 127 就会有溢出错误！！！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">// KSA初始化S盒</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>]; <span class="comment">// S盒子</span></span><br><span class="line">  <span class="type">unsigned</span> key_len = secret_key.<span class="built_in">size</span>();</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> T[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 临时数组向量</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i ++ )</span><br><span class="line">  &#123;</span><br><span class="line">      s[i] = i;</span><br><span class="line">      T[i] = secret_key[i % key_len];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学之DES算法</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<p>《现代密码学基础》又在讲解经典<code>DES</code>算法了，我打算用 C++ 写了一个。本文介绍了 <code>DES</code> 算法加密的大致步骤和整体流程。</p><h2 id="一、DES-算法介绍">一、DES 算法介绍</h2><h3 id="1-介绍">1.介绍</h3><p>DES 算法为密码体制中的对称密码体制，⼜被称为美国数据加密标准。DES 是⼀个分组加密算法，典型的<code>DES</code>以<code>64</code>位为分组对数据加密，<code>加密和解密⽤的是同⼀个算法。</code></p><p>DES 使用 56 位的密钥和 64 位的明文块进行加密。DES 算法的分组大小是 64 位，因此，如果需要加密的明文长度不足 64 位，需要进行填充；如果明文长度超过 64 位，则需要使用分组模式进行分组加密。</p><h3 id="2-流程">2.流程</h3><p><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_7a2887dc6e-1.png" alt="1.png"></p><ul><li><p>1.初始置换（IP 置换）：将输入的 64 位明文块进行置换和重新排列，生成新的 64 位数据块。</p></li><li><p>2.加密轮次：DES 加密算法共有 16 个轮次，每个轮次都包括四个步骤：</p><ul><li><p>2.1. 将 64 位数据块分为左右两个 32 位块。</p></li><li><p>2.2. 右侧 32 位块作为输入，经过扩展、异或、置换等操作生成一个 48 位的数据块。这个 48 位的数据块被称为“轮密钥”，它是根据加密算法的主密钥生成的子密钥。</p></li><li><p>2.3. 将左侧 32 位块和轮密钥进行异或运算，结果作为新的右侧 32 位块。</p></li><li><p>2.4. 将右侧 32 位块与原来的左侧 32 位块进行连接，生成一个新的 64 位数据块，作为下一轮的输入。</p></li></ul></li><li><p>3.末置换（FP 置换）：在最后一个轮次完成后，将经过加密的数据块进行置换和重新排列，得到加密后的 64 位密文。</p></li><li><p>4.逆置换：在经过 16 轮次计算后，DES 会对最后的结果进行最后一次置换。即为最后的输出结果</p></li></ul><p>总的来说，DES 加密的过程就是通过一系列置换、异或、扩展等运算，将明文分成<strong>若干个小块</strong>，然后根据主密钥生成一系列的轮密钥，利用轮密钥对每个小块进行加密，最终将加密结果<strong>重新组合成一个整体</strong>，得到密文。</p><h2 id="二、DES-算法详解">二、DES 算法详解</h2><blockquote><p>注意这里的 DES 用的许多函数都是固定的，公开的函数(因此并没有密码含义)，即已知条件，没有密码含义，下面会加粗提心！！！</p></blockquote><h3 id="1-初始置换-Initial-Permutation，IP-置换">1.初始置换(Initial Permutation，IP 置换)</h3><p>IP 置换是将输入的 64 位明文块进行置换和重新排列，生成新的 64 位数据块。</p><p>目的:增加加密的混乱程度，使明文中的每一位都能够对后面的加密过程产生影响，提高加密强度。</p><p>我们将把 64 位的顺序按下表中规定的顺序放置，图中的数字是在 64 位明文中每个比特的索引位置。<strong>注意，在 DES 中，这个置放规则是固定的</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始置换</span></span><br><span class="line"><span class="type">int</span> IP[] = &#123; <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">             <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">             <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">             <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">             <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,  <span class="number">1</span>,</span><br><span class="line">             <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">             <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">             <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即将原来位于第 58 个位置的数据放在第 1 个位置，原来位于第 50 个位置的元素放在第 2 个位置，第 42 个放在第 3 个，34-&gt;4 以此类推…</p><p>初始置换的逆置换（Final Permutation，FP 置换）是将加密后的数据块进行置换和重新排列，得到最终的加密结果，与初始置换相对应。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逆置换表</span></span><br><span class="line"><span class="type">int</span> IP_1[] = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">              <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">              <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">              <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">              <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">              <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">              <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">              <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-加密轮次">2.加密轮次</h3><p>初始置换完成后，明文被划分成了相同长度（32 位）的左右两部分，记作 L0,R0。接下来就会进行 16 个轮次的加密了。<br>我们从单独一个轮次来看。首先把目光聚焦在 R0 这里。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_844c3f1a6e-4-C.png" alt="4-C.png"></p><p>右半部分 R0 会作为下一轮次的左半部分 L1 的输入。以此类推，重复 16 轮运算。所以，上面描述的过程可以用以下公式表述。</p><blockquote><p>因为 R0 只有 32 位，R0 会补位到 48 位和本轮次生成的 48 位 K0(马上讲 K0 的生成)输入到 F 轮函数中去。F 函数的输出结果为 32 位，结果 F(R0,K0)会和 L0 进行异或运算作为下一轮次右半部分 R1 的输入。</p></blockquote><p>$$<br>R_i = F_i(R_{i-1}) ⊕ L_{i-1}<br>$$</p><p>$$<br>L_i = R_{i-1}<br>$$</p><h3 id="3-f-函数详细过程-R0">3.f 函数详细过程(R0)</h3><p><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_870f17c26e-3.png" alt="3.png"></p><p>密码函数 f(R, K)接受两个输入：32 位的数据和 48 位的子密钥。然后：</p><ul><li><p>通过表 E 进行扩展置换，将输入的 32 位数据扩展为 48 位；</p></li><li><p>将扩展后的 48 位数据与 48 位的子密钥（ki)进行异或运算；</p></li><li><p>将异或得到的 48 位数据分成 8 个 6 位的块，每一个块通过对应的一个 S 表产生一个 4 位的输出。其中，每个 S 表都是 4 行 16 列。具体的置换过程如下：把 6 位输入中的第 1 位和第 6 位取出来行成一个两位的二进制数 x ，作为 Si 表中的行数（0~3）；把 6 位输入的中间 4 位构成另外一个二进制数 y，作为 Si 表的列数（0~15）；查出 Si 表中 x 行 y 列所对应的整数，将该整数转换为一个 4 位的二进制数。</p></li><li><p>把通过 S 表置换得到的 8 个 4 位连在一起，形成一个 32 位的数据。然后将该 32 位数据通过表 P 进行置换（称为 P-置换），置换后得到一个仍然是 32 位的结果数据，这就是 f(R, K)函数的输出。</p></li></ul><h4 id="3-1-拓展-R-到-48-位">3.1 拓展 R 到 48 位</h4><p>将 32 位的 R0 右半部分进行扩展，得到一个 48 位的数据块。同样的，数据拓展也是根据一个<strong>固定的置换表</strong>。红框中就是我们要补位的数据。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_029f9e7a6f-15.png" alt="15.png"><br>由此可见，扩展过程的每一位都是根据上述的置换表从输入的 32 位数据块中提取出来的。原始数据的第 32 位被补充到了新增列的第一个，第 5 位被补充到了第二个新增列的第一个，以此类推…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展置换表，将 32位 扩展至 48位</span></span><br><span class="line"><span class="type">int</span> E[] = &#123;<span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,</span><br><span class="line">    <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">    <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">   <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">   <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">   <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">   <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">   <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-2-子密钥-K-的生成">3.2 子密钥 K 的生成</h4><p>DES 算法采用了每轮子密钥生成的方式来增加密钥的复杂性和安全性。每轮子密钥都是由主密钥（64 位）通过密钥调度算法（Key Schedule Algorithm）生成的。DES 算法的密钥调度算法可以将 64 位的主密钥分成 16 个子密钥，每个子密钥 48 位，用于每轮加密中与输入数据进行异或运算。<br>通过子密钥生成的流程图来看下整个过程。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_5922da0b6f-2.png" alt="2.png"></p><ul><li>1、将 64 位主密钥经过置换选择 1（Permuted Choice 1 简写为 PC-1）后输出了 56 位，将其分为左右两个 28 位的数据块，分别记为 C0 和 D0。同上面我们讲过的置换规则一样，PC-1 置换函数也是一个<strong>固定的置换表</strong>，即下图左上角<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_2b077c766f-5.jpg" alt="5.jpg"><br>从 PC-1 的置换表中可以看到，舍弃掉的 8 位数据是原始数据中每 8 位数据的最后一位，也就是我们所熟知的奇偶检验位。这 8 位被丢弃是因为它们对于密钥的安全性没有贡献，而且能够使 DES 算法的计算速度更快。</li><li>2、对 C0 和 D0 进行循环左移操作。循环左移完成后生成 C1 和 D1。因此，在 16 个轮次的计算当中会得到 16 个 32 位的数据块 C1-C16 和 D1-D16。在 DES 中循环左移也有固定的规则。</li></ul><blockquote><p>对于 Ci 和 Di，若 i 为 1，2，9 或 16，则循环左移一位，否则循环左移两位。</p></blockquote><ul><li><p>3、 对于 C1，D1，将它们经过置换选择 2(Permuted Choice 2 简写位 PC-2）后，得到 48 位的子密钥 K1，用于每轮加密中与输入数据进行异或运算。PC-2 置换的输入是由 PC-1 置换生成的 56 位的密钥，而它的输出是 48 位的子密钥。PC-2 置换将 56 位的密钥重新排列，丢弃了 8 位并选取了其中的 48 位作为子密钥。PC-2 的置换规则如下：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_f2addb3a6f-5.png" alt="5.png"><br>即 PC-2 置换表的第一行表示选择了输入密钥中的第 14、17、11、24、1 和 5 位，并将它们作为输出子密钥的前 6 位。以此类推</p></li><li><p>4、至此，经过 PC-2 后的结果就是我们当前轮次的子密钥 K1 了。在整个 DES 加密过程中会生成 16 个 48 位子密钥 K1-K16，分别用于 DES 算法中的 16 轮加密过程，从而保证每轮加密所使用的密钥都是不同的，增加了破解的难度。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 密钥置换表，将64位密钥变成56位</span></span><br><span class="line"><span class="type">int</span> PC_1[] = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">   <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">  <span class="number">10</span>,  <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">  <span class="number">19</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">  <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">   <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">  <span class="number">14</span>,  <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">  <span class="number">21</span>, <span class="number">13</span>,  <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>,  <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩置换，将56位密钥压缩成48位子密钥</span></span><br><span class="line"><span class="type">int</span> PC_2[] = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>,  <span class="number">1</span>,  <span class="number">5</span>,</span><br><span class="line">   <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>,  <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</span><br><span class="line">  <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">26</span>,  <span class="number">8</span>,</span><br><span class="line">  <span class="number">16</span>,  <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>,  <span class="number">2</span>,</span><br><span class="line">  <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</span><br><span class="line">  <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</span><br><span class="line">  <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</span><br><span class="line">  <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每轮左移的位数</span></span><br><span class="line"><span class="type">int</span> shiftBits[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-3-当前轮次的子密钥与拓展的-48-位-R-进行异或运算">3.3 当前轮次的子密钥与拓展的 48 位 R 进行异或运算</h4><p>当前轮次的子密钥 Ki 与拓展的 48 位 Ri 进行异或运算。运算结果会作为接下来 S 盒替换的输入</p><h4 id="3-4-S-盒替换（Substitution-Box-substitution）">3.4 S 盒替换（Substitution Box substitution）</h4><blockquote><p>S 盒替换（Substitution Box substitution）是一种在密码学中广泛使用的加密技术。它是将明文中的一组比特映射到密文中的一组比特的过程，用于增强密码的安全性。DES 中 S 盒替换用于将上一轮异或运算的 48 位结果映射到 32 位输出中去。</p></blockquote><p>同样的，S 盒也是一种置换表。在 DES 的每一轮计算中 S 盒都是不一样的。这里我以第一轮计算中的 S 盒为例。从上图中我们看到，S 盒内部有 8 个 S 块，记作 S1-S8。每个 S 块都会接收 6 位字符作为输入并输出四位字符。这里我们以第一个 S 盒 S1 为例。他是一个 4*16 的置换表。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_b265ded06f-6.png" alt="6.png"><br>例如输入<code>101010</code>到<code>S1</code>中。<code>S1</code>会将这六位的第一位和第六位拿出来<code>10</code>作为<code>S1</code>的行，中间四位<code>0101</code>拿出来作为<code>S1</code>的列。我们转换成十进制，此时映射到这个 S 盒的位置就是<code>(2,5)</code>对应 S 盒的第<code>3</code>行第<code>6</code>列（索引都从<code>0</code>开始数）。<br>所以这个输入的结果是 6，将 6 转化为二进制 110，S 盒的输出是 4 位，所以得<code>S(101010)</code>=<code>0110</code></p><blockquote><p>因此，可以看到 S 盒其实是一种非线性的加密技术，它能够抵御许多传统的密码分析攻击，如差分攻击和线性攻击。</p></blockquote><h4 id="3-5-P-盒替换">3.5 P 盒替换</h4><p><img src="https://cdn.acwing.com/media/article/image/2023/10/20/169037_554de9766f-7.png" alt="7.png"><br>P 盒替换将 S 盒替换的 32 位输出作为输入，经过上述固定的替换表进行替换后即为最后 F 轮函数的结果。</p><p>该结果 F(R0,K0)与 L0 进行异或运算得到下一轮的右半部分 R1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S盒，每个S盒是4x16的置换表，6位 -&gt; 4位</span></span><br><span class="line"><span class="type">int</span> S_BOX[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P置换，32位 -&gt; 32位</span></span><br><span class="line"><span class="type">int</span> P[] = &#123;<span class="number">16</span>,  <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">   <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">    <span class="number">2</span>,  <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>,</span><br><span class="line">   <span class="number">32</span>, <span class="number">27</span>,  <span class="number">3</span>,  <span class="number">9</span>,</span><br><span class="line">   <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>,  <span class="number">6</span>,</span><br><span class="line">   <span class="number">22</span>, <span class="number">11</span>,  <span class="number">4</span>, <span class="number">25</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="4-逆置换（Inverse-Permutation）">4 逆置换（Inverse Permutation）</h3><p>合并 L16 和 R16 得到一个 64 位的数据，再经过尾置换后得到的就是 64 位的密文。注意：要将 L16 和 R16 合并成 R16L16（即左右互换）。尾置换表 IP-1 如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尾置换表</span></span><br><span class="line"><span class="type">int</span> IP_1[] = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">  <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">  <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">  <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">  <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">  <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">  <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">  <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="三、C-代码实现">三、C++代码实现</h2><h3 id="1、加密">1、加密</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">bitset&lt;64&gt; key;                <span class="comment">// 64位密钥</span></span><br><span class="line">bitset&lt;48&gt; subKey[<span class="number">16</span>];         <span class="comment">// 存放16轮子密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始置换表</span></span><br><span class="line"><span class="type">int</span> IP[] = &#123;<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line"><span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line"><span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line"><span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,  <span class="number">1</span>,</span><br><span class="line"><span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line"><span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line"><span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结尾置换表</span></span><br><span class="line"><span class="type">int</span> IP_1[] = &#123;<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">  <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">  <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">  <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">  <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">  <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">  <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">  <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>,  <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------下面是生成密钥所用表-----------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥置换表，将64位密钥变成56位</span></span><br><span class="line"><span class="type">int</span> PC_1[] = &#123;<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">   <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">  <span class="number">10</span>,  <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">  <span class="number">19</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">  <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">   <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">  <span class="number">14</span>,  <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">  <span class="number">21</span>, <span class="number">13</span>,  <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>,  <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩置换，将56位密钥压缩成48位子密钥</span></span><br><span class="line"><span class="type">int</span> PC_2[] = &#123;<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>,  <span class="number">1</span>,  <span class="number">5</span>,</span><br><span class="line">   <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>,  <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</span><br><span class="line">  <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">26</span>,  <span class="number">8</span>,</span><br><span class="line">  <span class="number">16</span>,  <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>,  <span class="number">2</span>,</span><br><span class="line">  <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</span><br><span class="line">  <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</span><br><span class="line">  <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</span><br><span class="line">  <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每轮左移的位数</span></span><br><span class="line"><span class="type">int</span> shiftBits[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*------------------下面是密码函数 f 所用表-----------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展置换表，将 32位 扩展至 48位</span></span><br><span class="line"><span class="type">int</span> E[] = &#123;<span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,</span><br><span class="line">    <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">    <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">   <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">   <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">   <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">   <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">   <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// S盒，每个S盒是4x16的置换表，6位 -&gt; 4位</span></span><br><span class="line"><span class="type">int</span> S_BOX[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">15</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">15</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">15</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">9</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">15</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">15</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">3</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">14</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>&#125;,</span><br><span class="line">&#123;<span class="number">14</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">14</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">12</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">11</span>&#125;,</span><br><span class="line">&#123;<span class="number">10</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">9</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">0</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">6</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">15</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">12</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">13</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">15</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">14</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">14</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P置换，32位 -&gt; 32位</span></span><br><span class="line"><span class="type">int</span> P[] = &#123;<span class="number">16</span>,  <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">   <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">    <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>,</span><br><span class="line">    <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">    <span class="number">2</span>,  <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>,</span><br><span class="line">   <span class="number">32</span>, <span class="number">27</span>,  <span class="number">3</span>,  <span class="number">9</span>,</span><br><span class="line">   <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>,  <span class="number">6</span>,</span><br><span class="line">   <span class="number">22</span>, <span class="number">11</span>,  <span class="number">4</span>, <span class="number">25</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/*                                                                    */</span></span><br><span class="line"><span class="comment">/*                            下面是DES算法实现                         */</span></span><br><span class="line"><span class="comment">/*                                                                    */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  密码函数f，接收32位数据和48位子密钥，产生一个32位的输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;32&gt; <span class="title">f</span><span class="params">(bitset&lt;<span class="number">32</span>&gt; R, bitset&lt;<span class="number">48</span>&gt; k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;48&gt; expandR;</span><br><span class="line"><span class="comment">// 第一步：扩展置换，32 -&gt; 48</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; ++i)</span><br><span class="line">expandR[<span class="number">47</span>-i] = R[<span class="number">32</span>-E[i]];</span><br><span class="line"><span class="comment">// 第二步：异或</span></span><br><span class="line">expandR = expandR ^ k;</span><br><span class="line"><span class="comment">// 第三步：查找S_BOX置换表</span></span><br><span class="line">bitset&lt;32&gt; output;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; i=i+<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> row = expandR[<span class="number">47</span>-i]*<span class="number">2</span> + expandR[<span class="number">47</span>-i<span class="number">-5</span>];</span><br><span class="line"><span class="type">int</span> col = expandR[<span class="number">47</span>-i<span class="number">-1</span>]*<span class="number">8</span> + expandR[<span class="number">47</span>-i<span class="number">-2</span>]*<span class="number">4</span> + expandR[<span class="number">47</span>-i<span class="number">-3</span>]*<span class="number">2</span> + expandR[<span class="number">47</span>-i<span class="number">-4</span>];</span><br><span class="line"><span class="type">int</span> num = S_BOX[i/<span class="number">6</span>][row][col];</span><br><span class="line"><span class="function">bitset&lt;4&gt; <span class="title">binary</span><span class="params">(num)</span></span>;</span><br><span class="line">output[<span class="number">31</span>-x] = binary[<span class="number">3</span>];</span><br><span class="line">output[<span class="number">31</span>-x<span class="number">-1</span>] = binary[<span class="number">2</span>];</span><br><span class="line">output[<span class="number">31</span>-x<span class="number">-2</span>] = binary[<span class="number">1</span>];</span><br><span class="line">output[<span class="number">31</span>-x<span class="number">-3</span>] = binary[<span class="number">0</span>];</span><br><span class="line">x += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四步：P-置换，32 -&gt; 32</span></span><br><span class="line">bitset&lt;32&gt; tmp = output;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">output[<span class="number">31</span>-i] = tmp[<span class="number">32</span>-P[i]];</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  对56位密钥的前后部分进行左移</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;28&gt; <span class="title">leftShift</span><span class="params">(bitset&lt;<span class="number">28</span>&gt; k, <span class="type">int</span> shift)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;28&gt; tmp = k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">27</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i-shift&lt;<span class="number">0</span>)</span><br><span class="line">k[i] = tmp[i-shift+<span class="number">28</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">k[i] = tmp[i-shift];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  生成16个48位的子密钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">generateKeys</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;56&gt; realKey; <span class="comment">// 密钥key(64) -&gt;  密钥realKey(56) -&gt; 最终每一轮的密钥compressKey(48)</span></span><br><span class="line">bitset&lt;28&gt; left;</span><br><span class="line">bitset&lt;28&gt; right;</span><br><span class="line">bitset&lt;48&gt; compressKey;</span><br><span class="line"><span class="comment">// 去掉奇偶标记位，将64位密钥变成56位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">realKey[<span class="number">55</span>-i] = key[<span class="number">64</span> - PC_1[i]];</span><br><span class="line"><span class="comment">// 生成子密钥，保存在 subKeys[16] 中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 前28位与后28位</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">28</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">left[i<span class="number">-28</span>] = realKey[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">28</span>; ++i)</span><br><span class="line">right[i] = realKey[i];</span><br><span class="line"><span class="comment">// 左移</span></span><br><span class="line">left = <span class="built_in">leftShift</span>(left, shiftBits[round]);</span><br><span class="line">right = <span class="built_in">leftShift</span>(right, shiftBits[round]);</span><br><span class="line"><span class="comment">// 压缩置换，由56位得到48位子密钥</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">28</span>; i&lt;<span class="number">56</span>; ++i)</span><br><span class="line">realKey[i] = left[i<span class="number">-28</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">28</span>; ++i)</span><br><span class="line">realKey[i] = right[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">48</span>; ++i)</span><br><span class="line">compressKey[<span class="number">47</span>-i] = realKey[<span class="number">56</span> - PC_2[i]];</span><br><span class="line">subKey[round] = compressKey;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  工具函数：将char字符数组转为二进制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;64&gt; <span class="title">charToBitset</span><span class="params">(<span class="type">const</span> <span class="type">char</span> s[<span class="number">8</span>])</span> <span class="comment">// 比如说明文或者密文都需要转成二进制</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;64&gt; bits;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; ++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)</span><br><span class="line">bits[i*<span class="number">8</span>+j] = ((s[i]&gt;&gt;j) &amp; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> bits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  DES加密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;64&gt; <span class="title">encrypt</span><span class="params">(bitset&lt;<span class="number">64</span>&gt;&amp; plain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;64&gt; cipher;</span><br><span class="line">bitset&lt;64&gt; currentBits;</span><br><span class="line">bitset&lt;32&gt; left;</span><br><span class="line">bitset&lt;32&gt; right;</span><br><span class="line">bitset&lt;32&gt; newLeft;</span><br><span class="line"><span class="comment">// 第一步：初始置换IP</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">currentBits[<span class="number">63</span>-i] = plain[<span class="number">64</span>-IP[i]];</span><br><span class="line"><span class="comment">// 第二步：获取 Li 和 Ri</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">left[i<span class="number">-32</span>] = currentBits[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">right[i] = currentBits[i];</span><br><span class="line"><span class="comment">// 第三步：共16轮迭代</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round)</span><br><span class="line">&#123;</span><br><span class="line">newLeft = right;</span><br><span class="line">right = left ^ <span class="built_in">f</span>(right,subKey[round]);</span><br><span class="line">left = newLeft;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四步：合并L16和R16，注意合并为 R16L16</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">cipher[i] = left[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">cipher[i] = right[i<span class="number">-32</span>];</span><br><span class="line"><span class="comment">// 第五步：结尾置换IP-1</span></span><br><span class="line">currentBits = cipher;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">cipher[<span class="number">63</span>-i] = currentBits[<span class="number">64</span>-IP_1[i]];</span><br><span class="line"><span class="comment">// 返回密文</span></span><br><span class="line"><span class="keyword">return</span> cipher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  DES解密</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">bitset&lt;64&gt; <span class="title">decrypt</span><span class="params">(bitset&lt;<span class="number">64</span>&gt;&amp; cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bitset&lt;64&gt; plain; <span class="comment">// 解密后的明文</span></span><br><span class="line">bitset&lt;64&gt; currentBits;</span><br><span class="line">bitset&lt;32&gt; left;</span><br><span class="line">bitset&lt;32&gt; right;</span><br><span class="line">bitset&lt;32&gt; newLeft;</span><br><span class="line"><span class="comment">// 第一步：初始置换IP</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">currentBits[<span class="number">63</span>-i] = cipher[<span class="number">64</span>-IP[i]];</span><br><span class="line"><span class="comment">// 第二步：获取 Li 和 Ri</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">left[i<span class="number">-32</span>] = currentBits[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">right[i] = currentBits[i];</span><br><span class="line"><span class="comment">// 第三步：共16轮迭代（子密钥逆序应用）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round)</span><br><span class="line">&#123;</span><br><span class="line">newLeft = right;</span><br><span class="line">right = left ^ <span class="built_in">f</span>(right,subKey[<span class="number">15</span>-round]);</span><br><span class="line">left = newLeft;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第四步：合并L16和R16，注意合并为 R16L16</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</span><br><span class="line">plain[i] = left[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">plain[i] = right[i<span class="number">-32</span>];</span><br><span class="line"><span class="comment">// 第五步：结尾置换IP-1</span></span><br><span class="line">currentBits = plain;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">64</span>; ++i)</span><br><span class="line">plain[<span class="number">63</span>-i] = currentBits[<span class="number">64</span>-IP_1[i]];</span><br><span class="line"><span class="comment">// 返回明文</span></span><br><span class="line"><span class="keyword">return</span> plain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"><span class="comment">/* 测试：                                                             */</span></span><br><span class="line"><span class="comment">/*     1.将一个 64 位的字符串加密， 把密文写入文件 a.txt                  */</span></span><br><span class="line"><span class="comment">/*     2.读取文件 a.txt 获得 64 位密文，解密之后再写入 b.txt              */</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s = <span class="string">&quot;romantic&quot;</span>;</span><br><span class="line">string k = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">bitset&lt;64&gt; plain = <span class="built_in">charToBitset</span>(s.<span class="built_in">c_str</span>());</span><br><span class="line">key = <span class="built_in">charToBitset</span>(k.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="comment">// 生成16个子密钥</span></span><br><span class="line"><span class="built_in">generateKeys</span>();</span><br><span class="line"><span class="comment">// 密文写入 a.txt</span></span><br><span class="line">bitset&lt;64&gt; cipher = <span class="built_in">encrypt</span>(plain);</span><br><span class="line">fstream file1;</span><br><span class="line">file1.<span class="built_in">open</span>(<span class="string">&quot;D://a.txt&quot;</span>, ios::binary | ios::out);</span><br><span class="line">file1.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;cipher,<span class="built_in">sizeof</span>(cipher));</span><br><span class="line">file1.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件 a.txt</span></span><br><span class="line">bitset&lt;64&gt; temp;</span><br><span class="line">file1.<span class="built_in">open</span>(<span class="string">&quot;D://a.txt&quot;</span>, ios::binary | ios::in);</span><br><span class="line">file1.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;temp, <span class="built_in">sizeof</span>(temp));</span><br><span class="line">file1.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密，并写入文件 b.txt</span></span><br><span class="line">bitset&lt;64&gt; temp_plain = <span class="built_in">decrypt</span>(temp);</span><br><span class="line">file1.<span class="built_in">open</span>(<span class="string">&quot;D://b.txt&quot;</span>, ios::binary | ios::out);</span><br><span class="line">file1.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;temp_plain,<span class="built_in">sizeof</span>(temp_plain));</span><br><span class="line">file1.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-解密">2.解密</h3><p>那么，在对 64 位的数据加解密成功以后，对文件的加解密就很简单了！只需要每次读 64 位，加密以后，将 64 位的密文写入另外一个文件……如此循环，直到文件尾。下面是对一张图片进行加密和解密的测试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string k = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line">key = <span class="built_in">charToBitset</span>(k.<span class="built_in">c_str</span>());</span><br><span class="line"><span class="built_in">generateKeys</span>();   <span class="comment">// 生成16个子密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件 flower.jpg 加密到 cipher.txt 中</span></span><br><span class="line">ifstream in;</span><br><span class="line">ofstream out;</span><br><span class="line">in.<span class="built_in">open</span>(<span class="string">&quot;D://flower.jpg&quot;</span>, ios::binary);</span><br><span class="line">out.<span class="built_in">open</span>(<span class="string">&quot;D://cipher.txt&quot;</span>, ios::binary);</span><br><span class="line">bitset&lt;64&gt; plain;</span><br><span class="line"><span class="keyword">while</span>(in.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;plain, <span class="built_in">sizeof</span>(plain)))</span><br><span class="line">&#123;</span><br><span class="line">bitset&lt;64&gt; cipher  = <span class="built_in">encrypt</span>(plain);</span><br><span class="line">out.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;cipher, <span class="built_in">sizeof</span>(cipher));</span><br><span class="line">plain.<span class="built_in">reset</span>();  <span class="comment">// 置0</span></span><br><span class="line">&#125;</span><br><span class="line">in.<span class="built_in">close</span>();</span><br><span class="line">out.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密 cipher.txt，并写入图片 flower1.jpg</span></span><br><span class="line">in.<span class="built_in">open</span>(<span class="string">&quot;D://cipher.txt&quot;</span>, ios::binary);</span><br><span class="line">out.<span class="built_in">open</span>(<span class="string">&quot;D://flower1.jpg&quot;</span>, ios::binary);</span><br><span class="line"><span class="keyword">while</span>(in.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;plain, <span class="built_in">sizeof</span>(plain)))</span><br><span class="line">&#123;</span><br><span class="line">bitset&lt;64&gt; temp  = <span class="built_in">decrypt</span>(plain);</span><br><span class="line">out.<span class="built_in">write</span>((<span class="type">char</span>*)&amp;temp, <span class="built_in">sizeof</span>(temp));</span><br><span class="line">plain.<span class="built_in">reset</span>();  <span class="comment">// 置0</span></span><br><span class="line">&#125;</span><br><span class="line">in.<span class="built_in">close</span>();</span><br><span class="line">out.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、总结">四、总结</h2><p>5、DES 的优缺点<br>优点：</p><p>安全性高：DES 算法使用密钥进行加密和解密，相同的明文使用不同的密钥加密后得到的密文是不同的。密钥越长，加密的安全性就越高。<br>算法简单：DES 算法的加密和解密过程非简单，基于对称加密，使用相同的 key 进行加解密。<br>适用广泛：DES 算法是最早也是最广泛使用的加密算法之一，被广泛应用于电子商务、电子邮件、虚拟私人网络等领域，具有广泛的适用性和可移植性。<br>缺点：</p><p>密钥长度较短：DES 算法使用 56 位密钥，虽然在当时足够安全，但在当前计算机的处理能力下，已经不足以保证加密的安全性，易受到暴力破解攻击。<br>无法抵抗差分密码分析攻击：DES 算法无法抵抗差分密码分析攻击，这种攻击可以通过比较相同明文的密文，分析加密算法的行为并推断出密钥。<br>比较慢：由于 DES 算法是一种分组密码算法，需要对 64 位的明文进行加密，加密速度比较慢，不适用于对大量数据进行实时加密和解密。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学之AES算法</title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、AES-算法介绍">一、AES 算法介绍</h2><p><code>AES</code> 的全称是 <code>Advanced Encryption Standard</code>，意思是高级加密标准。它的出现主要是为了取代 <code>DES</code> 加密算法的，因为我们都知道 <code>DES</code> 算法的密钥长度是 <code>56Bit</code>，因此算法的理论安全强度是 <code>2</code> 的 <code>56</code> 次方。但二十世纪中后期正是计算机飞速发展的阶段，元器件制造工艺的进步使得计算机的处理能力越来越强，虽然出现了 <code>3DES</code> 的加密方法，但由于它的加密时间是 <code>DES</code> 算法的 3 倍多，64Bit 的分组大小相对较小，所以还是不能满足人们对安全性的要求。于是 1997 年 1 月 2 号，美国国家标准技术研究所宣布希望征集高级加密标准，用以取代 <code>DES</code>。AES 也得到了全世界很多密码工作者的响应，先后有很多人提交了自己设计的算法。最终有 5 个候选算法进入最后一轮：<code>Rijndael</code>，<code>Serpent</code>，<code>Twofish</code>，<code>RC6 </code>和 <code>MARS</code>。最终经过安全性分析、软硬件性能评估等严格的步骤，<code>Rijndael </code>算法获胜。</p><p>在密码标准征集中，所有 AES 候选提交方案都必须满足以下标准：</p><ul><li>分组大小为 128 位的分组密码。</li><li>必须支持三种密码标准：128 位、192 位和 256 位。</li><li>比提交的其他算法更安全。</li><li>在软件和硬件实现上都很高效。</li></ul><p><code>AES</code> 密码与分组密码 Rijndael 基本上完全一致，Rijndael 分组大小和密钥大小都可以为 128 位、192 位和 256 位。然而 <code>AES </code>只要求分组大小为 128 位，因此只有分组长度为 128Bit 的 Rijndael 才称为 <code>AES </code>算法。本文只对分组大小 128 位，密钥长度也为 128 位的 Rijndael 算法进行分析。密钥长度为 192 位和 256 位的处理方式和 128 位的处理方式类似，只不过密钥长度每增加 64 位，算法的循环次数就增加 2 轮，128 位循环 10 轮、192 位循环 12 轮、256 位循环 14 轮。</p><hr><h2 id="二、原理">二、原理</h2><h3 id="1-流程">1.流程</h3><p><code>AES </code>算法（即 Rijndael 算法）是一个对称分组密码算法。数据分组长度必须是 128 bits，使用的密钥长度为 128，192 或 256 bits。对于三种不同密钥长度的 <code>AES </code>算法，分别称为“AES-128”、“AES-192”、“AES-256”。（Rijndael 的设计还可以处理其它的分组长度和密钥长度，但 <code>AES </code>标准中没有采用）</p><p>下图是 <code>AES </code>加密解密的整体流程图：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/21/169037_7a10e78c6f-2.jpg" alt="2.jpg"></p><hr><h3 id="2-注意">2.注意</h3><ol><li><p><strong>这里用的是<code>AES-128</code></strong>，因此密钥长度<code>128</code>，<code>AES</code>迭代次数<code>10</code>轮</p></li><li><p>AES 的处理单位是字节，128 位的输入明文分组 P 和输入密钥 K 都被分成 16 个字节，一般地，明文分组用以字节为单位的正方形矩阵描述，称为状态(State)矩阵<br><img src="https://cdn.acwing.com/media/article/image/2023/10/21/169037_b2417bdc6f-4.jpg" alt="4.jpg"></p><blockquote><p><strong>注意矩阵中字节的排序顺序是从上到下，从左到右</strong></p></blockquote></li><li><p>这里我们需要知道 3 个符号：<code>Nb</code>—— 状态 State 包含的列（32-bit 字）的个数，也就是说 <code>Nb=4</code>；<code>Nk</code>—— 密钥包含的 32-bit 字的个数，也就是说 <code>Nk=4，6 或 8</code>；<code>Nr</code>—— 加密的轮数，对于不同密钥长度，轮数不一样，具体如下图所示：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/21/169037_89de3f636f-3.jpg" alt="3.jpg"></p><blockquote><p>注意只有<code>Nr - 1</code>次是相同的，最后一轮都少了列混合</p></blockquote></li></ol><p>下面分为<strong>密钥扩展</strong>、<strong>分组加密</strong>、<strong>分组解密</strong>三个部分来讲 <code>AES</code> 算法，C++代码在后面</p><hr><h2 id="三、AES-算法">三、AES 算法</h2><h3 id="1-密钥扩展">1.密钥扩展</h3><h4 id="1-1-流程">1.1 流程</h4><p><code>AES</code> 算法通过密钥扩展程序（Key Expansion）将用户输入的密钥<code> K</code> 扩展生成 <code>Nb(Nr+1)</code>个字，存放在一个线性数组<code>w[Nb*(Nr+1)]</code>中。具体如下：</p><ol><li><p>位置变换函数<code>RotWord()</code>，接受一个字<code> [a0, a1, a2, a3]</code> 作为输入，循环左移一个字节后输出 <code>[a1, a2, a3, a0]</code>。</p></li><li><p><code>S</code>盒变换函数<code>SubWord()</code>，接受一个字 <code>[a0, a1, a2, a3]</code> 作为输入。<code>S</code>盒是一个 16x16 的表，其中每一个元素是一个字节。对于输入的每一个字节，前四位组成十六进制数 <code>x</code> 作为行号，后四位组成的十六进制数 <code>y</code> 作为列号，查找表中对应的值。最后函数输出 <code>4</code> 个新字节组成的 32-bit 字。</p></li><li><p>轮常数<code>Rcon[]</code>，如何计算的就不说了，直接把它当做常量数组。</p></li><li><p>扩展密钥数组<code>w[]</code>的前 <code>Nk </code>个元素就是外部密钥<code> K</code>，以后的元素<code>w[i]</code>等于它前一个元素<code>w[i-1]</code>与前第<code> Nk</code> 个元素<code>w[i-Nk]</code>的异或，即<code>w[i] = w[i-1] XOR w[i-Nk]</code>；但若 <code>i </code>为 <code>Nk</code> 的倍数，则<code>w[i] = w[i-Nk] XOR SubWord(RotWord(w[i-1])) XOR Rcon[i/Nk-1]</code>。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_88dd1f7870-2.png" alt="2.png"><br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_8c5e12a770-3.png" alt="3.png"></p></li></ol><hr><h4 id="1-2-伪代码">1.2 伪代码</h4><h5 id="1-2-1-N-k-6-（主）">1.2.1 $ N_k &lt;= 6$（主）</h5><blockquote><p>即适合 AES-128 和 AES-192，这里只以 AES-128 为例子</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">KeyExpansion</span>(byteKey[<span class="number">4</span> * Nk], W[Nb * (Nr + <span class="number">1</span>)]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Nk; i++)</span><br><span class="line">        W[i] = (Key[<span class="number">4</span> * i], Key[<span class="number">4</span> * i + <span class="number">1</span>], Key[<span class="number">4</span> * i + <span class="number">2</span>], Key[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = Nk; i &lt; Nb * (Nr + <span class="number">1</span>); i++) &#123;</span><br><span class="line">        temp = W[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (i % Nk = = <span class="number">0</span>)</span><br><span class="line">            temp = <span class="built_in">SubByte</span>(<span class="built_in">RotByte</span>(temp)) ^ Rcon[i / Nk];</span><br><span class="line">        W[i] = W[i - Nk] ^ temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-N-k-6-（略）">1.2.2 $ N_k &gt; 6$（略）</h5><blockquote><p>即适合 AES-256，本篇文章不予实现，但给出伪代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">KeyExpansion</span>(byte Key[<span class="number">4</span> * Nk], W[Nb * (Nr + <span class="number">1</span>)]) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Nk; i++)</span><br><span class="line">        W[i] = (Key[<span class="number">4</span> * i], Key[<span class="number">4</span> * i + <span class="number">1</span>], Key[<span class="number">4</span> * i + <span class="number">2</span>], Key[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = Nk; i &lt; Nb * (Nr + <span class="number">1</span>); i++) &#123;</span><br><span class="line">        temp = W[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (i % Nk = = <span class="number">0</span>)</span><br><span class="line">            temp = <span class="built_in">SubByte</span>(<span class="built_in">RotByte</span>(temp)) ^ Rcon[i / Nk];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i % Nk == <span class="number">4</span>)</span><br><span class="line">            temp = <span class="built_in">SubByte</span>(temp);</span><br><span class="line">        W[i] = W[i - Nk] ^ temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-3-N-k-大小的区别区别">1.2.3 $ N_k $大小的区别区别</h5><p>当$ i - 4 $为$ N_k $的整数倍时，须先将前一个子$ W[i - 1]$经过<code>  SubByte</code>变换（S 盒变换）</p><hr><h4 id="1-3-代码实现">1.3 代码实现</h4><h5 id="1-3-1-代码">1.3.1 代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> bitset&lt;8&gt; byte;</span><br><span class="line"><span class="keyword">typedef</span> bitset&lt;32&gt; word;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Nr = <span class="number">10</span>;  <span class="comment">// AES-128需要 10 轮加密</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Nk = <span class="number">4</span>;   <span class="comment">// Nk 表示输入密钥的 word 个数</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> Nb = <span class="number">4</span>;   <span class="comment">// Nb 表示状态 State 包含的列（32-bit 字）的个数，也就是说 Nb=4</span></span><br><span class="line"></span><br><span class="line">byte S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮常数，密钥扩展中用到。（AES-128只需要10轮）</span></span><br><span class="line">word Rcon[<span class="number">10</span>] = &#123;<span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>, <span class="number">0x10000000</span>,</span><br><span class="line"> <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>, <span class="number">0x1b000000</span>, <span class="number">0x36000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将4个 byte 转换为一个 word.</span></span><br><span class="line"><span class="comment"> * 比如k1 包含十六进制值 0x12，k2 包含 0x34，k3 包含 0x56，k4 包含 0x78。</span></span><br><span class="line"><span class="comment"> * Word 函数将这些字节按照指定的顺序合并成一个 word 对象 result，其十六进制表示为 0x12345678。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">word <span class="title">Word</span><span class="params">(byte&amp; k1, byte&amp; k2, byte&amp; k3, byte&amp; k4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">word <span class="title">result</span><span class="params">(<span class="number">0x00000000</span>)</span></span>;</span><br><span class="line">word temp;</span><br><span class="line">temp = k1.<span class="built_in">to_ulong</span>();  <span class="comment">// K1</span></span><br><span class="line">temp &lt;&lt;= <span class="number">24</span>;</span><br><span class="line">result |= temp;</span><br><span class="line">temp = k2.<span class="built_in">to_ulong</span>();  <span class="comment">// K2</span></span><br><span class="line">temp &lt;&lt;= <span class="number">16</span>;</span><br><span class="line">result |= temp;</span><br><span class="line">temp = k3.<span class="built_in">to_ulong</span>();  <span class="comment">// K3</span></span><br><span class="line">temp &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">result |= temp;</span><br><span class="line">temp = k4.<span class="built_in">to_ulong</span>();  <span class="comment">// K4</span></span><br><span class="line">result |= temp;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  按字节 循环左移一位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">word <span class="title">RotWord</span><span class="params">(<span class="type">const</span> word&amp; rw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//因为word为32位，所以&#123;a2, a3, a4, 00&#125; | &#123;00, 00, 00, a1&#125;，即把[a0, a1, a2, a3]变成[a1, a2, a3, a0]</span></span><br><span class="line">word high = rw &lt;&lt; <span class="number">8</span>;</span><br><span class="line">word low = rw &gt;&gt; <span class="number">24</span>;</span><br><span class="line"><span class="keyword">return</span> high | low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  对输入word中的每一个字节进行S-盒变换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">word <span class="title">SubWord</span><span class="params">(<span class="type">const</span> word&amp; sw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">word temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i+=<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> row = sw[i+<span class="number">7</span>]*<span class="number">8</span> + sw[i+<span class="number">6</span>]*<span class="number">4</span> + sw[i+<span class="number">5</span>]*<span class="number">2</span> + sw[i+<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> col = sw[i+<span class="number">3</span>]*<span class="number">8</span> + sw[i+<span class="number">2</span>]*<span class="number">4</span> + sw[i+<span class="number">1</span>]*<span class="number">2</span> + sw[i];</span><br><span class="line">byte val = S_Box[row][col];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; ++j)</span><br><span class="line">temp[i+j] = val[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  密钥扩展函数 - 对128位密钥进行扩展得到 w[4*(Nr+1)]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KeyExpansion</span><span class="params">(byte key[<span class="number">4</span>*Nk], word w[Nb*(Nr+<span class="number">1</span>)])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">word temp;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// w[]的前4个就是输入的key（注意矩阵里面的排序是从上到下，从左到右</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; Nk)</span><br><span class="line">&#123;</span><br><span class="line">w[i] = <span class="built_in">Word</span>(key[<span class="number">4</span>*i], key[<span class="number">4</span>*i+<span class="number">1</span>], key[<span class="number">4</span>*i+<span class="number">2</span>], key[<span class="number">4</span>*i+<span class="number">3</span>]);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i = Nk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">4</span>*(Nr+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">temp = w[i<span class="number">-1</span>]; <span class="comment">// 记录前一个word</span></span><br><span class="line"><span class="keyword">if</span>(i % Nk == <span class="number">0</span>)</span><br><span class="line">w[i] = w[i-Nk] ^ <span class="built_in">SubWord</span>(<span class="built_in">RotWord</span>(temp)) ^ Rcon[i/Nk<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">w[i] = w[i-Nk] ^ temp;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">byte key[<span class="number">16</span>] = &#123;<span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>,</span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>,</span><br><span class="line">    <span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span>&#125;;</span><br><span class="line"></span><br><span class="line">word w[<span class="number">4</span>*(Nr+<span class="number">1</span>)];</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;KEY IS: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; ++i)</span><br><span class="line">        <span class="comment">//cout &lt;&lt; hex: 这是用于输出的C++代码，它将后续输出的整数以十六进制形式打印。</span></span><br><span class="line">        <span class="comment">//key[i].to_ulong(): 这一部分访问密钥 key 的第 i 个字节，然后使用 to_ulong() 函数将这个字节的二进制值转换为十进制值。</span></span><br><span class="line">cout &lt;&lt; hex &lt;&lt; key[i].<span class="built_in">to_ulong</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">KeyExpansion</span>(key, w);</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>*(Nr+<span class="number">1</span>); ++i)</span><br><span class="line">        <span class="comment">//dec 是一个输出控制符，它告诉 cout 在输出 i（索引）时使用十进制表示</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;w[&quot;</span> &lt;&lt; dec &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; hex &lt;&lt; w[i].<span class="built_in">to_ulong</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-3-2-结果">1.3.2 结果</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">KEY IS: 2b 7e 15 16 28 ae d2 a6 ab f7 15 88 9 cf 4f 3c</span><br><span class="line">w[0] = 2b7e1516</span><br><span class="line">w[1] = 28aed2a6</span><br><span class="line">w[2] = abf71588</span><br><span class="line">w[3] = 9cf4f3c</span><br><span class="line">w[4] = a0fafe17</span><br><span class="line">w[5] = 88542cb1</span><br><span class="line">w[6] = 23a33939</span><br><span class="line">w[7] = 2a6c7605</span><br><span class="line">w[8] = f2c295f2</span><br><span class="line">w[9] = 7a96b943</span><br><span class="line">w[10] = 5935807a</span><br><span class="line">w[11] = 7359f67f</span><br><span class="line">w[12] = 3d80477d</span><br><span class="line">w[13] = 4716fe3e</span><br><span class="line">w[14] = 1e237e44</span><br><span class="line">w[15] = 6d7a883b</span><br><span class="line">w[16] = ef44a541</span><br><span class="line">w[17] = a8525b7f</span><br><span class="line">w[18] = b671253b</span><br><span class="line">w[19] = db0bad00</span><br><span class="line">w[20] = d4d1c6f8</span><br><span class="line">w[21] = 7c839d87</span><br><span class="line">w[22] = caf2b8bc</span><br><span class="line">w[23] = 11f915bc</span><br><span class="line">w[24] = 6d88a37a</span><br><span class="line">w[25] = 110b3efd</span><br><span class="line">w[26] = dbf98641</span><br><span class="line">w[27] = ca0093fd</span><br><span class="line">w[28] = 4e54f70e</span><br><span class="line">w[29] = 5f5fc9f3</span><br><span class="line">w[30] = 84a64fb2</span><br><span class="line">w[31] = 4ea6dc4f</span><br><span class="line">w[32] = ead27321</span><br><span class="line">w[33] = b58dbad2</span><br><span class="line">w[34] = 312bf560</span><br><span class="line">w[35] = 7f8d292f</span><br><span class="line">w[36] = ac7766f3</span><br><span class="line">w[37] = 19fadc21</span><br><span class="line">w[38] = 28d12941</span><br><span class="line">w[39] = 575c006e</span><br><span class="line">w[40] = d014f9a8</span><br><span class="line">w[41] = c9ee2589</span><br><span class="line">w[42] = e13f0cc8</span><br><span class="line">w[43] = b6630ca6</span><br></pre></td></tr></table></figure><hr><h3 id="2-分组加密">2.分组加密</h3><h4 id="2-1-伪代码">2.1 伪代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Cipher</span>(byte in[<span class="number">4</span>*Nb], byte out[<span class="number">4</span>*Nb], word w[Nb*Nr+<span class="number">1</span>])</span><br><span class="line">begin</span><br><span class="line">    byte state[<span class="number">4</span>,Nb]</span><br><span class="line">    state = in</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, w[<span class="number">0</span>, Nb<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> round = <span class="number">1</span> step <span class="number">1</span> to Nr<span class="number">-1</span></span><br><span class="line">        <span class="built_in">SubBytes</span>(state)</span><br><span class="line">        <span class="built_in">ShiftRows</span>(state)</span><br><span class="line">        <span class="built_in">MixColumns</span>(state)</span><br><span class="line">        <span class="built_in">AddRoundKey</span>(state, w[round*Nb, (round+<span class="number">1</span>)*Nb<span class="number">-1</span>])</span><br><span class="line">    end <span class="keyword">for</span></span><br><span class="line">    <span class="built_in">SubBytes</span>(state)</span><br><span class="line">    <span class="built_in">ShiftRows</span>(state)</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, w[Nr*Nb, (Nr+<span class="number">1</span>)*Nb<span class="number">-1</span>])</span><br><span class="line">    Out = state</span><br><span class="line">  end</span><br></pre></td></tr></table></figure><p>从伪代码描述中可以看出，<code>AES </code>加密时涉及到的子程序有<code>SubBytes()</code>、<code>ShiftRows()</code>、<code>MixColumns()</code>和<code>AddRoundKey()</code>,即字节替换，位位移，列混合，密钥轮加。<s>不清楚请自动移步到右侧二、原理的流程图中</s></p><h4 id="2-2-字节替换-SubBytes">2.2 字节替换-SubBytes()</h4><p><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_5ba374e470-9.jpg" alt="9.jpg"><br>在密钥扩展部分已经讲过了，<code>S</code>盒是一个 16 行 16 列的表，表中每个元素都是一个字节。<code>S</code>盒变换很简单：函数<code>SubBytes()</code>接受一个 4x4 的字节矩阵作为输入，对其中的每个字节，前四位组成十六进制数<code>x</code>作为行号，后四位组成的十六进制数 <code>y</code> 作为列号，查找表中对应的值替换原来位置上的字节。</p><h4 id="2-3-行位移-ShiftRows">2.3 行位移-ShiftRows()</h4><p><code>AES</code> 的行移位也是一个简单的左循环移位操作。当密钥长度为<code>128</code>比特时，状态矩阵的第<code>0</code>行左移<code>0</code>字节，第<code>1</code>行左移<code>1</code>字节，第<code>2</code>行左移<code>2</code>字节，第<code>3</code>行左移<code>3</code>字节<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_c69bcb0270-10.png" alt="10.png"></p><h4 id="2-4-列混合-MixColumns">2.4 列混合-MixColumns()</h4><p>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与<strong>固定的矩阵</strong>(即下图左乘后面的矩阵）相乘，得到混淆后的状态矩阵。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_1abc383170-5.png" alt="5.png"><br>这里需要注意的是矩阵元素中的乘法和加法都是定义在居于$Z_2[x]$中不可约多项式$ m(x) = x^8 + x^4 + x^3 + x + 1 $ 构造的$ GF(2^8) $ 上的二元运算。<strong>加法等价于两个字节的异或，乘法运算比较复杂，是伽罗华域（GF,有限域）上的乘法</strong><br>请仔细阅读下面例子，获取计算<code>·2</code>和<code>·3</code><br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_70331a0d70-10.jpg" alt="10.jpg"><br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_42be20ab70-11.jpg" alt="11.jpg"></p><h4 id="2-5-轮密钥加-AddRoundKey">2.5 轮密钥加-AddRoundKey()</h4><p>扩展密钥只参与了这一步。根据当前加密的轮数，用<code>w[]</code>中的<code>4</code>个扩展密钥与矩阵的<code> 4</code> 个列进行按位异或，即将<code>128</code>位轮密钥<code>Ki</code>同状态矩阵中的数据进行逐位异或操作。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_9108e9e670-6.png" alt="6.png"></p><hr><h3 id="3-分组解密">3. 分组解密</h3><h4 id="3-1-伪代码">3.1 伪代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">InvCipher</span>(byte in[<span class="number">4</span>*Nb], byte out[<span class="number">4</span>*Nb], word w[Nb*Nr+<span class="number">1</span>])</span><br><span class="line">begin</span><br><span class="line">    byte state[<span class="number">4</span>,Nb]</span><br><span class="line">    state = in</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, w[Nr*Nb, (Nr+<span class="number">1</span>)*Nb<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">for</span> round = Nr<span class="number">-1</span> step <span class="number">-1</span> downto <span class="number">1</span></span><br><span class="line">        <span class="built_in">InvShiftRows</span>(state)</span><br><span class="line">        <span class="built_in">InvSubBytes</span>(state)</span><br><span class="line">        <span class="built_in">AddRoundKey</span>(state, w[round*Nb, (round+<span class="number">1</span>)*Nb<span class="number">-1</span>])</span><br><span class="line">        <span class="built_in">InvMixColumns</span>(state)</span><br><span class="line">    end <span class="keyword">for</span></span><br><span class="line">    <span class="built_in">SubBytes</span>(state)</span><br><span class="line">    <span class="built_in">ShiftRows</span>(state)</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, w[<span class="number">0</span>, Nb<span class="number">-1</span>])</span><br><span class="line">    Out = state</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>从伪代码描述中可以看出，<code>AES</code> 加密时涉及到的子程序有<code>SubBytes()</code>、<code>ShiftRows()</code>、<code>MixColumns()</code>和<code>AddRoundKey()</code>。下面我们一个一个进行介绍：</p><h4 id="3-2-逆行变换-InvShiftRows">3.2 逆行变换-InvShiftRows()</h4><p>上面讲到<code>ShiftRows()</code>是对矩阵的每一行进行循环左移，所以<code>InvShiftRows()</code>是对矩阵每一行进行循环右移。<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_caa84b2670-7.png" alt="7.png"></p><h4 id="3-3-逆-S-盒变换-InvSubBytes">3.3 逆 S 盒变换-InvSubBytes()</h4><p>与 S 盒变换一样，也是查表，查表的方式也一样，只不过查的是另外一个置换表（S-Box 的逆表，下面 C++代码中有）。</p><h4 id="3-4-逆列变换-InvMixColumns">3.4 逆列变换-InvMixColumns()</h4><p>与列变换的方式一样，只不过计算公式的系数矩阵发生了变化。详细知识请自行去了解，这里我们只需要记住总结的函数即可，如下图：<br><img src="https://cdn.acwing.com/media/article/image/2023/10/22/169037_50a5a8e470-8.png" alt="8.png"></p><hr><h2 id="四、C-代码">四、C++代码</h2><h3 id="1-代码">1. 代码</h3><blockquote><p>有些函数的注释我咋上面密钥扩展中已经写过了，还有解密的过程和加密十分相似，看懂加密解密自然不在话下，这些竹丝便不再重复，若有其他问题请评论提问（￣︶￣）↗ 　<s>先看懂上面一步一步来 ╰（‵□′）╯</s></p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br></pre></td><td class="code"><pre><span class="line">//超详细注释来袭  ψ(｀∇´)ψ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;bitset&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace <span class="keyword">std</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//因为代码中大量使用bit的计算，所以直接typedef，一个字节为<span class="number">8</span>位，一个字<span class="number">32</span>位</span><br><span class="line">typedef bitset&lt;<span class="number">8</span>&gt; <span class="built_in">byte</span><span class="comment">;</span></span><br><span class="line">typedef bitset&lt;<span class="number">32</span>&gt; <span class="built_in">word</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">const <span class="keyword">int</span> Nr = <span class="number">10</span><span class="comment">;  // AES-128需要 10 轮加密</span></span><br><span class="line">const <span class="keyword">int</span> Nk = <span class="number">4</span><span class="comment">;   // Nk 表示输入密钥的 word 个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span> S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>&#125;</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span> Inv_S_Box[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6A</span>, <span class="number">0xD5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x38</span>, <span class="number">0xBF</span>, <span class="number">0x40</span>, <span class="number">0xA3</span>, <span class="number">0x9E</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0xD7</span>, <span class="number">0xFB</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x7C</span>, <span class="number">0xE3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9B</span>, <span class="number">0x2F</span>, <span class="number">0xFF</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8E</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xC4</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0xCB</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x54</span>, <span class="number">0x7B</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xA6</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>, <span class="number">0x3D</span>, <span class="number">0xEE</span>, <span class="number">0x4C</span>, <span class="number">0x95</span>, <span class="number">0x0B</span>, <span class="number">0x42</span>, <span class="number">0xFA</span>, <span class="number">0xC3</span>, <span class="number">0x4E</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0xA1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xD9</span>, <span class="number">0x24</span>, <span class="number">0xB2</span>, <span class="number">0x76</span>, <span class="number">0x5B</span>, <span class="number">0xA2</span>, <span class="number">0x49</span>, <span class="number">0x6D</span>, <span class="number">0x8B</span>, <span class="number">0xD1</span>, <span class="number">0x25</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x72</span>, <span class="number">0xF8</span>, <span class="number">0xF6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xD4</span>, <span class="number">0xA4</span>, <span class="number">0x5C</span>, <span class="number">0xCC</span>, <span class="number">0x5D</span>, <span class="number">0x65</span>, <span class="number">0xB6</span>, <span class="number">0x92</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x6C</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xFD</span>, <span class="number">0xED</span>, <span class="number">0xB9</span>, <span class="number">0xDA</span>, <span class="number">0x5E</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>, <span class="number">0x9D</span>, <span class="number">0x84</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x90</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x8C</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x0A</span>, <span class="number">0xF7</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0xB3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xD0</span>, <span class="number">0x2C</span>, <span class="number">0x1E</span>, <span class="number">0x8F</span>, <span class="number">0xCA</span>, <span class="number">0x3F</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0xAF</span>, <span class="number">0xBD</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0x6B</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x3A</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x67</span>, <span class="number">0xDC</span>, <span class="number">0xEA</span>, <span class="number">0x97</span>, <span class="number">0xF2</span>, <span class="number">0xCF</span>, <span class="number">0xCE</span>, <span class="number">0xF0</span>, <span class="number">0xB4</span>, <span class="number">0xE6</span>, <span class="number">0x73</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x96</span>, <span class="number">0xAC</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xE7</span>, <span class="number">0xAD</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xE2</span>, <span class="number">0xF9</span>, <span class="number">0x37</span>, <span class="number">0xE8</span>, <span class="number">0x1C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x6E</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x47</span>, <span class="number">0xF1</span>, <span class="number">0x1A</span>, <span class="number">0x71</span>, <span class="number">0x1D</span>, <span class="number">0x29</span>, <span class="number">0xC5</span>, <span class="number">0x89</span>, <span class="number">0x6F</span>, <span class="number">0xB7</span>, <span class="number">0x62</span>, <span class="number">0x0E</span>, <span class="number">0xAA</span>, <span class="number">0x18</span>, <span class="number">0xBE</span>, <span class="number">0x1B</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xFC</span>, <span class="number">0x56</span>, <span class="number">0x3E</span>, <span class="number">0x4B</span>, <span class="number">0xC6</span>, <span class="number">0xD2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9A</span>, <span class="number">0xDB</span>, <span class="number">0xC0</span>, <span class="number">0xFE</span>, <span class="number">0x78</span>, <span class="number">0xCD</span>, <span class="number">0x5A</span>, <span class="number">0xF4</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x1F</span>, <span class="number">0xDD</span>, <span class="number">0xA8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xC7</span>, <span class="number">0x31</span>, <span class="number">0xB1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7F</span>, <span class="number">0xA9</span>, <span class="number">0x19</span>, <span class="number">0xB5</span>, <span class="number">0x4A</span>, <span class="number">0x0D</span>, <span class="number">0x2D</span>, <span class="number">0xE5</span>, <span class="number">0x7A</span>, <span class="number">0x9F</span>, <span class="number">0x93</span>, <span class="number">0xC9</span>, <span class="number">0x9C</span>, <span class="number">0xEF</span>&#125;,</span><br><span class="line">&#123;<span class="number">0xA0</span>, <span class="number">0xE0</span>, <span class="number">0x3B</span>, <span class="number">0x4D</span>, <span class="number">0xAE</span>, <span class="number">0x2A</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0xC8</span>, <span class="number">0xEB</span>, <span class="number">0xBB</span>, <span class="number">0x3C</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x04</span>, <span class="number">0x7E</span>, <span class="number">0xBA</span>, <span class="number">0x77</span>, <span class="number">0xD6</span>, <span class="number">0x26</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0C</span>, <span class="number">0x7D</span>&#125;</span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 轮常数，密钥扩展中用到。（AES-<span class="number">128</span>只需要<span class="number">10</span>轮）</span><br><span class="line"><span class="built_in">word</span> Rcon[<span class="number">10</span>] = &#123;<span class="number">0x01000000</span>, <span class="number">0x02000000</span>, <span class="number">0x04000000</span>, <span class="number">0x08000000</span>, <span class="number">0x10000000</span>,</span><br><span class="line"> <span class="number">0x20000000</span>, <span class="number">0x40000000</span>, <span class="number">0x80000000</span>, <span class="number">0x1b000000</span>, <span class="number">0x36000000</span>&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">/**********************************************************************/</span><br><span class="line">/*                                                                    */</span><br><span class="line">/*                              AES算法实现                           */</span><br><span class="line">/*                                                                    */</span><br><span class="line">/**********************************************************************/</span><br><span class="line"></span><br><span class="line">/******************************下面是加密的变换函数**********************/</span><br><span class="line">/**</span><br><span class="line"> *  S盒变换 - SubBytes()接受一个 4x4 的字节矩阵作为输入，</span><br><span class="line"> *  对其中的每个字节，前四位组成十六进制数x作为行号，后四位组成的十六进制数 y 作为列号，</span><br><span class="line"> *  查找表中对应的值替换原来位置上的字节。</span><br><span class="line"> */</span><br><span class="line"> // mtx 是一个包含 <span class="number">16</span> 个 <span class="built_in">byte</span> 元素的一维数组，每个 <span class="built_in">byte</span> 是一个 bitset，它有 <span class="number">8</span> 个位。</span><br><span class="line"> //因此，通过使用 mtx[i][j] 的方式，您可以访问 <span class="built_in">byte</span> 中的单个位</span><br><span class="line">void SubBytes(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row = mtx[i][<span class="number">7</span>]*<span class="number">8</span> + mtx[i][<span class="number">6</span>]*<span class="number">4</span> + mtx[i][<span class="number">5</span>]*<span class="number">2</span> + mtx[i][<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> col = mtx[i][<span class="number">3</span>]*<span class="number">8</span> + mtx[i][<span class="number">2</span>]*<span class="number">4</span> + mtx[i][<span class="number">1</span>]*<span class="number">2</span> + mtx[i][<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">mtx[i] = S_Box[row][col]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  行变换 - 按字节循环移位</span><br><span class="line"> */</span><br><span class="line">void ShiftRows(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">// 第二行循环左移一位</span><br><span class="line"><span class="built_in">byte</span> temp = mtx[<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;3; ++i)</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">5</span>]<span class="comment">;</span></span><br><span class="line">mtx[<span class="number">7</span>] = temp<span class="comment">;</span></span><br><span class="line">// 第三行循环左移两位</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;2; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">temp = mtx[i+<span class="number">8</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">10</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">10</span>] = temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">// 第四行循环左移三位</span><br><span class="line">temp = mtx[<span class="number">15</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">3</span><span class="comment">; i&gt;0; --i)</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">11</span>]<span class="comment">;</span></span><br><span class="line">mtx[<span class="number">12</span>] = temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  有限域上的乘法 GF(<span class="number">2</span>^<span class="number">8</span>)</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">byte</span> GFMul(<span class="built_in">byte</span> a, <span class="built_in">byte</span> b) &#123;</span><br><span class="line"><span class="built_in">byte</span> p = <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">byte</span> hi_bit_set<span class="comment">;</span></span><br><span class="line">for (<span class="keyword">int</span> counter = <span class="number">0</span><span class="comment">; counter &lt; 8; counter++) &#123;</span></span><br><span class="line">if ((b &amp; <span class="built_in">byte</span>(<span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">p ^= a<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">hi_bit_set = (<span class="built_in">byte</span>) (a &amp; <span class="built_in">byte</span>(<span class="number">0x80</span>))<span class="comment">;</span></span><br><span class="line">a &lt;&lt;= <span class="number">1</span><span class="comment">;</span></span><br><span class="line">if (hi_bit_set != <span class="number">0</span>) &#123;</span><br><span class="line">a ^= <span class="number">0x1b</span><span class="comment">; /* x^8 + x^4 + x^3 + x + 1 */</span></span><br><span class="line">&#125;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">return p<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  列混合，用上面说过的公式</span><br><span class="line"> */</span><br><span class="line">void MixColumns(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span> arr[<span class="number">4</span>]<span class="comment">; // 作为未位移的矩阵</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> j=<span class="number">0</span><span class="comment">; j&lt;4; ++j)</span></span><br><span class="line">arr[j] = mtx[i+j*<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">mtx[i] = GFMul(<span class="number">0x02</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">1</span>]) ^ arr[<span class="number">2</span>] ^ arr[<span class="number">3</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = arr[<span class="number">0</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">2</span>]) ^ arr[<span class="number">3</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = arr[<span class="number">0</span>] ^ arr[<span class="number">1</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x03</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = GFMul(<span class="number">0x03</span>, arr[<span class="number">0</span>]) ^ arr[<span class="number">1</span>] ^ arr[<span class="number">2</span>] ^ GFMul(<span class="number">0x02</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  轮密钥加变换 - 将每一列与扩展密钥进行异或</span><br><span class="line"> *  注意<span class="built_in">word</span>和<span class="built_in">byte</span>左移和右移是同普通的没有限制长度的二进制的左移和右移的区别</span><br><span class="line"> */</span><br><span class="line"> /**</span><br><span class="line"> *  实例</span><br><span class="line"> *  假设 k[i] 的二进制表示如下： k[i] = <span class="number">11011010101100110011011001101100</span></span><br><span class="line"></span><br><span class="line"> *  <span class="built_in">k1</span> = k[i] &gt;&gt; <span class="number">24</span>：这将 k[i] 右移<span class="number">24</span>位，保留最高的<span class="number">8</span>位。</span><br><span class="line"></span><br><span class="line"> *  原始 k[i]： <span class="number">11011010101100110011011001101100</span></span><br><span class="line"> *  k[i] 右移<span class="number">24</span>位： <span class="number">0000000011011010</span></span><br><span class="line"> *  <span class="built_in">k2</span> = (k[i] &lt;&lt; <span class="number">8</span>) &gt;&gt; <span class="number">24</span>：这将 k[i] 左移<span class="number">8</span>位（在之前的基础上左移），然后再右移<span class="number">24</span>位，以保留接下来的<span class="number">8</span>位。</span><br><span class="line"></span><br><span class="line"> *  原始 k[i]： <span class="number">11011010101100110011011001101100</span></span><br><span class="line"> *  k[i] 左移<span class="number">8</span>位： <span class="number">10110011011011001101100000000000</span></span><br><span class="line"> *  k[i] 左移<span class="number">8</span>位后右移<span class="number">24</span>位： <span class="number">0000000010110011</span></span><br><span class="line"> *  <span class="built_in">k3</span> = (k[i] &lt;&lt; <span class="number">16</span>) &gt;&gt; <span class="number">24</span>：这将 k[i] 左移<span class="number">16</span>位，然后再右移<span class="number">24</span>位，以保留接下来的<span class="number">8</span>位。</span><br><span class="line"></span><br><span class="line"> *  原始 k[i]： <span class="number">11011010101100110011011001101100</span></span><br><span class="line"> *  k[i] 左移<span class="number">16</span>位： <span class="number">01100110011011000000000000000000</span></span><br><span class="line"> *  k[i] 左移<span class="number">16</span>位后右移<span class="number">24</span>位： <span class="number">0000000001100110</span></span><br><span class="line"> *  <span class="built_in">k4</span> = (k[i] &lt;&lt; <span class="number">24</span>) &gt;&gt; <span class="number">24</span>：这将 k[i] 左移<span class="number">24</span>位，然后再右移<span class="number">24</span>位，以保留最低的<span class="number">8</span>位。</span><br><span class="line"></span><br><span class="line"> *  原始 k[i]： <span class="number">11011010101100110011011001101100</span></span><br><span class="line"> *  k[i] 左移<span class="number">24</span>位： <span class="number">00110011011011000000000000000000</span></span><br><span class="line"> *  k[i] 左移<span class="number">24</span>位后右移<span class="number">24</span>位： <span class="number">0000000000110011</span></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">void AddRoundKey(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>], <span class="built_in">word</span> k[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> <span class="built_in">k1</span> = k[i] &gt;&gt; <span class="number">24</span><span class="comment">; // 最高的8位</span></span><br><span class="line"><span class="built_in">word</span> <span class="built_in">k2</span> = (k[i] &lt;&lt; <span class="number">8</span>) &gt;&gt; <span class="number">24</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">word</span> <span class="built_in">k3</span> = (k[i] &lt;&lt; <span class="number">16</span>) &gt;&gt; <span class="number">24</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">word</span> <span class="built_in">k4</span> = (k[i] &lt;&lt; <span class="number">24</span>) &gt;&gt; <span class="number">24</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">mtx[i] = mtx[i] ^ <span class="built_in">byte</span>(<span class="built_in">k1</span><span class="number">.</span>to_ulong())<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">4</span>] ^ <span class="built_in">byte</span>(<span class="built_in">k2</span><span class="number">.</span>to_ulong())<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">8</span>] ^ <span class="built_in">byte</span>(<span class="built_in">k3</span><span class="number">.</span>to_ulong())<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">12</span>] ^ <span class="built_in">byte</span>(<span class="built_in">k4</span><span class="number">.</span>to_ulong())<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**************************下面是解密的逆变换函数***********************/</span><br><span class="line">/**</span><br><span class="line"> *  逆S盒变换</span><br><span class="line"> */</span><br><span class="line">void InvSubBytes(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row = mtx[i][<span class="number">7</span>]*<span class="number">8</span> + mtx[i][<span class="number">6</span>]*<span class="number">4</span> + mtx[i][<span class="number">5</span>]*<span class="number">2</span> + mtx[i][<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> col = mtx[i][<span class="number">3</span>]*<span class="number">8</span> + mtx[i][<span class="number">2</span>]*<span class="number">4</span> + mtx[i][<span class="number">1</span>]*<span class="number">2</span> + mtx[i][<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">mtx[i] = Inv_S_Box[row][col]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  逆行变换 - 以字节为单位循环右移</span><br><span class="line"> */</span><br><span class="line">void InvShiftRows(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">// 第二行循环右移一位</span><br><span class="line"><span class="built_in">byte</span> temp = mtx[<span class="number">7</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">3</span><span class="comment">; i&gt;0; --i)</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = mtx[i+<span class="number">3</span>]<span class="comment">;</span></span><br><span class="line">mtx[<span class="number">4</span>] = temp<span class="comment">;</span></span><br><span class="line">// 第三行循环右移两位</span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;2; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">temp = mtx[i+<span class="number">8</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = mtx[i+<span class="number">10</span>]<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">10</span>] = temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">// 第四行循环右移三位</span><br><span class="line">temp = mtx[<span class="number">12</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;3; ++i)</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = mtx[i+<span class="number">13</span>]<span class="comment">;</span></span><br><span class="line">mtx[<span class="number">15</span>] = temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InvMixColumns(<span class="built_in">byte</span> mtx[<span class="number">4</span>*<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span> arr[<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">for(<span class="keyword">int</span> j=<span class="number">0</span><span class="comment">; j&lt;4; ++j)</span></span><br><span class="line">arr[j] = mtx[i+j*<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">mtx[i] = GFMul(<span class="number">0x0e</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x09</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">4</span>] = GFMul(<span class="number">0x09</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">8</span>] = GFMul(<span class="number">0x0d</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x09</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0b</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">mtx[i+<span class="number">12</span>] = GFMul(<span class="number">0x0b</span>, arr[<span class="number">0</span>]) ^ GFMul(<span class="number">0x0d</span>, arr[<span class="number">1</span>]) ^ GFMul(<span class="number">0x09</span>, arr[<span class="number">2</span>]) ^ GFMul(<span class="number">0x0e</span>, arr[<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/******************************下面是密钥扩展部分***********************/</span><br><span class="line">/**</span><br><span class="line"> * 将<span class="number">4</span>个 <span class="built_in">byte</span> 转换为一个 <span class="built_in">word</span>.</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">word</span> <span class="built_in">Word</span>(<span class="built_in">byte</span>&amp; <span class="built_in">k1</span>, <span class="built_in">byte</span>&amp; <span class="built_in">k2</span>, <span class="built_in">byte</span>&amp; <span class="built_in">k3</span>, <span class="built_in">byte</span>&amp; <span class="built_in">k4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> result(<span class="number">0x00000000</span>)<span class="comment">;</span></span><br><span class="line"><span class="built_in">word</span> temp<span class="comment">;</span></span><br><span class="line">temp = <span class="built_in">k1</span><span class="number">.</span>to_ulong()<span class="comment">;  // K1</span></span><br><span class="line">temp &lt;&lt;= <span class="number">24</span><span class="comment">;</span></span><br><span class="line">result |= temp<span class="comment">;</span></span><br><span class="line">temp = <span class="built_in">k2</span><span class="number">.</span>to_ulong()<span class="comment">;  // K2</span></span><br><span class="line">temp &lt;&lt;= <span class="number">16</span><span class="comment">;</span></span><br><span class="line">result |= temp<span class="comment">;</span></span><br><span class="line">temp = <span class="built_in">k3</span><span class="number">.</span>to_ulong()<span class="comment">;  // K3</span></span><br><span class="line">temp &lt;&lt;= <span class="number">8</span><span class="comment">;</span></span><br><span class="line">result |= temp<span class="comment">;</span></span><br><span class="line">temp = <span class="built_in">k4</span><span class="number">.</span>to_ulong()<span class="comment">;  // K4</span></span><br><span class="line">result |= temp<span class="comment">;</span></span><br><span class="line">return result<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  按字节 循环左移一位</span><br><span class="line"> *  即把[a0, a1, a2, a3]变成[a1, a2, a3, a0]</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">word</span> RotWord(const <span class="built_in">word</span>&amp; rw)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> high = rw &lt;&lt; <span class="number">8</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">word</span> low = rw &gt;&gt; <span class="number">24</span><span class="comment">;</span></span><br><span class="line">return high | low<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  对输入<span class="built_in">word</span>中的每一个字节进行S-盒变换</span><br><span class="line"> */</span><br><span class="line"><span class="built_in">word</span> SubWord(const <span class="built_in">word</span>&amp; sw)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> temp<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;32; i+=8)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> row = sw[i+<span class="number">7</span>]*<span class="number">8</span> + sw[i+<span class="number">6</span>]*<span class="number">4</span> + sw[i+<span class="number">5</span>]*<span class="number">2</span> + sw[i+<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> col = sw[i+<span class="number">3</span>]*<span class="number">8</span> + sw[i+<span class="number">2</span>]*<span class="number">4</span> + sw[i+<span class="number">1</span>]*<span class="number">2</span> + sw[i]<span class="comment">;</span></span><br><span class="line"><span class="built_in">byte</span> val = S_Box[row][col]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> j=<span class="number">0</span><span class="comment">; j&lt;8; ++j)</span></span><br><span class="line">temp[i+j] = val[j]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">return temp<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  密钥扩展函数 - 对<span class="number">128</span>位密钥进行扩展得到 w[<span class="number">4</span>*(Nr+<span class="number">1</span>)]</span><br><span class="line"> */</span><br><span class="line">void KeyExpansion(<span class="built_in">byte</span> key[<span class="number">4</span>*Nk], <span class="built_in">word</span> w[<span class="number">4</span>*(Nr+<span class="number">1</span>)])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> temp<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">// w[]的前<span class="number">4</span>个就是输入的key</span><br><span class="line">while(i &lt; Nk)</span><br><span class="line">&#123;</span><br><span class="line">w[i] = <span class="built_in">Word</span>(key[<span class="number">4</span>*i], key[<span class="number">4</span>*i+<span class="number">1</span>], key[<span class="number">4</span>*i+<span class="number">2</span>], key[<span class="number">4</span>*i+<span class="number">3</span>])<span class="comment">;</span></span><br><span class="line">++i<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i = Nk<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">while(i &lt; <span class="number">4</span>*(Nr+<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line">temp = w[i-<span class="number">1</span>]<span class="comment">; // 记录前一个word</span></span><br><span class="line">if(i % Nk == <span class="number">0</span>)</span><br><span class="line">w[i] = w[i-Nk] ^ SubWord(RotWord(temp)) ^ Rcon[i/Nk-<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">else</span><br><span class="line">w[i] = w[i-Nk] ^ temp<span class="comment">;</span></span><br><span class="line">++i<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/******************************下面是加密和解密函数**************************/</span><br><span class="line">/**</span><br><span class="line"> *  加密</span><br><span class="line"> */</span><br><span class="line">void encrypt(<span class="built_in">byte</span> <span class="keyword">in</span>[<span class="number">4</span>*<span class="number">4</span>], <span class="built_in">word</span> w[<span class="number">4</span>*(Nr+<span class="number">1</span>)]) // 输入的是明文和扩展密钥</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> key[<span class="number">4</span>]<span class="comment">; // 前四个key是w[1-4]</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">; // 第一次密钥轮加</span></span><br><span class="line"></span><br><span class="line">for(<span class="keyword">int</span> round=<span class="number">1</span><span class="comment">; round&lt;Nr; ++round) //需要Nr-1次</span></span><br><span class="line">&#123;</span><br><span class="line">SubBytes(<span class="keyword">in</span>)<span class="comment">; //字节替换</span></span><br><span class="line">ShiftRows(<span class="keyword">in</span>)<span class="comment">; //位移位</span></span><br><span class="line">MixColumns(<span class="keyword">in</span>)<span class="comment">; //列混合</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i) // 每四个w[]作为密钥轮加的key</span></span><br><span class="line">key[i] = w[<span class="number">4</span>*round+i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">; //密钥轮加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 最后一次不需要列混合</span><br><span class="line">SubBytes(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">ShiftRows(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[<span class="number">4</span>*Nr+i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  解密</span><br><span class="line"> */</span><br><span class="line">void decrypt(<span class="built_in">byte</span> <span class="keyword">in</span>[<span class="number">4</span>*<span class="number">4</span>], <span class="built_in">word</span> w[<span class="number">4</span>*(Nr+<span class="number">1</span>)])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">word</span> key[<span class="number">4</span>]<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[<span class="number">4</span>*Nr+i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">for(<span class="keyword">int</span> round=Nr-<span class="number">1</span><span class="comment">; round&gt;0; --round)</span></span><br><span class="line">&#123;</span><br><span class="line">InvShiftRows(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">InvSubBytes(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[<span class="number">4</span>*round+i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">;</span></span><br><span class="line">InvMixColumns(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InvShiftRows(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">InvSubBytes(<span class="keyword">in</span>)<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;4; ++i)</span></span><br><span class="line">key[i] = w[i]<span class="comment">;</span></span><br><span class="line">AddRoundKey(<span class="keyword">in</span>, key)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**********************************************************************/</span><br><span class="line">/*                                                                    */</span><br><span class="line">/*                              测试                                  */</span><br><span class="line">/*                                                                    */</span><br><span class="line">/**********************************************************************/</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">byte</span> key[<span class="number">16</span>] = &#123;<span class="number">0x2b</span>, <span class="number">0x7e</span>, <span class="number">0x15</span>, <span class="number">0x16</span>,</span><br><span class="line"><span class="number">0x28</span>, <span class="number">0xae</span>, <span class="number">0xd2</span>, <span class="number">0xa6</span>,</span><br><span class="line"><span class="number">0xab</span>, <span class="number">0xf7</span>, <span class="number">0x15</span>, <span class="number">0x88</span>,</span><br><span class="line"><span class="number">0x09</span>, <span class="number">0xcf</span>, <span class="number">0x4f</span>, <span class="number">0x3c</span>&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span> plain[<span class="number">16</span>] = &#123;<span class="number">0x32</span>, <span class="number">0x88</span>, <span class="number">0x31</span>, <span class="number">0xe0</span>,</span><br><span class="line"><span class="number">0x43</span>, <span class="number">0x5a</span>, <span class="number">0x31</span>, <span class="number">0x37</span>,</span><br><span class="line"><span class="number">0xf6</span>, <span class="number">0x30</span>, <span class="number">0x98</span>, <span class="number">0x07</span>,</span><br><span class="line"><span class="number">0xa8</span>, <span class="number">0x8d</span>, <span class="number">0xa2</span>, <span class="number">0x34</span>&#125;<span class="comment">;</span></span><br><span class="line">// 输出密钥</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;密钥是：&quot;</span><span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">cout &lt;&lt; hex &lt;&lt; key[i].to_ulong() &lt;&lt; <span class="string">&quot; &quot;</span><span class="comment">;</span></span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">word</span> w[<span class="number">4</span>*(Nr+<span class="number">1</span>)]<span class="comment">;</span></span><br><span class="line">KeyExpansion(key, w)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 输出待加密的明文</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;待加密的明文：&quot;</span>&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">&quot; &quot;</span><span class="comment">;</span></span><br><span class="line">if((i+<span class="number">1</span>)<span class="subst">%4</span> == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 加密，输出密文</span><br><span class="line">encrypt(plain, w)<span class="comment">;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加密后的密文：&quot;</span>&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">&quot; &quot;</span><span class="comment">;</span></span><br><span class="line">if((i+<span class="number">1</span>)<span class="subst">%4</span> == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">// 解密，输出明文</span><br><span class="line">decrypt(plain, w)<span class="comment">;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;解密后的明文：&quot;</span>&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">for(<span class="keyword">int</span> i=<span class="number">0</span><span class="comment">; i&lt;16; ++i)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; hex &lt;&lt; plain[i].to_ulong() &lt;&lt; <span class="string">&quot; &quot;</span><span class="comment">;</span></span><br><span class="line">if((i+<span class="number">1</span>)<span class="subst">%4</span> == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl<span class="comment">;</span></span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-注意-2">2. 注意</h3><p>有限域$ GF(2^8) $上的乘法改用查表的方式实现，<code>AES</code>的加密速度马上提升<code> 80%</code> 以上，所以建议最好使用查表的方式。下面是 <code>AES</code> 算法中用到的 <code>6</code>个乘法结果表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">byte Mul_02[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x06</span>,<span class="number">0x08</span>,<span class="number">0x0a</span>,<span class="number">0x0c</span>,<span class="number">0x0e</span>,<span class="number">0x10</span>,<span class="number">0x12</span>,<span class="number">0x14</span>,<span class="number">0x16</span>,<span class="number">0x18</span>,<span class="number">0x1a</span>,<span class="number">0x1c</span>,<span class="number">0x1e</span>,</span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x24</span>,<span class="number">0x26</span>,<span class="number">0x28</span>,<span class="number">0x2a</span>,<span class="number">0x2c</span>,<span class="number">0x2e</span>,<span class="number">0x30</span>,<span class="number">0x32</span>,<span class="number">0x34</span>,<span class="number">0x36</span>,<span class="number">0x38</span>,<span class="number">0x3a</span>,<span class="number">0x3c</span>,<span class="number">0x3e</span>,</span><br><span class="line"><span class="number">0x40</span>,<span class="number">0x42</span>,<span class="number">0x44</span>,<span class="number">0x46</span>,<span class="number">0x48</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x4e</span>,<span class="number">0x50</span>,<span class="number">0x52</span>,<span class="number">0x54</span>,<span class="number">0x56</span>,<span class="number">0x58</span>,<span class="number">0x5a</span>,<span class="number">0x5c</span>,<span class="number">0x5e</span>,</span><br><span class="line"><span class="number">0x60</span>,<span class="number">0x62</span>,<span class="number">0x64</span>,<span class="number">0x66</span>,<span class="number">0x68</span>,<span class="number">0x6a</span>,<span class="number">0x6c</span>,<span class="number">0x6e</span>,<span class="number">0x70</span>,<span class="number">0x72</span>,<span class="number">0x74</span>,<span class="number">0x76</span>,<span class="number">0x78</span>,<span class="number">0x7a</span>,<span class="number">0x7c</span>,<span class="number">0x7e</span>,</span><br><span class="line"><span class="number">0x80</span>,<span class="number">0x82</span>,<span class="number">0x84</span>,<span class="number">0x86</span>,<span class="number">0x88</span>,<span class="number">0x8a</span>,<span class="number">0x8c</span>,<span class="number">0x8e</span>,<span class="number">0x90</span>,<span class="number">0x92</span>,<span class="number">0x94</span>,<span class="number">0x96</span>,<span class="number">0x98</span>,<span class="number">0x9a</span>,<span class="number">0x9c</span>,<span class="number">0x9e</span>,</span><br><span class="line"><span class="number">0xa0</span>,<span class="number">0xa2</span>,<span class="number">0xa4</span>,<span class="number">0xa6</span>,<span class="number">0xa8</span>,<span class="number">0xaa</span>,<span class="number">0xac</span>,<span class="number">0xae</span>,<span class="number">0xb0</span>,<span class="number">0xb2</span>,<span class="number">0xb4</span>,<span class="number">0xb6</span>,<span class="number">0xb8</span>,<span class="number">0xba</span>,<span class="number">0xbc</span>,<span class="number">0xbe</span>,</span><br><span class="line"><span class="number">0xc0</span>,<span class="number">0xc2</span>,<span class="number">0xc4</span>,<span class="number">0xc6</span>,<span class="number">0xc8</span>,<span class="number">0xca</span>,<span class="number">0xcc</span>,<span class="number">0xce</span>,<span class="number">0xd0</span>,<span class="number">0xd2</span>,<span class="number">0xd4</span>,<span class="number">0xd6</span>,<span class="number">0xd8</span>,<span class="number">0xda</span>,<span class="number">0xdc</span>,<span class="number">0xde</span>,</span><br><span class="line"><span class="number">0xe0</span>,<span class="number">0xe2</span>,<span class="number">0xe4</span>,<span class="number">0xe6</span>,<span class="number">0xe8</span>,<span class="number">0xea</span>,<span class="number">0xec</span>,<span class="number">0xee</span>,<span class="number">0xf0</span>,<span class="number">0xf2</span>,<span class="number">0xf4</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0xfa</span>,<span class="number">0xfc</span>,<span class="number">0xfe</span>,</span><br><span class="line"><span class="number">0x1b</span>,<span class="number">0x19</span>,<span class="number">0x1f</span>,<span class="number">0x1d</span>,<span class="number">0x13</span>,<span class="number">0x11</span>,<span class="number">0x17</span>,<span class="number">0x15</span>,<span class="number">0x0b</span>,<span class="number">0x09</span>,<span class="number">0x0f</span>,<span class="number">0x0d</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x07</span>,<span class="number">0x05</span>,</span><br><span class="line"><span class="number">0x3b</span>,<span class="number">0x39</span>,<span class="number">0x3f</span>,<span class="number">0x3d</span>,<span class="number">0x33</span>,<span class="number">0x31</span>,<span class="number">0x37</span>,<span class="number">0x35</span>,<span class="number">0x2b</span>,<span class="number">0x29</span>,<span class="number">0x2f</span>,<span class="number">0x2d</span>,<span class="number">0x23</span>,<span class="number">0x21</span>,<span class="number">0x27</span>,<span class="number">0x25</span>,</span><br><span class="line"><span class="number">0x5b</span>,<span class="number">0x59</span>,<span class="number">0x5f</span>,<span class="number">0x5d</span>,<span class="number">0x53</span>,<span class="number">0x51</span>,<span class="number">0x57</span>,<span class="number">0x55</span>,<span class="number">0x4b</span>,<span class="number">0x49</span>,<span class="number">0x4f</span>,<span class="number">0x4d</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x47</span>,<span class="number">0x45</span>,</span><br><span class="line"><span class="number">0x7b</span>,<span class="number">0x79</span>,<span class="number">0x7f</span>,<span class="number">0x7d</span>,<span class="number">0x73</span>,<span class="number">0x71</span>,<span class="number">0x77</span>,<span class="number">0x75</span>,<span class="number">0x6b</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6d</span>,<span class="number">0x63</span>,<span class="number">0x61</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,</span><br><span class="line"><span class="number">0x9b</span>,<span class="number">0x99</span>,<span class="number">0x9f</span>,<span class="number">0x9d</span>,<span class="number">0x93</span>,<span class="number">0x91</span>,<span class="number">0x97</span>,<span class="number">0x95</span>,<span class="number">0x8b</span>,<span class="number">0x89</span>,<span class="number">0x8f</span>,<span class="number">0x8d</span>,<span class="number">0x83</span>,<span class="number">0x81</span>,<span class="number">0x87</span>,<span class="number">0x85</span>,</span><br><span class="line"><span class="number">0xbb</span>,<span class="number">0xb9</span>,<span class="number">0xbf</span>,<span class="number">0xbd</span>,<span class="number">0xb3</span>,<span class="number">0xb1</span>,<span class="number">0xb7</span>,<span class="number">0xb5</span>,<span class="number">0xab</span>,<span class="number">0xa9</span>,<span class="number">0xaf</span>,<span class="number">0xad</span>,<span class="number">0xa3</span>,<span class="number">0xa1</span>,<span class="number">0xa7</span>,<span class="number">0xa5</span>,</span><br><span class="line"><span class="number">0xdb</span>,<span class="number">0xd9</span>,<span class="number">0xdf</span>,<span class="number">0xdd</span>,<span class="number">0xd3</span>,<span class="number">0xd1</span>,<span class="number">0xd7</span>,<span class="number">0xd5</span>,<span class="number">0xcb</span>,<span class="number">0xc9</span>,<span class="number">0xcf</span>,<span class="number">0xcd</span>,<span class="number">0xc3</span>,<span class="number">0xc1</span>,<span class="number">0xc7</span>,<span class="number">0xc5</span>,</span><br><span class="line"><span class="number">0xfb</span>,<span class="number">0xf9</span>,<span class="number">0xff</span>,<span class="number">0xfd</span>,<span class="number">0xf3</span>,<span class="number">0xf1</span>,<span class="number">0xf7</span>,<span class="number">0xf5</span>,<span class="number">0xeb</span>,<span class="number">0xe9</span>,<span class="number">0xef</span>,<span class="number">0xed</span>,<span class="number">0xe3</span>,<span class="number">0xe1</span>,<span class="number">0xe7</span>,<span class="number">0xe5</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_03[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x06</span>,<span class="number">0x05</span>,<span class="number">0x0c</span>,<span class="number">0x0f</span>,<span class="number">0x0a</span>,<span class="number">0x09</span>,<span class="number">0x18</span>,<span class="number">0x1b</span>,<span class="number">0x1e</span>,<span class="number">0x1d</span>,<span class="number">0x14</span>,<span class="number">0x17</span>,<span class="number">0x12</span>,<span class="number">0x11</span>,</span><br><span class="line"><span class="number">0x30</span>,<span class="number">0x33</span>,<span class="number">0x36</span>,<span class="number">0x35</span>,<span class="number">0x3c</span>,<span class="number">0x3f</span>,<span class="number">0x3a</span>,<span class="number">0x39</span>,<span class="number">0x28</span>,<span class="number">0x2b</span>,<span class="number">0x2e</span>,<span class="number">0x2d</span>,<span class="number">0x24</span>,<span class="number">0x27</span>,<span class="number">0x22</span>,<span class="number">0x21</span>,</span><br><span class="line"><span class="number">0x60</span>,<span class="number">0x63</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x6f</span>,<span class="number">0x6a</span>,<span class="number">0x69</span>,<span class="number">0x78</span>,<span class="number">0x7b</span>,<span class="number">0x7e</span>,<span class="number">0x7d</span>,<span class="number">0x74</span>,<span class="number">0x77</span>,<span class="number">0x72</span>,<span class="number">0x71</span>,</span><br><span class="line"><span class="number">0x50</span>,<span class="number">0x53</span>,<span class="number">0x56</span>,<span class="number">0x55</span>,<span class="number">0x5c</span>,<span class="number">0x5f</span>,<span class="number">0x5a</span>,<span class="number">0x59</span>,<span class="number">0x48</span>,<span class="number">0x4b</span>,<span class="number">0x4e</span>,<span class="number">0x4d</span>,<span class="number">0x44</span>,<span class="number">0x47</span>,<span class="number">0x42</span>,<span class="number">0x41</span>,</span><br><span class="line"><span class="number">0xc0</span>,<span class="number">0xc3</span>,<span class="number">0xc6</span>,<span class="number">0xc5</span>,<span class="number">0xcc</span>,<span class="number">0xcf</span>,<span class="number">0xca</span>,<span class="number">0xc9</span>,<span class="number">0xd8</span>,<span class="number">0xdb</span>,<span class="number">0xde</span>,<span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0xd7</span>,<span class="number">0xd2</span>,<span class="number">0xd1</span>,</span><br><span class="line"><span class="number">0xf0</span>,<span class="number">0xf3</span>,<span class="number">0xf6</span>,<span class="number">0xf5</span>,<span class="number">0xfc</span>,<span class="number">0xff</span>,<span class="number">0xfa</span>,<span class="number">0xf9</span>,<span class="number">0xe8</span>,<span class="number">0xeb</span>,<span class="number">0xee</span>,<span class="number">0xed</span>,<span class="number">0xe4</span>,<span class="number">0xe7</span>,<span class="number">0xe2</span>,<span class="number">0xe1</span>,</span><br><span class="line"><span class="number">0xa0</span>,<span class="number">0xa3</span>,<span class="number">0xa6</span>,<span class="number">0xa5</span>,<span class="number">0xac</span>,<span class="number">0xaf</span>,<span class="number">0xaa</span>,<span class="number">0xa9</span>,<span class="number">0xb8</span>,<span class="number">0xbb</span>,<span class="number">0xbe</span>,<span class="number">0xbd</span>,<span class="number">0xb4</span>,<span class="number">0xb7</span>,<span class="number">0xb2</span>,<span class="number">0xb1</span>,</span><br><span class="line"><span class="number">0x90</span>,<span class="number">0x93</span>,<span class="number">0x96</span>,<span class="number">0x95</span>,<span class="number">0x9c</span>,<span class="number">0x9f</span>,<span class="number">0x9a</span>,<span class="number">0x99</span>,<span class="number">0x88</span>,<span class="number">0x8b</span>,<span class="number">0x8e</span>,<span class="number">0x8d</span>,<span class="number">0x84</span>,<span class="number">0x87</span>,<span class="number">0x82</span>,<span class="number">0x81</span>,</span><br><span class="line"><span class="number">0x9b</span>,<span class="number">0x98</span>,<span class="number">0x9d</span>,<span class="number">0x9e</span>,<span class="number">0x97</span>,<span class="number">0x94</span>,<span class="number">0x91</span>,<span class="number">0x92</span>,<span class="number">0x83</span>,<span class="number">0x80</span>,<span class="number">0x85</span>,<span class="number">0x86</span>,<span class="number">0x8f</span>,<span class="number">0x8c</span>,<span class="number">0x89</span>,<span class="number">0x8a</span>,</span><br><span class="line"><span class="number">0xab</span>,<span class="number">0xa8</span>,<span class="number">0xad</span>,<span class="number">0xae</span>,<span class="number">0xa7</span>,<span class="number">0xa4</span>,<span class="number">0xa1</span>,<span class="number">0xa2</span>,<span class="number">0xb3</span>,<span class="number">0xb0</span>,<span class="number">0xb5</span>,<span class="number">0xb6</span>,<span class="number">0xbf</span>,<span class="number">0xbc</span>,<span class="number">0xb9</span>,<span class="number">0xba</span>,</span><br><span class="line"><span class="number">0xfb</span>,<span class="number">0xf8</span>,<span class="number">0xfd</span>,<span class="number">0xfe</span>,<span class="number">0xf7</span>,<span class="number">0xf4</span>,<span class="number">0xf1</span>,<span class="number">0xf2</span>,<span class="number">0xe3</span>,<span class="number">0xe0</span>,<span class="number">0xe5</span>,<span class="number">0xe6</span>,<span class="number">0xef</span>,<span class="number">0xec</span>,<span class="number">0xe9</span>,<span class="number">0xea</span>,</span><br><span class="line"><span class="number">0xcb</span>,<span class="number">0xc8</span>,<span class="number">0xcd</span>,<span class="number">0xce</span>,<span class="number">0xc7</span>,<span class="number">0xc4</span>,<span class="number">0xc1</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xd0</span>,<span class="number">0xd5</span>,<span class="number">0xd6</span>,<span class="number">0xdf</span>,<span class="number">0xdc</span>,<span class="number">0xd9</span>,<span class="number">0xda</span>,</span><br><span class="line"><span class="number">0x5b</span>,<span class="number">0x58</span>,<span class="number">0x5d</span>,<span class="number">0x5e</span>,<span class="number">0x57</span>,<span class="number">0x54</span>,<span class="number">0x51</span>,<span class="number">0x52</span>,<span class="number">0x43</span>,<span class="number">0x40</span>,<span class="number">0x45</span>,<span class="number">0x46</span>,<span class="number">0x4f</span>,<span class="number">0x4c</span>,<span class="number">0x49</span>,<span class="number">0x4a</span>,</span><br><span class="line"><span class="number">0x6b</span>,<span class="number">0x68</span>,<span class="number">0x6d</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x64</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x73</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x76</span>,<span class="number">0x7f</span>,<span class="number">0x7c</span>,<span class="number">0x79</span>,<span class="number">0x7a</span>,</span><br><span class="line"><span class="number">0x3b</span>,<span class="number">0x38</span>,<span class="number">0x3d</span>,<span class="number">0x3e</span>,<span class="number">0x37</span>,<span class="number">0x34</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x23</span>,<span class="number">0x20</span>,<span class="number">0x25</span>,<span class="number">0x26</span>,<span class="number">0x2f</span>,<span class="number">0x2c</span>,<span class="number">0x29</span>,<span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0x0b</span>,<span class="number">0x08</span>,<span class="number">0x0d</span>,<span class="number">0x0e</span>,<span class="number">0x07</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x13</span>,<span class="number">0x10</span>,<span class="number">0x15</span>,<span class="number">0x16</span>,<span class="number">0x1f</span>,<span class="number">0x1c</span>,<span class="number">0x19</span>,<span class="number">0x1a</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_09[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x12</span>,<span class="number">0x1b</span>,<span class="number">0x24</span>,<span class="number">0x2d</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0x48</span>,<span class="number">0x41</span>,<span class="number">0x5a</span>,<span class="number">0x53</span>,<span class="number">0x6c</span>,<span class="number">0x65</span>,<span class="number">0x7e</span>,<span class="number">0x77</span>,</span><br><span class="line"><span class="number">0x90</span>,<span class="number">0x99</span>,<span class="number">0x82</span>,<span class="number">0x8b</span>,<span class="number">0xb4</span>,<span class="number">0xbd</span>,<span class="number">0xa6</span>,<span class="number">0xaf</span>,<span class="number">0xd8</span>,<span class="number">0xd1</span>,<span class="number">0xca</span>,<span class="number">0xc3</span>,<span class="number">0xfc</span>,<span class="number">0xf5</span>,<span class="number">0xee</span>,<span class="number">0xe7</span>,</span><br><span class="line"><span class="number">0x3b</span>,<span class="number">0x32</span>,<span class="number">0x29</span>,<span class="number">0x20</span>,<span class="number">0x1f</span>,<span class="number">0x16</span>,<span class="number">0x0d</span>,<span class="number">0x04</span>,<span class="number">0x73</span>,<span class="number">0x7a</span>,<span class="number">0x61</span>,<span class="number">0x68</span>,<span class="number">0x57</span>,<span class="number">0x5e</span>,<span class="number">0x45</span>,<span class="number">0x4c</span>,</span><br><span class="line"><span class="number">0xab</span>,<span class="number">0xa2</span>,<span class="number">0xb9</span>,<span class="number">0xb0</span>,<span class="number">0x8f</span>,<span class="number">0x86</span>,<span class="number">0x9d</span>,<span class="number">0x94</span>,<span class="number">0xe3</span>,<span class="number">0xea</span>,<span class="number">0xf1</span>,<span class="number">0xf8</span>,<span class="number">0xc7</span>,<span class="number">0xce</span>,<span class="number">0xd5</span>,<span class="number">0xdc</span>,</span><br><span class="line"><span class="number">0x76</span>,<span class="number">0x7f</span>,<span class="number">0x64</span>,<span class="number">0x6d</span>,<span class="number">0x52</span>,<span class="number">0x5b</span>,<span class="number">0x40</span>,<span class="number">0x49</span>,<span class="number">0x3e</span>,<span class="number">0x37</span>,<span class="number">0x2c</span>,<span class="number">0x25</span>,<span class="number">0x1a</span>,<span class="number">0x13</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,</span><br><span class="line"><span class="number">0xe6</span>,<span class="number">0xef</span>,<span class="number">0xf4</span>,<span class="number">0xfd</span>,<span class="number">0xc2</span>,<span class="number">0xcb</span>,<span class="number">0xd0</span>,<span class="number">0xd9</span>,<span class="number">0xae</span>,<span class="number">0xa7</span>,<span class="number">0xbc</span>,<span class="number">0xb5</span>,<span class="number">0x8a</span>,<span class="number">0x83</span>,<span class="number">0x98</span>,<span class="number">0x91</span>,</span><br><span class="line"><span class="number">0x4d</span>,<span class="number">0x44</span>,<span class="number">0x5f</span>,<span class="number">0x56</span>,<span class="number">0x69</span>,<span class="number">0x60</span>,<span class="number">0x7b</span>,<span class="number">0x72</span>,<span class="number">0x05</span>,<span class="number">0x0c</span>,<span class="number">0x17</span>,<span class="number">0x1e</span>,<span class="number">0x21</span>,<span class="number">0x28</span>,<span class="number">0x33</span>,<span class="number">0x3a</span>,</span><br><span class="line"><span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0xcf</span>,<span class="number">0xc6</span>,<span class="number">0xf9</span>,<span class="number">0xf0</span>,<span class="number">0xeb</span>,<span class="number">0xe2</span>,<span class="number">0x95</span>,<span class="number">0x9c</span>,<span class="number">0x87</span>,<span class="number">0x8e</span>,<span class="number">0xb1</span>,<span class="number">0xb8</span>,<span class="number">0xa3</span>,<span class="number">0xaa</span>,</span><br><span class="line"><span class="number">0xec</span>,<span class="number">0xe5</span>,<span class="number">0xfe</span>,<span class="number">0xf7</span>,<span class="number">0xc8</span>,<span class="number">0xc1</span>,<span class="number">0xda</span>,<span class="number">0xd3</span>,<span class="number">0xa4</span>,<span class="number">0xad</span>,<span class="number">0xb6</span>,<span class="number">0xbf</span>,<span class="number">0x80</span>,<span class="number">0x89</span>,<span class="number">0x92</span>,<span class="number">0x9b</span>,</span><br><span class="line"><span class="number">0x7c</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x58</span>,<span class="number">0x51</span>,<span class="number">0x4a</span>,<span class="number">0x43</span>,<span class="number">0x34</span>,<span class="number">0x3d</span>,<span class="number">0x26</span>,<span class="number">0x2f</span>,<span class="number">0x10</span>,<span class="number">0x19</span>,<span class="number">0x02</span>,<span class="number">0x0b</span>,</span><br><span class="line"><span class="number">0xd7</span>,<span class="number">0xde</span>,<span class="number">0xc5</span>,<span class="number">0xcc</span>,<span class="number">0xf3</span>,<span class="number">0xfa</span>,<span class="number">0xe1</span>,<span class="number">0xe8</span>,<span class="number">0x9f</span>,<span class="number">0x96</span>,<span class="number">0x8d</span>,<span class="number">0x84</span>,<span class="number">0xbb</span>,<span class="number">0xb2</span>,<span class="number">0xa9</span>,<span class="number">0xa0</span>,</span><br><span class="line"><span class="number">0x47</span>,<span class="number">0x4e</span>,<span class="number">0x55</span>,<span class="number">0x5c</span>,<span class="number">0x63</span>,<span class="number">0x6a</span>,<span class="number">0x71</span>,<span class="number">0x78</span>,<span class="number">0x0f</span>,<span class="number">0x06</span>,<span class="number">0x1d</span>,<span class="number">0x14</span>,<span class="number">0x2b</span>,<span class="number">0x22</span>,<span class="number">0x39</span>,<span class="number">0x30</span>,</span><br><span class="line"><span class="number">0x9a</span>,<span class="number">0x93</span>,<span class="number">0x88</span>,<span class="number">0x81</span>,<span class="number">0xbe</span>,<span class="number">0xb7</span>,<span class="number">0xac</span>,<span class="number">0xa5</span>,<span class="number">0xd2</span>,<span class="number">0xdb</span>,<span class="number">0xc0</span>,<span class="number">0xc9</span>,<span class="number">0xf6</span>,<span class="number">0xff</span>,<span class="number">0xe4</span>,<span class="number">0xed</span>,</span><br><span class="line"><span class="number">0x0a</span>,<span class="number">0x03</span>,<span class="number">0x18</span>,<span class="number">0x11</span>,<span class="number">0x2e</span>,<span class="number">0x27</span>,<span class="number">0x3c</span>,<span class="number">0x35</span>,<span class="number">0x42</span>,<span class="number">0x4b</span>,<span class="number">0x50</span>,<span class="number">0x59</span>,<span class="number">0x66</span>,<span class="number">0x6f</span>,<span class="number">0x74</span>,<span class="number">0x7d</span>,</span><br><span class="line"><span class="number">0xa1</span>,<span class="number">0xa8</span>,<span class="number">0xb3</span>,<span class="number">0xba</span>,<span class="number">0x85</span>,<span class="number">0x8c</span>,<span class="number">0x97</span>,<span class="number">0x9e</span>,<span class="number">0xe9</span>,<span class="number">0xe0</span>,<span class="number">0xfb</span>,<span class="number">0xf2</span>,<span class="number">0xcd</span>,<span class="number">0xc4</span>,<span class="number">0xdf</span>,<span class="number">0xd6</span>,</span><br><span class="line"><span class="number">0x31</span>,<span class="number">0x38</span>,<span class="number">0x23</span>,<span class="number">0x2a</span>,<span class="number">0x15</span>,<span class="number">0x1c</span>,<span class="number">0x07</span>,<span class="number">0x0e</span>,<span class="number">0x79</span>,<span class="number">0x70</span>,<span class="number">0x6b</span>,<span class="number">0x62</span>,<span class="number">0x5d</span>,<span class="number">0x54</span>,<span class="number">0x4f</span>,<span class="number">0x46</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_0b[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x0b</span>,<span class="number">0x16</span>,<span class="number">0x1d</span>,<span class="number">0x2c</span>,<span class="number">0x27</span>,<span class="number">0x3a</span>,<span class="number">0x31</span>,<span class="number">0x58</span>,<span class="number">0x53</span>,<span class="number">0x4e</span>,<span class="number">0x45</span>,<span class="number">0x74</span>,<span class="number">0x7f</span>,<span class="number">0x62</span>,<span class="number">0x69</span>,</span><br><span class="line"><span class="number">0xb0</span>,<span class="number">0xbb</span>,<span class="number">0xa6</span>,<span class="number">0xad</span>,<span class="number">0x9c</span>,<span class="number">0x97</span>,<span class="number">0x8a</span>,<span class="number">0x81</span>,<span class="number">0xe8</span>,<span class="number">0xe3</span>,<span class="number">0xfe</span>,<span class="number">0xf5</span>,<span class="number">0xc4</span>,<span class="number">0xcf</span>,<span class="number">0xd2</span>,<span class="number">0xd9</span>,</span><br><span class="line"><span class="number">0x7b</span>,<span class="number">0x70</span>,<span class="number">0x6d</span>,<span class="number">0x66</span>,<span class="number">0x57</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x4a</span>,<span class="number">0x23</span>,<span class="number">0x28</span>,<span class="number">0x35</span>,<span class="number">0x3e</span>,<span class="number">0x0f</span>,<span class="number">0x04</span>,<span class="number">0x19</span>,<span class="number">0x12</span>,</span><br><span class="line"><span class="number">0xcb</span>,<span class="number">0xc0</span>,<span class="number">0xdd</span>,<span class="number">0xd6</span>,<span class="number">0xe7</span>,<span class="number">0xec</span>,<span class="number">0xf1</span>,<span class="number">0xfa</span>,<span class="number">0x93</span>,<span class="number">0x98</span>,<span class="number">0x85</span>,<span class="number">0x8e</span>,<span class="number">0xbf</span>,<span class="number">0xb4</span>,<span class="number">0xa9</span>,<span class="number">0xa2</span>,</span><br><span class="line"><span class="number">0xf6</span>,<span class="number">0xfd</span>,<span class="number">0xe0</span>,<span class="number">0xeb</span>,<span class="number">0xda</span>,<span class="number">0xd1</span>,<span class="number">0xcc</span>,<span class="number">0xc7</span>,<span class="number">0xae</span>,<span class="number">0xa5</span>,<span class="number">0xb8</span>,<span class="number">0xb3</span>,<span class="number">0x82</span>,<span class="number">0x89</span>,<span class="number">0x94</span>,<span class="number">0x9f</span>,</span><br><span class="line"><span class="number">0x46</span>,<span class="number">0x4d</span>,<span class="number">0x50</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0x61</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x1e</span>,<span class="number">0x15</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x32</span>,<span class="number">0x39</span>,<span class="number">0x24</span>,<span class="number">0x2f</span>,</span><br><span class="line"><span class="number">0x8d</span>,<span class="number">0x86</span>,<span class="number">0x9b</span>,<span class="number">0x90</span>,<span class="number">0xa1</span>,<span class="number">0xaa</span>,<span class="number">0xb7</span>,<span class="number">0xbc</span>,<span class="number">0xd5</span>,<span class="number">0xde</span>,<span class="number">0xc3</span>,<span class="number">0xc8</span>,<span class="number">0xf9</span>,<span class="number">0xf2</span>,<span class="number">0xef</span>,<span class="number">0xe4</span>,</span><br><span class="line"><span class="number">0x3d</span>,<span class="number">0x36</span>,<span class="number">0x2b</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x1a</span>,<span class="number">0x07</span>,<span class="number">0x0c</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x73</span>,<span class="number">0x78</span>,<span class="number">0x49</span>,<span class="number">0x42</span>,<span class="number">0x5f</span>,<span class="number">0x54</span>,</span><br><span class="line"><span class="number">0xf7</span>,<span class="number">0xfc</span>,<span class="number">0xe1</span>,<span class="number">0xea</span>,<span class="number">0xdb</span>,<span class="number">0xd0</span>,<span class="number">0xcd</span>,<span class="number">0xc6</span>,<span class="number">0xaf</span>,<span class="number">0xa4</span>,<span class="number">0xb9</span>,<span class="number">0xb2</span>,<span class="number">0x83</span>,<span class="number">0x88</span>,<span class="number">0x95</span>,<span class="number">0x9e</span>,</span><br><span class="line"><span class="number">0x47</span>,<span class="number">0x4c</span>,<span class="number">0x51</span>,<span class="number">0x5a</span>,<span class="number">0x6b</span>,<span class="number">0x60</span>,<span class="number">0x7d</span>,<span class="number">0x76</span>,<span class="number">0x1f</span>,<span class="number">0x14</span>,<span class="number">0x09</span>,<span class="number">0x02</span>,<span class="number">0x33</span>,<span class="number">0x38</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,</span><br><span class="line"><span class="number">0x8c</span>,<span class="number">0x87</span>,<span class="number">0x9a</span>,<span class="number">0x91</span>,<span class="number">0xa0</span>,<span class="number">0xab</span>,<span class="number">0xb6</span>,<span class="number">0xbd</span>,<span class="number">0xd4</span>,<span class="number">0xdf</span>,<span class="number">0xc2</span>,<span class="number">0xc9</span>,<span class="number">0xf8</span>,<span class="number">0xf3</span>,<span class="number">0xee</span>,<span class="number">0xe5</span>,</span><br><span class="line"><span class="number">0x3c</span>,<span class="number">0x37</span>,<span class="number">0x2a</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0x1b</span>,<span class="number">0x06</span>,<span class="number">0x0d</span>,<span class="number">0x64</span>,<span class="number">0x6f</span>,<span class="number">0x72</span>,<span class="number">0x79</span>,<span class="number">0x48</span>,<span class="number">0x43</span>,<span class="number">0x5e</span>,<span class="number">0x55</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x0a</span>,<span class="number">0x17</span>,<span class="number">0x1c</span>,<span class="number">0x2d</span>,<span class="number">0x26</span>,<span class="number">0x3b</span>,<span class="number">0x30</span>,<span class="number">0x59</span>,<span class="number">0x52</span>,<span class="number">0x4f</span>,<span class="number">0x44</span>,<span class="number">0x75</span>,<span class="number">0x7e</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,</span><br><span class="line"><span class="number">0xb1</span>,<span class="number">0xba</span>,<span class="number">0xa7</span>,<span class="number">0xac</span>,<span class="number">0x9d</span>,<span class="number">0x96</span>,<span class="number">0x8b</span>,<span class="number">0x80</span>,<span class="number">0xe9</span>,<span class="number">0xe2</span>,<span class="number">0xff</span>,<span class="number">0xf4</span>,<span class="number">0xc5</span>,<span class="number">0xce</span>,<span class="number">0xd3</span>,<span class="number">0xd8</span>,</span><br><span class="line"><span class="number">0x7a</span>,<span class="number">0x71</span>,<span class="number">0x6c</span>,<span class="number">0x67</span>,<span class="number">0x56</span>,<span class="number">0x5d</span>,<span class="number">0x40</span>,<span class="number">0x4b</span>,<span class="number">0x22</span>,<span class="number">0x29</span>,<span class="number">0x34</span>,<span class="number">0x3f</span>,<span class="number">0x0e</span>,<span class="number">0x05</span>,<span class="number">0x18</span>,<span class="number">0x13</span>,</span><br><span class="line"><span class="number">0xca</span>,<span class="number">0xc1</span>,<span class="number">0xdc</span>,<span class="number">0xd7</span>,<span class="number">0xe6</span>,<span class="number">0xed</span>,<span class="number">0xf0</span>,<span class="number">0xfb</span>,<span class="number">0x92</span>,<span class="number">0x99</span>,<span class="number">0x84</span>,<span class="number">0x8f</span>,<span class="number">0xbe</span>,<span class="number">0xb5</span>,<span class="number">0xa8</span>,<span class="number">0xa3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_0d[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x0d</span>,<span class="number">0x1a</span>,<span class="number">0x17</span>,<span class="number">0x34</span>,<span class="number">0x39</span>,<span class="number">0x2e</span>,<span class="number">0x23</span>,<span class="number">0x68</span>,<span class="number">0x65</span>,<span class="number">0x72</span>,<span class="number">0x7f</span>,<span class="number">0x5c</span>,<span class="number">0x51</span>,<span class="number">0x46</span>,<span class="number">0x4b</span>,</span><br><span class="line"><span class="number">0xd0</span>,<span class="number">0xdd</span>,<span class="number">0xca</span>,<span class="number">0xc7</span>,<span class="number">0xe4</span>,<span class="number">0xe9</span>,<span class="number">0xfe</span>,<span class="number">0xf3</span>,<span class="number">0xb8</span>,<span class="number">0xb5</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x8c</span>,<span class="number">0x81</span>,<span class="number">0x96</span>,<span class="number">0x9b</span>,</span><br><span class="line"><span class="number">0xbb</span>,<span class="number">0xb6</span>,<span class="number">0xa1</span>,<span class="number">0xac</span>,<span class="number">0x8f</span>,<span class="number">0x82</span>,<span class="number">0x95</span>,<span class="number">0x98</span>,<span class="number">0xd3</span>,<span class="number">0xde</span>,<span class="number">0xc9</span>,<span class="number">0xc4</span>,<span class="number">0xe7</span>,<span class="number">0xea</span>,<span class="number">0xfd</span>,<span class="number">0xf0</span>,</span><br><span class="line"><span class="number">0x6b</span>,<span class="number">0x66</span>,<span class="number">0x71</span>,<span class="number">0x7c</span>,<span class="number">0x5f</span>,<span class="number">0x52</span>,<span class="number">0x45</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0x0e</span>,<span class="number">0x19</span>,<span class="number">0x14</span>,<span class="number">0x37</span>,<span class="number">0x3a</span>,<span class="number">0x2d</span>,<span class="number">0x20</span>,</span><br><span class="line"><span class="number">0x6d</span>,<span class="number">0x60</span>,<span class="number">0x77</span>,<span class="number">0x7a</span>,<span class="number">0x59</span>,<span class="number">0x54</span>,<span class="number">0x43</span>,<span class="number">0x4e</span>,<span class="number">0x05</span>,<span class="number">0x08</span>,<span class="number">0x1f</span>,<span class="number">0x12</span>,<span class="number">0x31</span>,<span class="number">0x3c</span>,<span class="number">0x2b</span>,<span class="number">0x26</span>,</span><br><span class="line"><span class="number">0xbd</span>,<span class="number">0xb0</span>,<span class="number">0xa7</span>,<span class="number">0xaa</span>,<span class="number">0x89</span>,<span class="number">0x84</span>,<span class="number">0x93</span>,<span class="number">0x9e</span>,<span class="number">0xd5</span>,<span class="number">0xd8</span>,<span class="number">0xcf</span>,<span class="number">0xc2</span>,<span class="number">0xe1</span>,<span class="number">0xec</span>,<span class="number">0xfb</span>,<span class="number">0xf6</span>,</span><br><span class="line"><span class="number">0xd6</span>,<span class="number">0xdb</span>,<span class="number">0xcc</span>,<span class="number">0xc1</span>,<span class="number">0xe2</span>,<span class="number">0xef</span>,<span class="number">0xf8</span>,<span class="number">0xf5</span>,<span class="number">0xbe</span>,<span class="number">0xb3</span>,<span class="number">0xa4</span>,<span class="number">0xa9</span>,<span class="number">0x8a</span>,<span class="number">0x87</span>,<span class="number">0x90</span>,<span class="number">0x9d</span>,</span><br><span class="line"><span class="number">0x06</span>,<span class="number">0x0b</span>,<span class="number">0x1c</span>,<span class="number">0x11</span>,<span class="number">0x32</span>,<span class="number">0x3f</span>,<span class="number">0x28</span>,<span class="number">0x25</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x79</span>,<span class="number">0x5a</span>,<span class="number">0x57</span>,<span class="number">0x40</span>,<span class="number">0x4d</span>,</span><br><span class="line"><span class="number">0xda</span>,<span class="number">0xd7</span>,<span class="number">0xc0</span>,<span class="number">0xcd</span>,<span class="number">0xee</span>,<span class="number">0xe3</span>,<span class="number">0xf4</span>,<span class="number">0xf9</span>,<span class="number">0xb2</span>,<span class="number">0xbf</span>,<span class="number">0xa8</span>,<span class="number">0xa5</span>,<span class="number">0x86</span>,<span class="number">0x8b</span>,<span class="number">0x9c</span>,<span class="number">0x91</span>,</span><br><span class="line"><span class="number">0x0a</span>,<span class="number">0x07</span>,<span class="number">0x10</span>,<span class="number">0x1d</span>,<span class="number">0x3e</span>,<span class="number">0x33</span>,<span class="number">0x24</span>,<span class="number">0x29</span>,<span class="number">0x62</span>,<span class="number">0x6f</span>,<span class="number">0x78</span>,<span class="number">0x75</span>,<span class="number">0x56</span>,<span class="number">0x5b</span>,<span class="number">0x4c</span>,<span class="number">0x41</span>,</span><br><span class="line"><span class="number">0x61</span>,<span class="number">0x6c</span>,<span class="number">0x7b</span>,<span class="number">0x76</span>,<span class="number">0x55</span>,<span class="number">0x58</span>,<span class="number">0x4f</span>,<span class="number">0x42</span>,<span class="number">0x09</span>,<span class="number">0x04</span>,<span class="number">0x13</span>,<span class="number">0x1e</span>,<span class="number">0x3d</span>,<span class="number">0x30</span>,<span class="number">0x27</span>,<span class="number">0x2a</span>,</span><br><span class="line"><span class="number">0xb1</span>,<span class="number">0xbc</span>,<span class="number">0xab</span>,<span class="number">0xa6</span>,<span class="number">0x85</span>,<span class="number">0x88</span>,<span class="number">0x9f</span>,<span class="number">0x92</span>,<span class="number">0xd9</span>,<span class="number">0xd4</span>,<span class="number">0xc3</span>,<span class="number">0xce</span>,<span class="number">0xed</span>,<span class="number">0xe0</span>,<span class="number">0xf7</span>,<span class="number">0xfa</span>,</span><br><span class="line"><span class="number">0xb7</span>,<span class="number">0xba</span>,<span class="number">0xad</span>,<span class="number">0xa0</span>,<span class="number">0x83</span>,<span class="number">0x8e</span>,<span class="number">0x99</span>,<span class="number">0x94</span>,<span class="number">0xdf</span>,<span class="number">0xd2</span>,<span class="number">0xc5</span>,<span class="number">0xc8</span>,<span class="number">0xeb</span>,<span class="number">0xe6</span>,<span class="number">0xf1</span>,<span class="number">0xfc</span>,</span><br><span class="line"><span class="number">0x67</span>,<span class="number">0x6a</span>,<span class="number">0x7d</span>,<span class="number">0x70</span>,<span class="number">0x53</span>,<span class="number">0x5e</span>,<span class="number">0x49</span>,<span class="number">0x44</span>,<span class="number">0x0f</span>,<span class="number">0x02</span>,<span class="number">0x15</span>,<span class="number">0x18</span>,<span class="number">0x3b</span>,<span class="number">0x36</span>,<span class="number">0x21</span>,<span class="number">0x2c</span>,</span><br><span class="line"><span class="number">0x0c</span>,<span class="number">0x01</span>,<span class="number">0x16</span>,<span class="number">0x1b</span>,<span class="number">0x38</span>,<span class="number">0x35</span>,<span class="number">0x22</span>,<span class="number">0x2f</span>,<span class="number">0x64</span>,<span class="number">0x69</span>,<span class="number">0x7e</span>,<span class="number">0x73</span>,<span class="number">0x50</span>,<span class="number">0x5d</span>,<span class="number">0x4a</span>,<span class="number">0x47</span>,</span><br><span class="line"><span class="number">0xdc</span>,<span class="number">0xd1</span>,<span class="number">0xc6</span>,<span class="number">0xcb</span>,<span class="number">0xe8</span>,<span class="number">0xe5</span>,<span class="number">0xf2</span>,<span class="number">0xff</span>,<span class="number">0xb4</span>,<span class="number">0xb9</span>,<span class="number">0xae</span>,<span class="number">0xa3</span>,<span class="number">0x80</span>,<span class="number">0x8d</span>,<span class="number">0x9a</span>,<span class="number">0x97</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">byte Mul_0e[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x0e</span>,<span class="number">0x1c</span>,<span class="number">0x12</span>,<span class="number">0x38</span>,<span class="number">0x36</span>,<span class="number">0x24</span>,<span class="number">0x2a</span>,<span class="number">0x70</span>,<span class="number">0x7e</span>,<span class="number">0x6c</span>,<span class="number">0x62</span>,<span class="number">0x48</span>,<span class="number">0x46</span>,<span class="number">0x54</span>,<span class="number">0x5a</span>,</span><br><span class="line"><span class="number">0xe0</span>,<span class="number">0xee</span>,<span class="number">0xfc</span>,<span class="number">0xf2</span>,<span class="number">0xd8</span>,<span class="number">0xd6</span>,<span class="number">0xc4</span>,<span class="number">0xca</span>,<span class="number">0x90</span>,<span class="number">0x9e</span>,<span class="number">0x8c</span>,<span class="number">0x82</span>,<span class="number">0xa8</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xba</span>,</span><br><span class="line"><span class="number">0xdb</span>,<span class="number">0xd5</span>,<span class="number">0xc7</span>,<span class="number">0xc9</span>,<span class="number">0xe3</span>,<span class="number">0xed</span>,<span class="number">0xff</span>,<span class="number">0xf1</span>,<span class="number">0xab</span>,<span class="number">0xa5</span>,<span class="number">0xb7</span>,<span class="number">0xb9</span>,<span class="number">0x93</span>,<span class="number">0x9d</span>,<span class="number">0x8f</span>,<span class="number">0x81</span>,</span><br><span class="line"><span class="number">0x3b</span>,<span class="number">0x35</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x03</span>,<span class="number">0x0d</span>,<span class="number">0x1f</span>,<span class="number">0x11</span>,<span class="number">0x4b</span>,<span class="number">0x45</span>,<span class="number">0x57</span>,<span class="number">0x59</span>,<span class="number">0x73</span>,<span class="number">0x7d</span>,<span class="number">0x6f</span>,<span class="number">0x61</span>,</span><br><span class="line"><span class="number">0xad</span>,<span class="number">0xa3</span>,<span class="number">0xb1</span>,<span class="number">0xbf</span>,<span class="number">0x95</span>,<span class="number">0x9b</span>,<span class="number">0x89</span>,<span class="number">0x87</span>,<span class="number">0xdd</span>,<span class="number">0xd3</span>,<span class="number">0xc1</span>,<span class="number">0xcf</span>,<span class="number">0xe5</span>,<span class="number">0xeb</span>,<span class="number">0xf9</span>,<span class="number">0xf7</span>,</span><br><span class="line"><span class="number">0x4d</span>,<span class="number">0x43</span>,<span class="number">0x51</span>,<span class="number">0x5f</span>,<span class="number">0x75</span>,<span class="number">0x7b</span>,<span class="number">0x69</span>,<span class="number">0x67</span>,<span class="number">0x3d</span>,<span class="number">0x33</span>,<span class="number">0x21</span>,<span class="number">0x2f</span>,<span class="number">0x05</span>,<span class="number">0x0b</span>,<span class="number">0x19</span>,<span class="number">0x17</span>,</span><br><span class="line"><span class="number">0x76</span>,<span class="number">0x78</span>,<span class="number">0x6a</span>,<span class="number">0x64</span>,<span class="number">0x4e</span>,<span class="number">0x40</span>,<span class="number">0x52</span>,<span class="number">0x5c</span>,<span class="number">0x06</span>,<span class="number">0x08</span>,<span class="number">0x1a</span>,<span class="number">0x14</span>,<span class="number">0x3e</span>,<span class="number">0x30</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,</span><br><span class="line"><span class="number">0x96</span>,<span class="number">0x98</span>,<span class="number">0x8a</span>,<span class="number">0x84</span>,<span class="number">0xae</span>,<span class="number">0xa0</span>,<span class="number">0xb2</span>,<span class="number">0xbc</span>,<span class="number">0xe6</span>,<span class="number">0xe8</span>,<span class="number">0xfa</span>,<span class="number">0xf4</span>,<span class="number">0xde</span>,<span class="number">0xd0</span>,<span class="number">0xc2</span>,<span class="number">0xcc</span>,</span><br><span class="line"><span class="number">0x41</span>,<span class="number">0x4f</span>,<span class="number">0x5d</span>,<span class="number">0x53</span>,<span class="number">0x79</span>,<span class="number">0x77</span>,<span class="number">0x65</span>,<span class="number">0x6b</span>,<span class="number">0x31</span>,<span class="number">0x3f</span>,<span class="number">0x2d</span>,<span class="number">0x23</span>,<span class="number">0x09</span>,<span class="number">0x07</span>,<span class="number">0x15</span>,<span class="number">0x1b</span>,</span><br><span class="line"><span class="number">0xa1</span>,<span class="number">0xaf</span>,<span class="number">0xbd</span>,<span class="number">0xb3</span>,<span class="number">0x99</span>,<span class="number">0x97</span>,<span class="number">0x85</span>,<span class="number">0x8b</span>,<span class="number">0xd1</span>,<span class="number">0xdf</span>,<span class="number">0xcd</span>,<span class="number">0xc3</span>,<span class="number">0xe9</span>,<span class="number">0xe7</span>,<span class="number">0xf5</span>,<span class="number">0xfb</span>,</span><br><span class="line"><span class="number">0x9a</span>,<span class="number">0x94</span>,<span class="number">0x86</span>,<span class="number">0x88</span>,<span class="number">0xa2</span>,<span class="number">0xac</span>,<span class="number">0xbe</span>,<span class="number">0xb0</span>,<span class="number">0xea</span>,<span class="number">0xe4</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0xd2</span>,<span class="number">0xdc</span>,<span class="number">0xce</span>,<span class="number">0xc0</span>,</span><br><span class="line"><span class="number">0x7a</span>,<span class="number">0x74</span>,<span class="number">0x66</span>,<span class="number">0x68</span>,<span class="number">0x42</span>,<span class="number">0x4c</span>,<span class="number">0x5e</span>,<span class="number">0x50</span>,<span class="number">0x0a</span>,<span class="number">0x04</span>,<span class="number">0x16</span>,<span class="number">0x18</span>,<span class="number">0x32</span>,<span class="number">0x3c</span>,<span class="number">0x2e</span>,<span class="number">0x20</span>,</span><br><span class="line"><span class="number">0xec</span>,<span class="number">0xe2</span>,<span class="number">0xf0</span>,<span class="number">0xfe</span>,<span class="number">0xd4</span>,<span class="number">0xda</span>,<span class="number">0xc8</span>,<span class="number">0xc6</span>,<span class="number">0x9c</span>,<span class="number">0x92</span>,<span class="number">0x80</span>,<span class="number">0x8e</span>,<span class="number">0xa4</span>,<span class="number">0xaa</span>,<span class="number">0xb8</span>,<span class="number">0xb6</span>,</span><br><span class="line"><span class="number">0x0c</span>,<span class="number">0x02</span>,<span class="number">0x10</span>,<span class="number">0x1e</span>,<span class="number">0x34</span>,<span class="number">0x3a</span>,<span class="number">0x28</span>,<span class="number">0x26</span>,<span class="number">0x7c</span>,<span class="number">0x72</span>,<span class="number">0x60</span>,<span class="number">0x6e</span>,<span class="number">0x44</span>,<span class="number">0x4a</span>,<span class="number">0x58</span>,<span class="number">0x56</span>,</span><br><span class="line"><span class="number">0x37</span>,<span class="number">0x39</span>,<span class="number">0x2b</span>,<span class="number">0x25</span>,<span class="number">0x0f</span>,<span class="number">0x01</span>,<span class="number">0x13</span>,<span class="number">0x1d</span>,<span class="number">0x47</span>,<span class="number">0x49</span>,<span class="number">0x5b</span>,<span class="number">0x55</span>,<span class="number">0x7f</span>,<span class="number">0x71</span>,<span class="number">0x63</span>,<span class="number">0x6d</span>,</span><br><span class="line"><span class="number">0xd7</span>,<span class="number">0xd9</span>,<span class="number">0xcb</span>,<span class="number">0xc5</span>,<span class="number">0xef</span>,<span class="number">0xe1</span>,<span class="number">0xf3</span>,<span class="number">0xfd</span>,<span class="number">0xa7</span>,<span class="number">0xa9</span>,<span class="number">0xbb</span>,<span class="number">0xb5</span>,<span class="number">0x9f</span>,<span class="number">0x91</span>,<span class="number">0x83</span>,<span class="number">0x8d</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="五、总结">五、总结</h2><h3 id="AES-的优势"><code>AES</code> 的优势</h3><ul><li><p>更高的安全性： <code>AES </code>提供了更高的安全性，因为它支持更长的密钥长度（128 比特、192 比特和 256 比特），这使得密码破解更加困难。相比之下，DES 使用 56 位密钥，相对容易受到暴力破解攻击。</p></li><li><p>更快的加密速度： <code>AES </code>的算法结构允许更高效的硬件和软件实现，因此它通常比 <code>DES </code>更快。这是由于其更简单的替代和置换结构，以及较长的密钥长度。</p></li><li><p>更好的密码学设计： <code>AES </code>的设计经过了广泛的密码学研究和审查，以确保其强大的安全性。相比之下，DES 已经过时，已经受到多种攻击的影响，包括差分攻击和线性攻击。</p></li><li><p>支持多种密钥长度： <code>AES </code>允许选择不同长度的密钥，以适应不同安全需求。这样，可以根据具体应用选择 128 位、192 位或 256 位密钥长度。</p></li><li><p>广泛采用： <code>AES </code>已经被广泛采用，被许多组织和国家用作数据加密的标准，包括美国政府。</p></li></ul><h3 id="AES-的缺点"><code>AES </code>的缺点</h3><ul><li><p>高硬件成本： 虽然 <code>AES </code>的算法结构更高效，但实现硬件版本仍然可能比 <code>DES </code>更昂贵。这可能会对资源有限的嵌入式系统造成一定负担。</p></li><li><p>不支持较长的块长度： <code>AES </code>只支持 <code>128 </code>位的块长度，而某些应用需要更长的块长度。这可能需要进行分组加密，增加了复杂性。</p></li></ul><p>总的来说，<code>AES </code>是一安全、高效且现代的对称加密算法，相对于 <code>DES </code>具有更多的优势。虽然它可能不是完美的，但它是当前广泛应用的加密标准之一，可满足多种安全需求。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合数II</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="886-求组合数-II">886. 求组合数 II</h2><h3 id="题目">题目</h3><p>给定 <code>n</code> 组询问，每组询问给定两个整数 <code>a</code>，<code>b</code>，请你输出 $C_b^amod(10^9+7)$ 的值。</p><p>输入格式<br>第一行包含整数 <code>n</code>。接下来 <code>n</code> 行，每行包含一组 <code>a</code> 和 <code>b</code>。</p><p>输出格式共 <code>n</code>行，每行输出一个询问的解。</p><p>数据范围 $1≤n≤10000$,$1≤b≤a≤105$<br>输入样例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">1</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="题解">题解</h3><h4 id="Q1：明明是除法为什么要特意转换成乘法">Q1：明明是除法为什么要特意转换成乘法</h4><blockquote><p>那是因为这道题目最后是要求余的，模运算与基本四则运算有些相似，但是除法例外。其规则如下：<br>(a + b) % p = (a % p + b % p) % p<br>(a - b) % p = (a % p - b % p) % p<br>(a _ b) % p = (a % p _ b % p) % p<br>但对于除法却不成立，即(a / b) % p 不等于 (a % p / b % p) % p 。</p></blockquote><hr><h4 id="Q2：那么为什么非要转换成乘法逆元呢？">Q2：那么为什么非要转换成乘法逆元呢？</h4><blockquote><p>不能使用除法，显然数学家们是不能忍受这种局面的，他们扔出了“逆元”来解决这个问题。</p></blockquote><h5 id="证明：">证明：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">开始<span class="selector-tag">a</span>/<span class="selector-tag">b</span>≡m(modp) -------①</span><br><span class="line"></span><br><span class="line">假设存在 binv 满足<span class="selector-tag">a</span>⋅binv≡x(modp)-------②</span><br><span class="line"></span><br><span class="line">①②式两边同乘一个 <span class="selector-tag">b</span></span><br><span class="line"></span><br><span class="line">得到</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>≡bx(modp)----- ③</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>⋅binv⋅<span class="selector-tag">b</span>≡bx(modp)------④</span><br><span class="line"></span><br><span class="line">根据模运算减法性质将两式相减④-③得 <span class="selector-tag">a</span>(binv⋅<span class="selector-tag">b</span>−<span class="number">1</span>)≡<span class="number">0</span>(modp)</span><br><span class="line"></span><br><span class="line">因为我们在找<span class="selector-tag">b</span>得乘法逆元，所以<span class="selector-tag">a</span>的值任意，所以式子相当于 binv⋅<span class="selector-tag">b</span>−<span class="number">1</span>≡<span class="number">0</span>(modp)</span><br><span class="line"></span><br><span class="line">即 binv⋅<span class="selector-tag">b</span>≡<span class="number">1</span>(modp)</span><br><span class="line">哎，binv是<span class="selector-tag">b</span>的逆元呀（x 在模运算的乘法中等同于 <span class="number">1</span>/<span class="selector-tag">b</span>, 这就是逆元的意义）</span><br><span class="line">所以我们只需要求<span class="selector-tag">b</span>的逆元即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="Q3-所以逆元要怎么求呢？-k-−1-≡-k-1-1-p−2-是哪里来的？-1-是逆元">Q3 所以逆元要怎么求呢？(k!)(−1)≡(k - 1)!(-1)^(p−2)是哪里来的？ <s>(-1)是逆元!!</s></h4><p>这里其实是有个小技巧的，因为 mod 是 1e9 +7，其实是一个非常大的质数，我们知道质数的因子只有 1 和其本身，所以 2~1e9 + 6 其实都是与 1e9 + 7 是互质<br>根据在 <a href="https://www.acwing.com/problem/content/878/">快速幂求逆元</a></p><blockquote><p>我们知道若整数 b，m 互质，并且对于任意的整数 a，如果满足 b|a，则存在一个整数 x，使得 a/b≡ax(modm)，则称 x 为 b 的模 m 乘法逆元，记为 $b^{−1}(modm)$。<br>b 存在乘法逆元的充要条件是 b 与模数 m 互质。当模数 m 为质数时，$b^{(m−2)}$ 即为 b 的乘法逆元。<br>以为 2~1e9 + 6 其实都是与 1e9 + 7 是互质的，所以根据小费马定理可以换算出$b^{(m−2)}$ 即为 b 的乘法逆元。</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">费马小定理：若 p 是质数，整数<span class="keyword">b不是p的倍数，则 </span><span class="keyword">b^(p−1)≡1(modp).</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">我们可以将式子变形：<span class="keyword">b⋅b^p−2≡1(modp)，所以 </span><span class="keyword">binv=b^p−2，结合快速幂模板可求解</span></span><br></pre></td></tr></table></figure><hr><h4 id="Q4：为什么在求逆元的时候-mod-后还要-mod">Q4：为什么在求逆元的时候 mod 后还要 mod</h4><blockquote><p>其实这可以参照模运算的乘法法则<br>因为在乘法过程中，答案会非常大，而 mod 多一次并不会改变最终的答案，可以举个小一点的例子，<s>我太懒了，这里就不举了</s>只是在过程中把量减小了，不会在计算过程中超出数据范围而出现什么奇怪的答案</p></blockquote><hr><h3 id="代码">代码</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">100010</span>, <span class="built_in">mod</span> = <span class="number">1</span>e9 + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="built_in">fact</span>[<span class="built_in">N</span>];</span><br><span class="line"><span class="built_in">int</span> infact[<span class="built_in">N</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> qmi(<span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="built_in">int</span> m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> res = <span class="number">1</span>;</span><br><span class="line">    while(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">if</span>(b &amp; <span class="number">1</span>) res = (LL)res * a % <span class="built_in">mod</span>;</span><br><span class="line"></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        a = (LL)a * a % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    i<span class="symbol">os:</span><span class="symbol">:sy</span>nc_with_stdio(<span class="built_in">false</span>);</span><br><span class="line">    cin.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">n</span>;</span><br><span class="line">    cin &gt;&gt; <span class="built_in">n</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fact</span>[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    for(<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">N</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fact</span>[i] = (LL)<span class="built_in">fact</span>[i - <span class="number">1</span>] * i % <span class="built_in">mod</span>;</span><br><span class="line">        infact[i] = (LL) infact[i - <span class="number">1</span>] * qmi(i, <span class="built_in">mod</span> - <span class="number">2</span>, <span class="built_in">mod</span>) % <span class="built_in">mod</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (<span class="built_in">n</span> -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        cout &lt;&lt; (LL)<span class="built_in">fact</span>[a] * infact[b] % <span class="built_in">mod</span> * infact[a - b] % <span class="built_in">mod</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合数 </tag>
            
            <tag> 数论 </tag>
            
            <tag> Acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /># 1.Markdown 语法自带格式<div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown 语法图文全面详解(10 分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在 CSS 冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch;</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch;</span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5 号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown 语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span></span><br><span class="line"><span class="bullet">2.</span></span><br><span class="line"><span class="bullet">3.</span></span><br><span class="line">4.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly 外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于 Butterfly 的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用-note">2.4 引用 note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带 icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部 icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021 年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div> 2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021 年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021 年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持 fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义 font awesome 图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的 CSS 类添加到图标（或 DOM 中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定 CSS 类，同时还要给目标元素的父级元素添加 CSS 类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加 CSS 类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div> 2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多 2 列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多 3 列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多 4 列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多 5 列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格 5 列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&#123;% p red, 专业版 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">&#123;% p green, 免费版 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div> 2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div> 3.圆形图标 + 标题 + 描述 + 图片 + 网格 5 列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p red'>专业版</p><img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p green'>免费版</p><img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github-卡片-ghcard">2.12 github 卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125;                | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125;             |</span><br><span class="line">| ---------------------------------------------------------- | ------------------------------------------------------------------ |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125;   | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125;  |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125;            |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github-徽标-ghbdage">2.13 github 徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化 SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部 API 参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持 shields 的 API 的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持 shields 的 API 的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly 需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div> 3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div> 4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的 Gallery 相册,新的 Gallery 相册会自动根据图片长度进行排版，书写也更加方便，与 markdown 格式一样。可根据需要插入到相应的 md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line"></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id 中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的 URL 必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果 index 为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome 图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择 tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**tab 名字为第一个 Tab**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**只有图标 没有 Tab 名字**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择 tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义 Tab 名 + 只有 icon + icon 和 Tab 名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab 名字为第一个 Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有 Tab 名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签-wow">2.24 特效标签 wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css 参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip 动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn 动画效果，持续 5s，延时 5s，离底部 100 距离时启动，重复 10 次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight 动画效果，持续 5s，延时 5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat 动画效果，延时 5s，重复 10 次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip 动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn 动画效果，持续 5s，延时 5s，离底部 100 距离时启动，重复 10 次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight 动画效果，持续 5s，延时 5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat 动画效果，延时 5s，重复 10 次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25 进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给 HEXO 文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0 到 100 的阿拉伯数字</li><li><code>color</code>: 颜色，取值有 red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如 CSS 的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation 的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与 referfrom 标签的 id 对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与 referto 标签的 id 对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilar の糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用 Hexo 框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly 主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了 Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个 volantis 的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly 主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF-展示">2.29 PDF 展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box" style="margin: 0.8rem 0 1.6rem 0;"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'高德地图'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'高德地图'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="//unpkg.com/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
